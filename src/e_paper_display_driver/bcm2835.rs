/* automatically generated by rust-bindgen 0.72.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    fn extract_bit(byte: u8, index: usize) -> bool {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        Self::extract_bit(byte, index)
    }
    #[inline]
    pub unsafe fn raw_get_bit(this: *const Self, index: usize) -> bool {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte = unsafe {
            *(core::ptr::addr_of!((*this).storage) as *const u8).offset(byte_index as isize)
        };
        Self::extract_bit(byte, index)
    }
    #[inline]
    fn change_bit(byte: u8, index: usize, val: bool) -> u8 {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            byte | mask
        } else {
            byte & !mask
        }
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        *byte = Self::change_bit(*byte, index, val);
    }
    #[inline]
    pub unsafe fn raw_set_bit(this: *mut Self, index: usize, val: bool) {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte = unsafe {
            (core::ptr::addr_of_mut!((*this).storage) as *mut u8).offset(byte_index as isize)
        };
        unsafe { *byte = Self::change_bit(*byte, index, val) };
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub unsafe fn raw_get(this: *const Self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if unsafe { Self::raw_get_bit(this, i + bit_offset) } {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
    #[inline]
    pub unsafe fn raw_set(this: *mut Self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            unsafe { Self::raw_set_bit(this, index + bit_offset, val_bit_is_set) };
        }
    }
}
pub const __WORDSIZE: u32 = 64;
pub const __has_safe_buffers: u32 = 1;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 0;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_ONLY_VERS_1050: u32 = 0;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_64_BIT_INO_T: &[u8; 9] = b"$INODE64\0";
pub const __DARWIN_SUF_1050: &[u8; 6] = b"$1050\0";
pub const __DARWIN_SUF_EXTSN: &[u8; 14] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __has_ptrcheck: u32 = 0;
pub const __has_bounds_safety_attributes: u32 = 0;
pub const USE_CLANG_TYPES: u32 = 0;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const _QUAD_HIGHWORD: u32 = 1;
pub const _QUAD_LOWWORD: u32 = 0;
pub const __DARWIN_LITTLE_ENDIAN: u32 = 1234;
pub const __DARWIN_BIG_ENDIAN: u32 = 4321;
pub const __DARWIN_PDP_ENDIAN: u32 = 3412;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const __DARWIN_BYTE_ORDER: u32 = 1234;
pub const BYTE_ORDER: u32 = 1234;
pub const USE_CLANG_STDDEF: u32 = 0;
pub const __API_TO_BE_DEPRECATED: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACOSAPPLICATIONEXTENSION: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_IOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_IOSAPPLICATIONEXTENSION: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACCATALYST: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACCATALYSTAPPLICATIONEXTENSION: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_WATCHOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_WATCHOSAPPLICATIONEXTENSION: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_TVOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_TVOSAPPLICATIONEXTENSION: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_DRIVERKIT: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_VISIONOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_VISIONOSAPPLICATIONEXTENSION: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_KERNELKIT: u32 = 100000;
pub const __MAC_10_0: u32 = 1000;
pub const __MAC_10_1: u32 = 1010;
pub const __MAC_10_2: u32 = 1020;
pub const __MAC_10_3: u32 = 1030;
pub const __MAC_10_4: u32 = 1040;
pub const __MAC_10_5: u32 = 1050;
pub const __MAC_10_6: u32 = 1060;
pub const __MAC_10_7: u32 = 1070;
pub const __MAC_10_8: u32 = 1080;
pub const __MAC_10_9: u32 = 1090;
pub const __MAC_10_10: u32 = 101000;
pub const __MAC_10_10_2: u32 = 101002;
pub const __MAC_10_10_3: u32 = 101003;
pub const __MAC_10_11: u32 = 101100;
pub const __MAC_10_11_2: u32 = 101102;
pub const __MAC_10_11_3: u32 = 101103;
pub const __MAC_10_11_4: u32 = 101104;
pub const __MAC_10_12: u32 = 101200;
pub const __MAC_10_12_1: u32 = 101201;
pub const __MAC_10_12_2: u32 = 101202;
pub const __MAC_10_12_4: u32 = 101204;
pub const __MAC_10_13: u32 = 101300;
pub const __MAC_10_13_1: u32 = 101301;
pub const __MAC_10_13_2: u32 = 101302;
pub const __MAC_10_13_4: u32 = 101304;
pub const __MAC_10_14: u32 = 101400;
pub const __MAC_10_14_1: u32 = 101401;
pub const __MAC_10_14_4: u32 = 101404;
pub const __MAC_10_14_5: u32 = 101405;
pub const __MAC_10_14_6: u32 = 101406;
pub const __MAC_10_15: u32 = 101500;
pub const __MAC_10_15_1: u32 = 101501;
pub const __MAC_10_15_4: u32 = 101504;
pub const __MAC_10_16: u32 = 101600;
pub const __MAC_11_0: u32 = 110000;
pub const __MAC_11_1: u32 = 110100;
pub const __MAC_11_3: u32 = 110300;
pub const __MAC_11_4: u32 = 110400;
pub const __MAC_11_5: u32 = 110500;
pub const __MAC_11_6: u32 = 110600;
pub const __MAC_12_0: u32 = 120000;
pub const __MAC_12_1: u32 = 120100;
pub const __MAC_12_2: u32 = 120200;
pub const __MAC_12_3: u32 = 120300;
pub const __MAC_12_4: u32 = 120400;
pub const __MAC_12_5: u32 = 120500;
pub const __MAC_12_6: u32 = 120600;
pub const __MAC_12_7: u32 = 120700;
pub const __MAC_13_0: u32 = 130000;
pub const __MAC_13_1: u32 = 130100;
pub const __MAC_13_2: u32 = 130200;
pub const __MAC_13_3: u32 = 130300;
pub const __MAC_13_4: u32 = 130400;
pub const __MAC_13_5: u32 = 130500;
pub const __MAC_13_6: u32 = 130600;
pub const __MAC_13_7: u32 = 130700;
pub const __MAC_14_0: u32 = 140000;
pub const __MAC_14_1: u32 = 140100;
pub const __MAC_14_2: u32 = 140200;
pub const __MAC_14_3: u32 = 140300;
pub const __MAC_14_4: u32 = 140400;
pub const __MAC_14_5: u32 = 140500;
pub const __MAC_14_6: u32 = 140600;
pub const __MAC_14_7: u32 = 140700;
pub const __MAC_15_0: u32 = 150000;
pub const __MAC_15_1: u32 = 150100;
pub const __MAC_15_2: u32 = 150200;
pub const __MAC_15_3: u32 = 150300;
pub const __MAC_15_4: u32 = 150400;
pub const __MAC_15_5: u32 = 150500;
pub const __IPHONE_2_0: u32 = 20000;
pub const __IPHONE_2_1: u32 = 20100;
pub const __IPHONE_2_2: u32 = 20200;
pub const __IPHONE_3_0: u32 = 30000;
pub const __IPHONE_3_1: u32 = 30100;
pub const __IPHONE_3_2: u32 = 30200;
pub const __IPHONE_4_0: u32 = 40000;
pub const __IPHONE_4_1: u32 = 40100;
pub const __IPHONE_4_2: u32 = 40200;
pub const __IPHONE_4_3: u32 = 40300;
pub const __IPHONE_5_0: u32 = 50000;
pub const __IPHONE_5_1: u32 = 50100;
pub const __IPHONE_6_0: u32 = 60000;
pub const __IPHONE_6_1: u32 = 60100;
pub const __IPHONE_7_0: u32 = 70000;
pub const __IPHONE_7_1: u32 = 70100;
pub const __IPHONE_8_0: u32 = 80000;
pub const __IPHONE_8_1: u32 = 80100;
pub const __IPHONE_8_2: u32 = 80200;
pub const __IPHONE_8_3: u32 = 80300;
pub const __IPHONE_8_4: u32 = 80400;
pub const __IPHONE_9_0: u32 = 90000;
pub const __IPHONE_9_1: u32 = 90100;
pub const __IPHONE_9_2: u32 = 90200;
pub const __IPHONE_9_3: u32 = 90300;
pub const __IPHONE_10_0: u32 = 100000;
pub const __IPHONE_10_1: u32 = 100100;
pub const __IPHONE_10_2: u32 = 100200;
pub const __IPHONE_10_3: u32 = 100300;
pub const __IPHONE_11_0: u32 = 110000;
pub const __IPHONE_11_1: u32 = 110100;
pub const __IPHONE_11_2: u32 = 110200;
pub const __IPHONE_11_3: u32 = 110300;
pub const __IPHONE_11_4: u32 = 110400;
pub const __IPHONE_12_0: u32 = 120000;
pub const __IPHONE_12_1: u32 = 120100;
pub const __IPHONE_12_2: u32 = 120200;
pub const __IPHONE_12_3: u32 = 120300;
pub const __IPHONE_12_4: u32 = 120400;
pub const __IPHONE_13_0: u32 = 130000;
pub const __IPHONE_13_1: u32 = 130100;
pub const __IPHONE_13_2: u32 = 130200;
pub const __IPHONE_13_3: u32 = 130300;
pub const __IPHONE_13_4: u32 = 130400;
pub const __IPHONE_13_5: u32 = 130500;
pub const __IPHONE_13_6: u32 = 130600;
pub const __IPHONE_13_7: u32 = 130700;
pub const __IPHONE_14_0: u32 = 140000;
pub const __IPHONE_14_1: u32 = 140100;
pub const __IPHONE_14_2: u32 = 140200;
pub const __IPHONE_14_3: u32 = 140300;
pub const __IPHONE_14_5: u32 = 140500;
pub const __IPHONE_14_4: u32 = 140400;
pub const __IPHONE_14_6: u32 = 140600;
pub const __IPHONE_14_7: u32 = 140700;
pub const __IPHONE_14_8: u32 = 140800;
pub const __IPHONE_15_0: u32 = 150000;
pub const __IPHONE_15_1: u32 = 150100;
pub const __IPHONE_15_2: u32 = 150200;
pub const __IPHONE_15_3: u32 = 150300;
pub const __IPHONE_15_4: u32 = 150400;
pub const __IPHONE_15_5: u32 = 150500;
pub const __IPHONE_15_6: u32 = 150600;
pub const __IPHONE_15_7: u32 = 150700;
pub const __IPHONE_15_8: u32 = 150800;
pub const __IPHONE_16_0: u32 = 160000;
pub const __IPHONE_16_1: u32 = 160100;
pub const __IPHONE_16_2: u32 = 160200;
pub const __IPHONE_16_3: u32 = 160300;
pub const __IPHONE_16_4: u32 = 160400;
pub const __IPHONE_16_5: u32 = 160500;
pub const __IPHONE_16_6: u32 = 160600;
pub const __IPHONE_16_7: u32 = 160700;
pub const __IPHONE_17_0: u32 = 170000;
pub const __IPHONE_17_1: u32 = 170100;
pub const __IPHONE_17_2: u32 = 170200;
pub const __IPHONE_17_3: u32 = 170300;
pub const __IPHONE_17_4: u32 = 170400;
pub const __IPHONE_17_5: u32 = 170500;
pub const __IPHONE_17_6: u32 = 170600;
pub const __IPHONE_17_7: u32 = 170700;
pub const __IPHONE_18_0: u32 = 180000;
pub const __IPHONE_18_1: u32 = 180100;
pub const __IPHONE_18_2: u32 = 180200;
pub const __IPHONE_18_3: u32 = 180300;
pub const __IPHONE_18_4: u32 = 180400;
pub const __IPHONE_18_5: u32 = 180500;
pub const __WATCHOS_1_0: u32 = 10000;
pub const __WATCHOS_2_0: u32 = 20000;
pub const __WATCHOS_2_1: u32 = 20100;
pub const __WATCHOS_2_2: u32 = 20200;
pub const __WATCHOS_3_0: u32 = 30000;
pub const __WATCHOS_3_1: u32 = 30100;
pub const __WATCHOS_3_1_1: u32 = 30101;
pub const __WATCHOS_3_2: u32 = 30200;
pub const __WATCHOS_4_0: u32 = 40000;
pub const __WATCHOS_4_1: u32 = 40100;
pub const __WATCHOS_4_2: u32 = 40200;
pub const __WATCHOS_4_3: u32 = 40300;
pub const __WATCHOS_5_0: u32 = 50000;
pub const __WATCHOS_5_1: u32 = 50100;
pub const __WATCHOS_5_2: u32 = 50200;
pub const __WATCHOS_5_3: u32 = 50300;
pub const __WATCHOS_6_0: u32 = 60000;
pub const __WATCHOS_6_1: u32 = 60100;
pub const __WATCHOS_6_2: u32 = 60200;
pub const __WATCHOS_7_0: u32 = 70000;
pub const __WATCHOS_7_1: u32 = 70100;
pub const __WATCHOS_7_2: u32 = 70200;
pub const __WATCHOS_7_3: u32 = 70300;
pub const __WATCHOS_7_4: u32 = 70400;
pub const __WATCHOS_7_5: u32 = 70500;
pub const __WATCHOS_7_6: u32 = 70600;
pub const __WATCHOS_8_0: u32 = 80000;
pub const __WATCHOS_8_1: u32 = 80100;
pub const __WATCHOS_8_3: u32 = 80300;
pub const __WATCHOS_8_4: u32 = 80400;
pub const __WATCHOS_8_5: u32 = 80500;
pub const __WATCHOS_8_6: u32 = 80600;
pub const __WATCHOS_8_7: u32 = 80700;
pub const __WATCHOS_8_8: u32 = 80800;
pub const __WATCHOS_9_0: u32 = 90000;
pub const __WATCHOS_9_1: u32 = 90100;
pub const __WATCHOS_9_2: u32 = 90200;
pub const __WATCHOS_9_3: u32 = 90300;
pub const __WATCHOS_9_4: u32 = 90400;
pub const __WATCHOS_9_5: u32 = 90500;
pub const __WATCHOS_9_6: u32 = 90600;
pub const __WATCHOS_10_0: u32 = 100000;
pub const __WATCHOS_10_1: u32 = 100100;
pub const __WATCHOS_10_2: u32 = 100200;
pub const __WATCHOS_10_3: u32 = 100300;
pub const __WATCHOS_10_4: u32 = 100400;
pub const __WATCHOS_10_5: u32 = 100500;
pub const __WATCHOS_10_6: u32 = 100600;
pub const __WATCHOS_10_7: u32 = 100700;
pub const __WATCHOS_11_0: u32 = 110000;
pub const __WATCHOS_11_1: u32 = 110100;
pub const __WATCHOS_11_2: u32 = 110200;
pub const __WATCHOS_11_3: u32 = 110300;
pub const __WATCHOS_11_4: u32 = 110400;
pub const __WATCHOS_11_5: u32 = 110500;
pub const __TVOS_9_0: u32 = 90000;
pub const __TVOS_9_1: u32 = 90100;
pub const __TVOS_9_2: u32 = 90200;
pub const __TVOS_10_0: u32 = 100000;
pub const __TVOS_10_0_1: u32 = 100001;
pub const __TVOS_10_1: u32 = 100100;
pub const __TVOS_10_2: u32 = 100200;
pub const __TVOS_11_0: u32 = 110000;
pub const __TVOS_11_1: u32 = 110100;
pub const __TVOS_11_2: u32 = 110200;
pub const __TVOS_11_3: u32 = 110300;
pub const __TVOS_11_4: u32 = 110400;
pub const __TVOS_12_0: u32 = 120000;
pub const __TVOS_12_1: u32 = 120100;
pub const __TVOS_12_2: u32 = 120200;
pub const __TVOS_12_3: u32 = 120300;
pub const __TVOS_12_4: u32 = 120400;
pub const __TVOS_13_0: u32 = 130000;
pub const __TVOS_13_2: u32 = 130200;
pub const __TVOS_13_3: u32 = 130300;
pub const __TVOS_13_4: u32 = 130400;
pub const __TVOS_14_0: u32 = 140000;
pub const __TVOS_14_1: u32 = 140100;
pub const __TVOS_14_2: u32 = 140200;
pub const __TVOS_14_3: u32 = 140300;
pub const __TVOS_14_5: u32 = 140500;
pub const __TVOS_14_6: u32 = 140600;
pub const __TVOS_14_7: u32 = 140700;
pub const __TVOS_15_0: u32 = 150000;
pub const __TVOS_15_1: u32 = 150100;
pub const __TVOS_15_2: u32 = 150200;
pub const __TVOS_15_3: u32 = 150300;
pub const __TVOS_15_4: u32 = 150400;
pub const __TVOS_15_5: u32 = 150500;
pub const __TVOS_15_6: u32 = 150600;
pub const __TVOS_16_0: u32 = 160000;
pub const __TVOS_16_1: u32 = 160100;
pub const __TVOS_16_2: u32 = 160200;
pub const __TVOS_16_3: u32 = 160300;
pub const __TVOS_16_4: u32 = 160400;
pub const __TVOS_16_5: u32 = 160500;
pub const __TVOS_16_6: u32 = 160600;
pub const __TVOS_17_0: u32 = 170000;
pub const __TVOS_17_1: u32 = 170100;
pub const __TVOS_17_2: u32 = 170200;
pub const __TVOS_17_3: u32 = 170300;
pub const __TVOS_17_4: u32 = 170400;
pub const __TVOS_17_5: u32 = 170500;
pub const __TVOS_17_6: u32 = 170600;
pub const __TVOS_18_0: u32 = 180000;
pub const __TVOS_18_1: u32 = 180100;
pub const __TVOS_18_2: u32 = 180200;
pub const __TVOS_18_3: u32 = 180300;
pub const __TVOS_18_4: u32 = 180400;
pub const __TVOS_18_5: u32 = 180500;
pub const __BRIDGEOS_2_0: u32 = 20000;
pub const __BRIDGEOS_3_0: u32 = 30000;
pub const __BRIDGEOS_3_1: u32 = 30100;
pub const __BRIDGEOS_3_4: u32 = 30400;
pub const __BRIDGEOS_4_0: u32 = 40000;
pub const __BRIDGEOS_4_1: u32 = 40100;
pub const __BRIDGEOS_5_0: u32 = 50000;
pub const __BRIDGEOS_5_1: u32 = 50100;
pub const __BRIDGEOS_5_3: u32 = 50300;
pub const __BRIDGEOS_6_0: u32 = 60000;
pub const __BRIDGEOS_6_2: u32 = 60200;
pub const __BRIDGEOS_6_4: u32 = 60400;
pub const __BRIDGEOS_6_5: u32 = 60500;
pub const __BRIDGEOS_6_6: u32 = 60600;
pub const __BRIDGEOS_7_0: u32 = 70000;
pub const __BRIDGEOS_7_1: u32 = 70100;
pub const __BRIDGEOS_7_2: u32 = 70200;
pub const __BRIDGEOS_7_3: u32 = 70300;
pub const __BRIDGEOS_7_4: u32 = 70400;
pub const __BRIDGEOS_7_6: u32 = 70600;
pub const __BRIDGEOS_8_0: u32 = 80000;
pub const __BRIDGEOS_8_1: u32 = 80100;
pub const __BRIDGEOS_8_2: u32 = 80200;
pub const __BRIDGEOS_8_3: u32 = 80300;
pub const __BRIDGEOS_8_4: u32 = 80400;
pub const __BRIDGEOS_8_5: u32 = 80500;
pub const __BRIDGEOS_8_6: u32 = 80600;
pub const __BRIDGEOS_9_0: u32 = 90000;
pub const __BRIDGEOS_9_1: u32 = 90100;
pub const __BRIDGEOS_9_2: u32 = 90200;
pub const __BRIDGEOS_9_3: u32 = 90300;
pub const __BRIDGEOS_9_4: u32 = 90400;
pub const __BRIDGEOS_9_5: u32 = 90500;
pub const __DRIVERKIT_19_0: u32 = 190000;
pub const __DRIVERKIT_20_0: u32 = 200000;
pub const __DRIVERKIT_21_0: u32 = 210000;
pub const __DRIVERKIT_22_0: u32 = 220000;
pub const __DRIVERKIT_22_4: u32 = 220400;
pub const __DRIVERKIT_22_5: u32 = 220500;
pub const __DRIVERKIT_22_6: u32 = 220600;
pub const __DRIVERKIT_23_0: u32 = 230000;
pub const __DRIVERKIT_23_1: u32 = 230100;
pub const __DRIVERKIT_23_2: u32 = 230200;
pub const __DRIVERKIT_23_3: u32 = 230300;
pub const __DRIVERKIT_23_4: u32 = 230400;
pub const __DRIVERKIT_23_5: u32 = 230500;
pub const __DRIVERKIT_23_6: u32 = 230600;
pub const __DRIVERKIT_24_0: u32 = 240000;
pub const __DRIVERKIT_24_1: u32 = 240100;
pub const __DRIVERKIT_24_2: u32 = 240200;
pub const __DRIVERKIT_24_3: u32 = 240300;
pub const __DRIVERKIT_24_4: u32 = 240400;
pub const __DRIVERKIT_24_5: u32 = 240500;
pub const __VISIONOS_1_0: u32 = 10000;
pub const __VISIONOS_1_1: u32 = 10100;
pub const __VISIONOS_1_2: u32 = 10200;
pub const __VISIONOS_1_3: u32 = 10300;
pub const __VISIONOS_2_0: u32 = 20000;
pub const __VISIONOS_2_1: u32 = 20100;
pub const __VISIONOS_2_2: u32 = 20200;
pub const __VISIONOS_2_3: u32 = 20300;
pub const __VISIONOS_2_4: u32 = 20400;
pub const __VISIONOS_2_5: u32 = 20500;
pub const MAC_OS_X_VERSION_10_0: u32 = 1000;
pub const MAC_OS_X_VERSION_10_1: u32 = 1010;
pub const MAC_OS_X_VERSION_10_2: u32 = 1020;
pub const MAC_OS_X_VERSION_10_3: u32 = 1030;
pub const MAC_OS_X_VERSION_10_4: u32 = 1040;
pub const MAC_OS_X_VERSION_10_5: u32 = 1050;
pub const MAC_OS_X_VERSION_10_6: u32 = 1060;
pub const MAC_OS_X_VERSION_10_7: u32 = 1070;
pub const MAC_OS_X_VERSION_10_8: u32 = 1080;
pub const MAC_OS_X_VERSION_10_9: u32 = 1090;
pub const MAC_OS_X_VERSION_10_10: u32 = 101000;
pub const MAC_OS_X_VERSION_10_10_2: u32 = 101002;
pub const MAC_OS_X_VERSION_10_10_3: u32 = 101003;
pub const MAC_OS_X_VERSION_10_11: u32 = 101100;
pub const MAC_OS_X_VERSION_10_11_2: u32 = 101102;
pub const MAC_OS_X_VERSION_10_11_3: u32 = 101103;
pub const MAC_OS_X_VERSION_10_11_4: u32 = 101104;
pub const MAC_OS_X_VERSION_10_12: u32 = 101200;
pub const MAC_OS_X_VERSION_10_12_1: u32 = 101201;
pub const MAC_OS_X_VERSION_10_12_2: u32 = 101202;
pub const MAC_OS_X_VERSION_10_12_4: u32 = 101204;
pub const MAC_OS_X_VERSION_10_13: u32 = 101300;
pub const MAC_OS_X_VERSION_10_13_1: u32 = 101301;
pub const MAC_OS_X_VERSION_10_13_2: u32 = 101302;
pub const MAC_OS_X_VERSION_10_13_4: u32 = 101304;
pub const MAC_OS_X_VERSION_10_14: u32 = 101400;
pub const MAC_OS_X_VERSION_10_14_1: u32 = 101401;
pub const MAC_OS_X_VERSION_10_14_4: u32 = 101404;
pub const MAC_OS_X_VERSION_10_14_5: u32 = 101405;
pub const MAC_OS_X_VERSION_10_14_6: u32 = 101406;
pub const MAC_OS_X_VERSION_10_15: u32 = 101500;
pub const MAC_OS_X_VERSION_10_15_1: u32 = 101501;
pub const MAC_OS_X_VERSION_10_15_4: u32 = 101504;
pub const MAC_OS_X_VERSION_10_16: u32 = 101600;
pub const MAC_OS_VERSION_11_0: u32 = 110000;
pub const MAC_OS_VERSION_11_1: u32 = 110100;
pub const MAC_OS_VERSION_11_3: u32 = 110300;
pub const MAC_OS_VERSION_11_4: u32 = 110400;
pub const MAC_OS_VERSION_11_5: u32 = 110500;
pub const MAC_OS_VERSION_11_6: u32 = 110600;
pub const MAC_OS_VERSION_12_0: u32 = 120000;
pub const MAC_OS_VERSION_12_1: u32 = 120100;
pub const MAC_OS_VERSION_12_2: u32 = 120200;
pub const MAC_OS_VERSION_12_3: u32 = 120300;
pub const MAC_OS_VERSION_12_4: u32 = 120400;
pub const MAC_OS_VERSION_12_5: u32 = 120500;
pub const MAC_OS_VERSION_12_6: u32 = 120600;
pub const MAC_OS_VERSION_12_7: u32 = 120700;
pub const MAC_OS_VERSION_13_0: u32 = 130000;
pub const MAC_OS_VERSION_13_1: u32 = 130100;
pub const MAC_OS_VERSION_13_2: u32 = 130200;
pub const MAC_OS_VERSION_13_3: u32 = 130300;
pub const MAC_OS_VERSION_13_4: u32 = 130400;
pub const MAC_OS_VERSION_13_5: u32 = 130500;
pub const MAC_OS_VERSION_13_6: u32 = 130600;
pub const MAC_OS_VERSION_13_7: u32 = 130700;
pub const MAC_OS_VERSION_14_0: u32 = 140000;
pub const MAC_OS_VERSION_14_1: u32 = 140100;
pub const MAC_OS_VERSION_14_2: u32 = 140200;
pub const MAC_OS_VERSION_14_3: u32 = 140300;
pub const MAC_OS_VERSION_14_4: u32 = 140400;
pub const MAC_OS_VERSION_14_5: u32 = 140500;
pub const MAC_OS_VERSION_14_6: u32 = 140600;
pub const MAC_OS_VERSION_14_7: u32 = 140700;
pub const MAC_OS_VERSION_15_0: u32 = 150000;
pub const MAC_OS_VERSION_15_1: u32 = 150100;
pub const MAC_OS_VERSION_15_2: u32 = 150200;
pub const MAC_OS_VERSION_15_3: u32 = 150300;
pub const MAC_OS_VERSION_15_4: u32 = 150400;
pub const MAC_OS_VERSION_15_5: u32 = 150500;
pub const __AVAILABILITY_VERSIONS_VERSION_HASH: u32 = 93585900;
pub const __AVAILABILITY_VERSIONS_VERSION_STRING: &[u8; 6] = b"Local\0";
pub const __AVAILABILITY_FILE: &[u8; 23] = b"AvailabilityVersions.h\0";
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 150500;
pub const __ENABLE_LEGACY_MAC_AVAILABILITY: u32 = 1;
pub const __DARWIN_FD_SETSIZE: u32 = 1024;
pub const __DARWIN_NBBY: u32 = 8;
pub const NBBY: u32 = 8;
pub const FD_SETSIZE: u32 = 1024;
pub const O_RDONLY: u32 = 0;
pub const O_WRONLY: u32 = 1;
pub const O_RDWR: u32 = 2;
pub const O_ACCMODE: u32 = 3;
pub const FREAD: u32 = 1;
pub const FWRITE: u32 = 2;
pub const O_NONBLOCK: u32 = 4;
pub const O_APPEND: u32 = 8;
pub const O_SYNC: u32 = 128;
pub const O_SHLOCK: u32 = 16;
pub const O_EXLOCK: u32 = 32;
pub const O_ASYNC: u32 = 64;
pub const O_FSYNC: u32 = 128;
pub const O_NOFOLLOW: u32 = 256;
pub const O_CREAT: u32 = 512;
pub const O_TRUNC: u32 = 1024;
pub const O_EXCL: u32 = 2048;
pub const O_RESOLVE_BENEATH: u32 = 4096;
pub const O_EVTONLY: u32 = 32768;
pub const O_NOCTTY: u32 = 131072;
pub const O_DIRECTORY: u32 = 1048576;
pub const O_SYMLINK: u32 = 2097152;
pub const O_DSYNC: u32 = 4194304;
pub const O_CLOEXEC: u32 = 16777216;
pub const O_NOFOLLOW_ANY: u32 = 536870912;
pub const O_EXEC: u32 = 1073741824;
pub const O_SEARCH: u32 = 1074790400;
pub const AT_FDCWD: i32 = -2;
pub const AT_EACCESS: u32 = 16;
pub const AT_SYMLINK_NOFOLLOW: u32 = 32;
pub const AT_SYMLINK_FOLLOW: u32 = 64;
pub const AT_REMOVEDIR: u32 = 128;
pub const AT_REALDEV: u32 = 512;
pub const AT_FDONLY: u32 = 1024;
pub const AT_SYMLINK_NOFOLLOW_ANY: u32 = 2048;
pub const O_DP_GETRAWENCRYPTED: u32 = 1;
pub const O_DP_GETRAWUNENCRYPTED: u32 = 2;
pub const O_DP_AUTHENTICATE: u32 = 4;
pub const AUTH_OPEN_NOAUTHFD: i32 = -1;
pub const FAPPEND: u32 = 8;
pub const FASYNC: u32 = 64;
pub const FFSYNC: u32 = 128;
pub const FFDSYNC: u32 = 4194304;
pub const FNONBLOCK: u32 = 4;
pub const FNDELAY: u32 = 4;
pub const O_NDELAY: u32 = 4;
pub const CPF_OVERWRITE: u32 = 1;
pub const CPF_IGNORE_MODE: u32 = 2;
pub const CPF_MASK: u32 = 3;
pub const F_DUPFD: u32 = 0;
pub const F_GETFD: u32 = 1;
pub const F_SETFD: u32 = 2;
pub const F_GETFL: u32 = 3;
pub const F_SETFL: u32 = 4;
pub const F_GETOWN: u32 = 5;
pub const F_SETOWN: u32 = 6;
pub const F_GETLK: u32 = 7;
pub const F_SETLK: u32 = 8;
pub const F_SETLKW: u32 = 9;
pub const F_SETLKWTIMEOUT: u32 = 10;
pub const F_FLUSH_DATA: u32 = 40;
pub const F_CHKCLEAN: u32 = 41;
pub const F_PREALLOCATE: u32 = 42;
pub const F_SETSIZE: u32 = 43;
pub const F_RDADVISE: u32 = 44;
pub const F_RDAHEAD: u32 = 45;
pub const F_NOCACHE: u32 = 48;
pub const F_LOG2PHYS: u32 = 49;
pub const F_GETPATH: u32 = 50;
pub const F_FULLFSYNC: u32 = 51;
pub const F_PATHPKG_CHECK: u32 = 52;
pub const F_FREEZE_FS: u32 = 53;
pub const F_THAW_FS: u32 = 54;
pub const F_GLOBAL_NOCACHE: u32 = 55;
pub const F_ADDSIGS: u32 = 59;
pub const F_ADDFILESIGS: u32 = 61;
pub const F_NODIRECT: u32 = 62;
pub const F_GETPROTECTIONCLASS: u32 = 63;
pub const F_SETPROTECTIONCLASS: u32 = 64;
pub const F_LOG2PHYS_EXT: u32 = 65;
pub const F_GETLKPID: u32 = 66;
pub const F_SETBACKINGSTORE: u32 = 70;
pub const F_GETPATH_MTMINFO: u32 = 71;
pub const F_GETCODEDIR: u32 = 72;
pub const F_SETNOSIGPIPE: u32 = 73;
pub const F_GETNOSIGPIPE: u32 = 74;
pub const F_TRANSCODEKEY: u32 = 75;
pub const F_SINGLE_WRITER: u32 = 76;
pub const F_GETPROTECTIONLEVEL: u32 = 77;
pub const F_FINDSIGS: u32 = 78;
pub const F_ADDFILESIGS_FOR_DYLD_SIM: u32 = 83;
pub const F_BARRIERFSYNC: u32 = 85;
pub const F_OFD_SETLK: u32 = 90;
pub const F_OFD_SETLKW: u32 = 91;
pub const F_OFD_GETLK: u32 = 92;
pub const F_OFD_SETLKWTIMEOUT: u32 = 93;
pub const F_ADDFILESIGS_RETURN: u32 = 97;
pub const F_CHECK_LV: u32 = 98;
pub const F_PUNCHHOLE: u32 = 99;
pub const F_TRIM_ACTIVE_FILE: u32 = 100;
pub const F_SPECULATIVE_READ: u32 = 101;
pub const F_GETPATH_NOFIRMLINK: u32 = 102;
pub const F_ADDFILESIGS_INFO: u32 = 103;
pub const F_ADDFILESUPPL: u32 = 104;
pub const F_GETSIGSINFO: u32 = 105;
pub const F_SETLEASE: u32 = 106;
pub const F_GETLEASE: u32 = 107;
pub const F_TRANSFEREXTENTS: u32 = 110;
pub const F_ATTRIBUTION_TAG: u32 = 111;
pub const F_ADDSIGS_MAIN_BINARY: u32 = 113;
pub const FCNTL_FS_SPECIFIC_BASE: u32 = 65536;
pub const F_DUPFD_CLOEXEC: u32 = 67;
pub const FD_CLOEXEC: u32 = 1;
pub const F_RDLCK: u32 = 1;
pub const F_UNLCK: u32 = 2;
pub const F_WRLCK: u32 = 3;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_HOLE: u32 = 3;
pub const SEEK_DATA: u32 = 4;
pub const S_IFMT: u32 = 61440;
pub const S_IFIFO: u32 = 4096;
pub const S_IFCHR: u32 = 8192;
pub const S_IFDIR: u32 = 16384;
pub const S_IFBLK: u32 = 24576;
pub const S_IFREG: u32 = 32768;
pub const S_IFLNK: u32 = 40960;
pub const S_IFSOCK: u32 = 49152;
pub const S_IFWHT: u32 = 57344;
pub const S_IRWXU: u32 = 448;
pub const S_IRUSR: u32 = 256;
pub const S_IWUSR: u32 = 128;
pub const S_IXUSR: u32 = 64;
pub const S_IRWXG: u32 = 56;
pub const S_IRGRP: u32 = 32;
pub const S_IWGRP: u32 = 16;
pub const S_IXGRP: u32 = 8;
pub const S_IRWXO: u32 = 7;
pub const S_IROTH: u32 = 4;
pub const S_IWOTH: u32 = 2;
pub const S_IXOTH: u32 = 1;
pub const S_ISUID: u32 = 2048;
pub const S_ISGID: u32 = 1024;
pub const S_ISVTX: u32 = 512;
pub const S_ISTXT: u32 = 512;
pub const S_IREAD: u32 = 256;
pub const S_IWRITE: u32 = 128;
pub const S_IEXEC: u32 = 64;
pub const F_ALLOCATECONTIG: u32 = 2;
pub const F_ALLOCATEALL: u32 = 4;
pub const F_ALLOCATEPERSIST: u32 = 8;
pub const F_PEOFPOSMODE: u32 = 3;
pub const F_VOLPOSMODE: u32 = 4;
pub const USER_FSIGNATURES_CDHASH_LEN: u32 = 20;
pub const GETSIGSINFO_PLATFORM_BINARY: u32 = 1;
pub const LOCK_SH: u32 = 1;
pub const LOCK_EX: u32 = 2;
pub const LOCK_NB: u32 = 4;
pub const LOCK_UN: u32 = 8;
pub const ATTRIBUTION_NAME_MAX: u32 = 255;
pub const F_CREATE_TAG: u32 = 1;
pub const F_DELETE_TAG: u32 = 2;
pub const F_QUERY_TAG: u32 = 4;
pub const O_POPUP: u32 = 2147483648;
pub const O_ALERT: u32 = 536870912;
pub const BCM2835_VERSION: u32 = 10075;
pub const HIGH: u32 = 1;
pub const LOW: u32 = 0;
pub const BCM2835_CORE_CLK_HZ: u32 = 250000000;
pub const BMC2835_RPI2_DT_FILENAME: &[u8; 29] = b"/proc/device-tree/soc/ranges\0";
pub const BCM2835_PERI_BASE: u32 = 536870912;
pub const BCM2835_PERI_SIZE: u32 = 16777216;
pub const BCM2835_RPI2_PERI_BASE: u32 = 1056964608;
pub const BCM2835_RPI4_PERI_BASE: u32 = 4261412864;
pub const BCM2835_RPI4_PERI_SIZE: u32 = 25165824;
pub const BCM2835_ST_BASE: u32 = 12288;
pub const BCM2835_GPIO_PADS: u32 = 1048576;
pub const BCM2835_CLOCK_BASE: u32 = 1052672;
pub const BCM2835_GPIO_BASE: u32 = 2097152;
pub const BCM2835_SPI0_BASE: u32 = 2113536;
pub const BCM2835_BSC0_BASE: u32 = 2117632;
pub const BCM2835_GPIO_PWM: u32 = 2146304;
pub const BCM2835_AUX_BASE: u32 = 2183168;
pub const BCM2835_SPI1_BASE: u32 = 2183296;
pub const BCM2835_SPI2_BASE: u32 = 2183360;
pub const BCM2835_BSC1_BASE: u32 = 8404992;
pub const BCM2835_SMI_BASE: u32 = 6291456;
pub const __DARWIN_WCHAR_MIN: i32 = -2147483648;
pub const _FORTIFY_SOURCE: u32 = 2;
pub const __DARWIN_NSIG: u32 = 32;
pub const NSIG: u32 = 32;
pub const _I386_SIGNAL_H_: u32 = 1;
pub const SIGHUP: u32 = 1;
pub const SIGINT: u32 = 2;
pub const SIGQUIT: u32 = 3;
pub const SIGILL: u32 = 4;
pub const SIGTRAP: u32 = 5;
pub const SIGABRT: u32 = 6;
pub const SIGIOT: u32 = 6;
pub const SIGEMT: u32 = 7;
pub const SIGFPE: u32 = 8;
pub const SIGKILL: u32 = 9;
pub const SIGBUS: u32 = 10;
pub const SIGSEGV: u32 = 11;
pub const SIGSYS: u32 = 12;
pub const SIGPIPE: u32 = 13;
pub const SIGALRM: u32 = 14;
pub const SIGTERM: u32 = 15;
pub const SIGURG: u32 = 16;
pub const SIGSTOP: u32 = 17;
pub const SIGTSTP: u32 = 18;
pub const SIGCONT: u32 = 19;
pub const SIGCHLD: u32 = 20;
pub const SIGTTIN: u32 = 21;
pub const SIGTTOU: u32 = 22;
pub const SIGIO: u32 = 23;
pub const SIGXCPU: u32 = 24;
pub const SIGXFSZ: u32 = 25;
pub const SIGVTALRM: u32 = 26;
pub const SIGPROF: u32 = 27;
pub const SIGWINCH: u32 = 28;
pub const SIGINFO: u32 = 29;
pub const SIGUSR1: u32 = 30;
pub const SIGUSR2: u32 = 31;
pub const FP_PREC_24B: u32 = 0;
pub const FP_PREC_53B: u32 = 2;
pub const FP_PREC_64B: u32 = 3;
pub const FP_RND_NEAR: u32 = 0;
pub const FP_RND_DOWN: u32 = 1;
pub const FP_RND_UP: u32 = 2;
pub const FP_CHOP: u32 = 3;
pub const FP_STATE_BYTES: u32 = 512;
pub const _X86_INSTRUCTION_STATE_MAX_INSN_BYTES: u32 = 2380;
pub const _X86_INSTRUCTION_STATE_CACHELINE_SIZE: u32 = 64;
pub const __LASTBRANCH_MAX: u32 = 32;
pub const SIGEV_NONE: u32 = 0;
pub const SIGEV_SIGNAL: u32 = 1;
pub const SIGEV_THREAD: u32 = 3;
pub const ILL_NOOP: u32 = 0;
pub const ILL_ILLOPC: u32 = 1;
pub const ILL_ILLTRP: u32 = 2;
pub const ILL_PRVOPC: u32 = 3;
pub const ILL_ILLOPN: u32 = 4;
pub const ILL_ILLADR: u32 = 5;
pub const ILL_PRVREG: u32 = 6;
pub const ILL_COPROC: u32 = 7;
pub const ILL_BADSTK: u32 = 8;
pub const FPE_NOOP: u32 = 0;
pub const FPE_FLTDIV: u32 = 1;
pub const FPE_FLTOVF: u32 = 2;
pub const FPE_FLTUND: u32 = 3;
pub const FPE_FLTRES: u32 = 4;
pub const FPE_FLTINV: u32 = 5;
pub const FPE_FLTSUB: u32 = 6;
pub const FPE_INTDIV: u32 = 7;
pub const FPE_INTOVF: u32 = 8;
pub const SEGV_NOOP: u32 = 0;
pub const SEGV_MAPERR: u32 = 1;
pub const SEGV_ACCERR: u32 = 2;
pub const BUS_NOOP: u32 = 0;
pub const BUS_ADRALN: u32 = 1;
pub const BUS_ADRERR: u32 = 2;
pub const BUS_OBJERR: u32 = 3;
pub const TRAP_BRKPT: u32 = 1;
pub const TRAP_TRACE: u32 = 2;
pub const CLD_NOOP: u32 = 0;
pub const CLD_EXITED: u32 = 1;
pub const CLD_KILLED: u32 = 2;
pub const CLD_DUMPED: u32 = 3;
pub const CLD_TRAPPED: u32 = 4;
pub const CLD_STOPPED: u32 = 5;
pub const CLD_CONTINUED: u32 = 6;
pub const POLL_IN: u32 = 1;
pub const POLL_OUT: u32 = 2;
pub const POLL_MSG: u32 = 3;
pub const POLL_ERR: u32 = 4;
pub const POLL_PRI: u32 = 5;
pub const POLL_HUP: u32 = 6;
pub const SA_ONSTACK: u32 = 1;
pub const SA_RESTART: u32 = 2;
pub const SA_RESETHAND: u32 = 4;
pub const SA_NOCLDSTOP: u32 = 8;
pub const SA_NODEFER: u32 = 16;
pub const SA_NOCLDWAIT: u32 = 32;
pub const SA_SIGINFO: u32 = 64;
pub const SA_USERTRAMP: u32 = 256;
pub const SA_64REGSET: u32 = 512;
pub const SA_USERSPACE_MASK: u32 = 127;
pub const SIG_BLOCK: u32 = 1;
pub const SIG_UNBLOCK: u32 = 2;
pub const SIG_SETMASK: u32 = 3;
pub const SI_USER: u32 = 65537;
pub const SI_QUEUE: u32 = 65538;
pub const SI_TIMER: u32 = 65539;
pub const SI_ASYNCIO: u32 = 65540;
pub const SI_MESGQ: u32 = 65541;
pub const SS_ONSTACK: u32 = 1;
pub const SS_DISABLE: u32 = 4;
pub const MINSIGSTKSZ: u32 = 32768;
pub const SIGSTKSZ: u32 = 131072;
pub const SV_ONSTACK: u32 = 1;
pub const SV_INTERRUPT: u32 = 2;
pub const SV_RESETHAND: u32 = 4;
pub const SV_NODEFER: u32 = 16;
pub const SV_NOCLDSTOP: u32 = 8;
pub const SV_SIGINFO: u32 = 64;
pub const PRIO_PROCESS: u32 = 0;
pub const PRIO_PGRP: u32 = 1;
pub const PRIO_USER: u32 = 2;
pub const PRIO_DARWIN_THREAD: u32 = 3;
pub const PRIO_DARWIN_PROCESS: u32 = 4;
pub const PRIO_MIN: i32 = -20;
pub const PRIO_MAX: u32 = 20;
pub const PRIO_DARWIN_BG: u32 = 4096;
pub const PRIO_DARWIN_NONUI: u32 = 4097;
pub const RUSAGE_SELF: u32 = 0;
pub const RUSAGE_CHILDREN: i32 = -1;
pub const RUSAGE_INFO_V0: u32 = 0;
pub const RUSAGE_INFO_V1: u32 = 1;
pub const RUSAGE_INFO_V2: u32 = 2;
pub const RUSAGE_INFO_V3: u32 = 3;
pub const RUSAGE_INFO_V4: u32 = 4;
pub const RUSAGE_INFO_V5: u32 = 5;
pub const RUSAGE_INFO_V6: u32 = 6;
pub const RUSAGE_INFO_CURRENT: u32 = 6;
pub const RU_PROC_RUNS_RESLIDE: u32 = 1;
pub const RLIMIT_CPU: u32 = 0;
pub const RLIMIT_FSIZE: u32 = 1;
pub const RLIMIT_DATA: u32 = 2;
pub const RLIMIT_STACK: u32 = 3;
pub const RLIMIT_CORE: u32 = 4;
pub const RLIMIT_AS: u32 = 5;
pub const RLIMIT_RSS: u32 = 5;
pub const RLIMIT_MEMLOCK: u32 = 6;
pub const RLIMIT_NPROC: u32 = 7;
pub const RLIMIT_NOFILE: u32 = 8;
pub const RLIM_NLIMITS: u32 = 9;
pub const _RLIMIT_POSIX_FLAG: u32 = 4096;
pub const RLIMIT_WAKEUPS_MONITOR: u32 = 1;
pub const RLIMIT_CPU_USAGE_MONITOR: u32 = 2;
pub const RLIMIT_THREAD_CPULIMITS: u32 = 3;
pub const RLIMIT_FOOTPRINT_INTERVAL: u32 = 4;
pub const WAKEMON_ENABLE: u32 = 1;
pub const WAKEMON_DISABLE: u32 = 2;
pub const WAKEMON_GET_PARAMS: u32 = 4;
pub const WAKEMON_SET_DEFAULTS: u32 = 8;
pub const WAKEMON_MAKE_FATAL: u32 = 16;
pub const CPUMON_MAKE_FATAL: u32 = 4096;
pub const FOOTPRINT_INTERVAL_RESET: u32 = 1;
pub const IOPOL_TYPE_DISK: u32 = 0;
pub const IOPOL_TYPE_VFS_ATIME_UPDATES: u32 = 2;
pub const IOPOL_TYPE_VFS_MATERIALIZE_DATALESS_FILES: u32 = 3;
pub const IOPOL_TYPE_VFS_STATFS_NO_DATA_VOLUME: u32 = 4;
pub const IOPOL_TYPE_VFS_TRIGGER_RESOLVE: u32 = 5;
pub const IOPOL_TYPE_VFS_IGNORE_CONTENT_PROTECTION: u32 = 6;
pub const IOPOL_TYPE_VFS_IGNORE_PERMISSIONS: u32 = 7;
pub const IOPOL_TYPE_VFS_SKIP_MTIME_UPDATE: u32 = 8;
pub const IOPOL_TYPE_VFS_ALLOW_LOW_SPACE_WRITES: u32 = 9;
pub const IOPOL_TYPE_VFS_DISALLOW_RW_FOR_O_EVTONLY: u32 = 10;
pub const IOPOL_SCOPE_PROCESS: u32 = 0;
pub const IOPOL_SCOPE_THREAD: u32 = 1;
pub const IOPOL_SCOPE_DARWIN_BG: u32 = 2;
pub const IOPOL_DEFAULT: u32 = 0;
pub const IOPOL_IMPORTANT: u32 = 1;
pub const IOPOL_PASSIVE: u32 = 2;
pub const IOPOL_THROTTLE: u32 = 3;
pub const IOPOL_UTILITY: u32 = 4;
pub const IOPOL_STANDARD: u32 = 5;
pub const IOPOL_APPLICATION: u32 = 5;
pub const IOPOL_NORMAL: u32 = 1;
pub const IOPOL_ATIME_UPDATES_DEFAULT: u32 = 0;
pub const IOPOL_ATIME_UPDATES_OFF: u32 = 1;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_DEFAULT: u32 = 0;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_OFF: u32 = 1;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_ON: u32 = 2;
pub const IOPOL_VFS_STATFS_NO_DATA_VOLUME_DEFAULT: u32 = 0;
pub const IOPOL_VFS_STATFS_FORCE_NO_DATA_VOLUME: u32 = 1;
pub const IOPOL_VFS_TRIGGER_RESOLVE_DEFAULT: u32 = 0;
pub const IOPOL_VFS_TRIGGER_RESOLVE_OFF: u32 = 1;
pub const IOPOL_VFS_CONTENT_PROTECTION_DEFAULT: u32 = 0;
pub const IOPOL_VFS_CONTENT_PROTECTION_IGNORE: u32 = 1;
pub const IOPOL_VFS_IGNORE_PERMISSIONS_OFF: u32 = 0;
pub const IOPOL_VFS_IGNORE_PERMISSIONS_ON: u32 = 1;
pub const IOPOL_VFS_SKIP_MTIME_UPDATE_OFF: u32 = 0;
pub const IOPOL_VFS_SKIP_MTIME_UPDATE_ON: u32 = 1;
pub const IOPOL_VFS_SKIP_MTIME_UPDATE_IGNORE: u32 = 2;
pub const IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_OFF: u32 = 0;
pub const IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_ON: u32 = 1;
pub const IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_DEFAULT: u32 = 0;
pub const IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_ON: u32 = 1;
pub const IOPOL_VFS_NOCACHE_WRITE_FS_BLKSIZE_DEFAULT: u32 = 0;
pub const IOPOL_VFS_NOCACHE_WRITE_FS_BLKSIZE_ON: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WCOREFLAG: u32 = 128;
pub const _WSTOPPED: u32 = 127;
pub const WEXITED: u32 = 4;
pub const WSTOPPED: u32 = 8;
pub const WCONTINUED: u32 = 16;
pub const WNOWAIT: u32 = 32;
pub const WAIT_ANY: i32 = -1;
pub const WAIT_MYPGRP: u32 = 0;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const RAND_MAX: u32 = 2147483647;
pub const BCM2835_PAGE_SIZE: u32 = 4096;
pub const BCM2835_BLOCK_SIZE: u32 = 4096;
pub const BCM2835_GPFSEL0: u32 = 0;
pub const BCM2835_GPFSEL1: u32 = 4;
pub const BCM2835_GPFSEL2: u32 = 8;
pub const BCM2835_GPFSEL3: u32 = 12;
pub const BCM2835_GPFSEL4: u32 = 16;
pub const BCM2835_GPFSEL5: u32 = 20;
pub const BCM2835_GPSET0: u32 = 28;
pub const BCM2835_GPSET1: u32 = 32;
pub const BCM2835_GPCLR0: u32 = 40;
pub const BCM2835_GPCLR1: u32 = 44;
pub const BCM2835_GPLEV0: u32 = 52;
pub const BCM2835_GPLEV1: u32 = 56;
pub const BCM2835_GPEDS0: u32 = 64;
pub const BCM2835_GPEDS1: u32 = 68;
pub const BCM2835_GPREN0: u32 = 76;
pub const BCM2835_GPREN1: u32 = 80;
pub const BCM2835_GPFEN0: u32 = 88;
pub const BCM2835_GPFEN1: u32 = 92;
pub const BCM2835_GPHEN0: u32 = 100;
pub const BCM2835_GPHEN1: u32 = 104;
pub const BCM2835_GPLEN0: u32 = 112;
pub const BCM2835_GPLEN1: u32 = 116;
pub const BCM2835_GPAREN0: u32 = 124;
pub const BCM2835_GPAREN1: u32 = 128;
pub const BCM2835_GPAFEN0: u32 = 136;
pub const BCM2835_GPAFEN1: u32 = 140;
pub const BCM2835_GPPUD: u32 = 148;
pub const BCM2835_GPPUDCLK0: u32 = 152;
pub const BCM2835_GPPUDCLK1: u32 = 156;
pub const BCM2835_GPPUPPDN0: u32 = 228;
pub const BCM2835_GPPUPPDN1: u32 = 232;
pub const BCM2835_GPPUPPDN2: u32 = 236;
pub const BCM2835_GPPUPPDN3: u32 = 240;
pub const BCM2835_GPIO_PUD_ERROR: u32 = 8;
pub const BCM2835_PADS_GPIO_0_27: u32 = 44;
pub const BCM2835_PADS_GPIO_28_45: u32 = 48;
pub const BCM2835_PADS_GPIO_46_53: u32 = 52;
pub const BCM2835_PAD_PASSWRD: u32 = 1509949440;
pub const BCM2835_PAD_SLEW_RATE_UNLIMITED: u32 = 16;
pub const BCM2835_PAD_HYSTERESIS_ENABLED: u32 = 8;
pub const BCM2835_PAD_DRIVE_2mA: u32 = 0;
pub const BCM2835_PAD_DRIVE_4mA: u32 = 1;
pub const BCM2835_PAD_DRIVE_6mA: u32 = 2;
pub const BCM2835_PAD_DRIVE_8mA: u32 = 3;
pub const BCM2835_PAD_DRIVE_10mA: u32 = 4;
pub const BCM2835_PAD_DRIVE_12mA: u32 = 5;
pub const BCM2835_PAD_DRIVE_14mA: u32 = 6;
pub const BCM2835_PAD_DRIVE_16mA: u32 = 7;
pub const BCM2835_AUX_IRQ: u32 = 0;
pub const BCM2835_AUX_ENABLE: u32 = 4;
pub const BCM2835_AUX_ENABLE_UART1: u32 = 1;
pub const BCM2835_AUX_ENABLE_SPI0: u32 = 2;
pub const BCM2835_AUX_ENABLE_SPI1: u32 = 4;
pub const BCM2835_AUX_SPI_CNTL0: u32 = 0;
pub const BCM2835_AUX_SPI_CNTL1: u32 = 4;
pub const BCM2835_AUX_SPI_STAT: u32 = 8;
pub const BCM2835_AUX_SPI_PEEK: u32 = 12;
pub const BCM2835_AUX_SPI_IO: u32 = 32;
pub const BCM2835_AUX_SPI_TXHOLD: u32 = 48;
pub const BCM2835_AUX_SPI_CLOCK_MIN: u32 = 30500;
pub const BCM2835_AUX_SPI_CLOCK_MAX: u32 = 125000000;
pub const BCM2835_AUX_SPI_CNTL0_SPEED: u32 = 4293918720;
pub const BCM2835_AUX_SPI_CNTL0_SPEED_MAX: u32 = 4095;
pub const BCM2835_AUX_SPI_CNTL0_SPEED_SHIFT: u32 = 20;
pub const BCM2835_AUX_SPI_CNTL0_CS0_N: u32 = 786432;
pub const BCM2835_AUX_SPI_CNTL0_CS1_N: u32 = 655360;
pub const BCM2835_AUX_SPI_CNTL0_CS2_N: u32 = 393216;
pub const BCM2835_AUX_SPI_CNTL0_POSTINPUT: u32 = 65536;
pub const BCM2835_AUX_SPI_CNTL0_VAR_CS: u32 = 32768;
pub const BCM2835_AUX_SPI_CNTL0_VAR_WIDTH: u32 = 16384;
pub const BCM2835_AUX_SPI_CNTL0_DOUTHOLD: u32 = 12288;
pub const BCM2835_AUX_SPI_CNTL0_ENABLE: u32 = 2048;
pub const BCM2835_AUX_SPI_CNTL0_CPHA_IN: u32 = 1024;
pub const BCM2835_AUX_SPI_CNTL0_CLEARFIFO: u32 = 512;
pub const BCM2835_AUX_SPI_CNTL0_CPHA_OUT: u32 = 256;
pub const BCM2835_AUX_SPI_CNTL0_CPOL: u32 = 128;
pub const BCM2835_AUX_SPI_CNTL0_MSBF_OUT: u32 = 64;
pub const BCM2835_AUX_SPI_CNTL0_SHIFTLEN: u32 = 63;
pub const BCM2835_AUX_SPI_CNTL1_CSHIGH: u32 = 1792;
pub const BCM2835_AUX_SPI_CNTL1_IDLE: u32 = 128;
pub const BCM2835_AUX_SPI_CNTL1_TXEMPTY: u32 = 64;
pub const BCM2835_AUX_SPI_CNTL1_MSBF_IN: u32 = 2;
pub const BCM2835_AUX_SPI_CNTL1_KEEP_IN: u32 = 1;
pub const BCM2835_AUX_SPI_STAT_TX_LVL: u32 = 4026531840;
pub const BCM2835_AUX_SPI_STAT_RX_LVL: u32 = 15728640;
pub const BCM2835_AUX_SPI_STAT_TX_FULL: u32 = 1024;
pub const BCM2835_AUX_SPI_STAT_TX_EMPTY: u32 = 512;
pub const BCM2835_AUX_SPI_STAT_RX_FULL: u32 = 256;
pub const BCM2835_AUX_SPI_STAT_RX_EMPTY: u32 = 128;
pub const BCM2835_AUX_SPI_STAT_BUSY: u32 = 64;
pub const BCM2835_AUX_SPI_STAT_BITCOUNT: u32 = 63;
pub const BCM2835_SPI0_CS: u32 = 0;
pub const BCM2835_SPI0_FIFO: u32 = 4;
pub const BCM2835_SPI0_CLK: u32 = 8;
pub const BCM2835_SPI0_DLEN: u32 = 12;
pub const BCM2835_SPI0_LTOH: u32 = 16;
pub const BCM2835_SPI0_DC: u32 = 20;
pub const BCM2835_SPI0_CS_LEN_LONG: u32 = 33554432;
pub const BCM2835_SPI0_CS_DMA_LEN: u32 = 16777216;
pub const BCM2835_SPI0_CS_CSPOL2: u32 = 8388608;
pub const BCM2835_SPI0_CS_CSPOL1: u32 = 4194304;
pub const BCM2835_SPI0_CS_CSPOL0: u32 = 2097152;
pub const BCM2835_SPI0_CS_RXF: u32 = 1048576;
pub const BCM2835_SPI0_CS_RXR: u32 = 524288;
pub const BCM2835_SPI0_CS_TXD: u32 = 262144;
pub const BCM2835_SPI0_CS_RXD: u32 = 131072;
pub const BCM2835_SPI0_CS_DONE: u32 = 65536;
pub const BCM2835_SPI0_CS_TE_EN: u32 = 32768;
pub const BCM2835_SPI0_CS_LMONO: u32 = 16384;
pub const BCM2835_SPI0_CS_LEN: u32 = 8192;
pub const BCM2835_SPI0_CS_REN: u32 = 4096;
pub const BCM2835_SPI0_CS_ADCS: u32 = 2048;
pub const BCM2835_SPI0_CS_INTR: u32 = 1024;
pub const BCM2835_SPI0_CS_INTD: u32 = 512;
pub const BCM2835_SPI0_CS_DMAEN: u32 = 256;
pub const BCM2835_SPI0_CS_TA: u32 = 128;
pub const BCM2835_SPI0_CS_CSPOL: u32 = 64;
pub const BCM2835_SPI0_CS_CLEAR: u32 = 48;
pub const BCM2835_SPI0_CS_CLEAR_RX: u32 = 32;
pub const BCM2835_SPI0_CS_CLEAR_TX: u32 = 16;
pub const BCM2835_SPI0_CS_CPOL: u32 = 8;
pub const BCM2835_SPI0_CS_CPHA: u32 = 4;
pub const BCM2835_SPI0_CS_CS: u32 = 3;
pub const BCM2835_BSC_C: u32 = 0;
pub const BCM2835_BSC_S: u32 = 4;
pub const BCM2835_BSC_DLEN: u32 = 8;
pub const BCM2835_BSC_A: u32 = 12;
pub const BCM2835_BSC_FIFO: u32 = 16;
pub const BCM2835_BSC_DIV: u32 = 20;
pub const BCM2835_BSC_DEL: u32 = 24;
pub const BCM2835_BSC_CLKT: u32 = 28;
pub const BCM2835_BSC_C_I2CEN: u32 = 32768;
pub const BCM2835_BSC_C_INTR: u32 = 1024;
pub const BCM2835_BSC_C_INTT: u32 = 512;
pub const BCM2835_BSC_C_INTD: u32 = 256;
pub const BCM2835_BSC_C_ST: u32 = 128;
pub const BCM2835_BSC_C_CLEAR_1: u32 = 32;
pub const BCM2835_BSC_C_CLEAR_2: u32 = 16;
pub const BCM2835_BSC_C_READ: u32 = 1;
pub const BCM2835_BSC_S_CLKT: u32 = 512;
pub const BCM2835_BSC_S_ERR: u32 = 256;
pub const BCM2835_BSC_S_RXF: u32 = 128;
pub const BCM2835_BSC_S_TXE: u32 = 64;
pub const BCM2835_BSC_S_RXD: u32 = 32;
pub const BCM2835_BSC_S_TXD: u32 = 16;
pub const BCM2835_BSC_S_RXR: u32 = 8;
pub const BCM2835_BSC_S_TXW: u32 = 4;
pub const BCM2835_BSC_S_DONE: u32 = 2;
pub const BCM2835_BSC_S_TA: u32 = 1;
pub const BCM2835_BSC_FIFO_SIZE: u32 = 16;
pub const BCM2835_AUX_SPI_FIFO_SIZE: u32 = 4;
pub const BCM2835_SMI_CS: u32 = 0;
pub const BCM2835_SMI_LENGTH: u32 = 1;
pub const BCM2835_SMI_ADRS: u32 = 2;
pub const BCM2835_SMI_DATA: u32 = 3;
pub const BCM2835_SMI_READ0: u32 = 4;
pub const BCM2835_SMI_WRITE0: u32 = 5;
pub const BCM2835_SMI_READ1: u32 = 6;
pub const BCM2835_SMI_WRITE1: u32 = 7;
pub const BCM2835_SMI_READ2: u32 = 8;
pub const BCM2835_SMI_WRITE2: u32 = 9;
pub const BCM2835_SMI_READ3: u32 = 10;
pub const BCM2835_SMI_WRITE3: u32 = 11;
pub const BCM2835_SMI_DMAC: u32 = 12;
pub const BCM2835_SMI_DIRCS: u32 = 13;
pub const BCM2835_SMI_DIRADDR: u32 = 14;
pub const BCM2835_SMI_DIRDATA: u32 = 15;
pub const BCM2835_SMI_RW_WIDTH_MSK: u32 = 3221225472;
pub const BCM2835_SMI_RW_WID8: u32 = 0;
pub const BCM2835_SMI_RW_WID16: u32 = 1073741824;
pub const BCM2835_SMI_RW_WID18: u32 = 2147483648;
pub const BCM2835_SMI_RW_WID9: u32 = 3221225472;
pub const BCM2835_SMI_RW_SETUP_MSK: u32 = 1056964608;
pub const BCM2835_SMI_RW_SETUP_LS: u32 = 24;
pub const BCM2835_SMI_RW_MODE68: u32 = 8388608;
pub const BCM2835_SMI_RW_MODE80: u32 = 0;
pub const BCM2835_SMI_READ_FSETUP: u32 = 4194304;
pub const BCM2835_SMI_WRITE_SWAP: u32 = 4194304;
pub const BCM2835_SMI_RW_HOLD_MSK: u32 = 4128768;
pub const BCM2835_SMI_RW_HOLD_LS: u32 = 16;
pub const BCM2835_SMI_RW_PACEALL: u32 = 32768;
pub const BCM2835_SMI_RW_PACE_MSK: u32 = 32512;
pub const BCM2835_SMI_RW_PACE_LS: u32 = 8;
pub const BCM2835_SMI_RW_DREQ: u32 = 128;
pub const BCM2835_SMI_RW_STROBE_MSK: u32 = 127;
pub const BCM2835_SMI_RW_STROBE_LS: u32 = 0;
pub const BCM2835_SMI_DIRCS_ENABLE: u32 = 1;
pub const BCM2835_SMI_DIRCS_START: u32 = 2;
pub const BCM2835_SMI_DIRCS_DONE: u32 = 4;
pub const BCM2835_SMI_DIRCS_WRITE: u32 = 8;
pub const BCM2835_SMI_DIRADRS_DEV_MSK: u32 = 768;
pub const BCM2835_SMI_DIRADRS_DEV_LS: u32 = 8;
pub const BCM2835_SMI_DIRADRS_DEV0: u32 = 0;
pub const BCM2835_SMI_DIRADRS_DEV1: u32 = 256;
pub const BCM2835_SMI_DIRADRS_DEV2: u32 = 512;
pub const BCM2835_SMI_DIRADRS_DEV3: u32 = 768;
pub const BCM2835_SMI_DIRADRS_MSK: u32 = 63;
pub const BCM2835_SMI_DIRADRS_LS: u32 = 0;
pub const SMICLK_CNTL: u32 = 44;
pub const SMICLK_DIV: u32 = 45;
pub const BCM2835_ST_CS: u32 = 0;
pub const BCM2835_ST_CLO: u32 = 4;
pub const BCM2835_ST_CHI: u32 = 8;
pub const BCM2835_PWM_CONTROL: u32 = 0;
pub const BCM2835_PWM_STATUS: u32 = 1;
pub const BCM2835_PWM_DMAC: u32 = 2;
pub const BCM2835_PWM0_RANGE: u32 = 4;
pub const BCM2835_PWM0_DATA: u32 = 5;
pub const BCM2835_PWM_FIF1: u32 = 6;
pub const BCM2835_PWM1_RANGE: u32 = 8;
pub const BCM2835_PWM1_DATA: u32 = 9;
pub const BCM2835_PWMCLK_CNTL: u32 = 40;
pub const BCM2835_PWMCLK_DIV: u32 = 41;
pub const BCM2835_PWM_PASSWRD: u32 = 1509949440;
pub const BCM2835_PWM1_MS_MODE: u32 = 32768;
pub const BCM2835_PWM1_USEFIFO: u32 = 8192;
pub const BCM2835_PWM1_REVPOLAR: u32 = 4096;
pub const BCM2835_PWM1_OFFSTATE: u32 = 2048;
pub const BCM2835_PWM1_REPEATFF: u32 = 1024;
pub const BCM2835_PWM1_SERIAL: u32 = 512;
pub const BCM2835_PWM1_ENABLE: u32 = 256;
pub const BCM2835_PWM0_MS_MODE: u32 = 128;
pub const BCM2835_PWM_CLEAR_FIFO: u32 = 64;
pub const BCM2835_PWM0_USEFIFO: u32 = 32;
pub const BCM2835_PWM0_REVPOLAR: u32 = 16;
pub const BCM2835_PWM0_OFFSTATE: u32 = 8;
pub const BCM2835_PWM0_REPEATFF: u32 = 4;
pub const BCM2835_PWM0_SERIAL: u32 = 2;
pub const BCM2835_PWM0_ENABLE: u32 = 1;
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t"][::std::mem::size_of::<__mbstate_t>() - 128usize];
    ["Alignment of __mbstate_t"][::std::mem::align_of::<__mbstate_t>() - 8usize];
    ["Offset of field: __mbstate_t::__mbstate8"]
        [::std::mem::offset_of!(__mbstate_t, __mbstate8) - 0usize];
    ["Offset of field: __mbstate_t::_mbstateL"]
        [::std::mem::offset_of!(__mbstate_t, _mbstateL) - 0usize];
};
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_pthread_handler_rec"]
        [::std::mem::size_of::<__darwin_pthread_handler_rec>() - 24usize];
    ["Alignment of __darwin_pthread_handler_rec"]
        [::std::mem::align_of::<__darwin_pthread_handler_rec>() - 8usize];
    ["Offset of field: __darwin_pthread_handler_rec::__routine"]
        [::std::mem::offset_of!(__darwin_pthread_handler_rec, __routine) - 0usize];
    ["Offset of field: __darwin_pthread_handler_rec::__arg"]
        [::std::mem::offset_of!(__darwin_pthread_handler_rec, __arg) - 8usize];
    ["Offset of field: __darwin_pthread_handler_rec::__next"]
        [::std::mem::offset_of!(__darwin_pthread_handler_rec, __next) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_attr_t"][::std::mem::size_of::<_opaque_pthread_attr_t>() - 64usize];
    ["Alignment of _opaque_pthread_attr_t"]
        [::std::mem::align_of::<_opaque_pthread_attr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_attr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_attr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_attr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_attr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_cond_t"][::std::mem::size_of::<_opaque_pthread_cond_t>() - 48usize];
    ["Alignment of _opaque_pthread_cond_t"]
        [::std::mem::align_of::<_opaque_pthread_cond_t>() - 8usize];
    ["Offset of field: _opaque_pthread_cond_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_cond_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_cond_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_cond_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_condattr_t"]
        [::std::mem::size_of::<_opaque_pthread_condattr_t>() - 16usize];
    ["Alignment of _opaque_pthread_condattr_t"]
        [::std::mem::align_of::<_opaque_pthread_condattr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_condattr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_condattr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_condattr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_condattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_mutex_t"][::std::mem::size_of::<_opaque_pthread_mutex_t>() - 64usize];
    ["Alignment of _opaque_pthread_mutex_t"]
        [::std::mem::align_of::<_opaque_pthread_mutex_t>() - 8usize];
    ["Offset of field: _opaque_pthread_mutex_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_mutex_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_mutex_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_mutex_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_mutexattr_t"]
        [::std::mem::size_of::<_opaque_pthread_mutexattr_t>() - 16usize];
    ["Alignment of _opaque_pthread_mutexattr_t"]
        [::std::mem::align_of::<_opaque_pthread_mutexattr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_mutexattr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_mutexattr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_mutexattr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_mutexattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_once_t"][::std::mem::size_of::<_opaque_pthread_once_t>() - 16usize];
    ["Alignment of _opaque_pthread_once_t"]
        [::std::mem::align_of::<_opaque_pthread_once_t>() - 8usize];
    ["Offset of field: _opaque_pthread_once_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_once_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_once_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_once_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_rwlock_t"]
        [::std::mem::size_of::<_opaque_pthread_rwlock_t>() - 200usize];
    ["Alignment of _opaque_pthread_rwlock_t"]
        [::std::mem::align_of::<_opaque_pthread_rwlock_t>() - 8usize];
    ["Offset of field: _opaque_pthread_rwlock_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_rwlock_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_rwlock_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_rwlock_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_rwlockattr_t"]
        [::std::mem::size_of::<_opaque_pthread_rwlockattr_t>() - 24usize];
    ["Alignment of _opaque_pthread_rwlockattr_t"]
        [::std::mem::align_of::<_opaque_pthread_rwlockattr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_rwlockattr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_rwlockattr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_rwlockattr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_rwlockattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_t"][::std::mem::size_of::<_opaque_pthread_t>() - 8192usize];
    ["Alignment of _opaque_pthread_t"][::std::mem::align_of::<_opaque_pthread_t>() - 8usize];
    ["Offset of field: _opaque_pthread_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_t::__cleanup_stack"]
        [::std::mem::offset_of!(_opaque_pthread_t, __cleanup_stack) - 8usize];
    ["Offset of field: _opaque_pthread_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_t, __opaque) - 16usize];
};
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type u_char = ::std::os::raw::c_uchar;
pub type u_short = ::std::os::raw::c_ushort;
pub type u_int = ::std::os::raw::c_uint;
pub type u_long = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_quad_t = u_int64_t;
pub type quad_t = i64;
pub type qaddr_t = *mut quad_t;
pub type caddr_t = *mut ::std::os::raw::c_char;
pub type daddr_t = i32;
pub type dev_t = __darwin_dev_t;
pub type fixpt_t = u_int32_t;
pub type blkcnt_t = __darwin_blkcnt_t;
pub type blksize_t = __darwin_blksize_t;
pub type gid_t = __darwin_gid_t;
pub type in_addr_t = __uint32_t;
pub type in_port_t = __uint16_t;
pub type ino_t = __darwin_ino_t;
pub type ino64_t = __darwin_ino64_t;
pub type key_t = __int32_t;
pub type mode_t = __darwin_mode_t;
pub type nlink_t = __uint16_t;
pub type id_t = __darwin_id_t;
pub type pid_t = __darwin_pid_t;
pub type off_t = __darwin_off_t;
pub type segsz_t = i32;
pub type swblk_t = i32;
pub type uid_t = __darwin_uid_t;
pub type clock_t = __darwin_clock_t;
pub type time_t = __darwin_time_t;
pub type useconds_t = __darwin_useconds_t;
pub type suseconds_t = __darwin_suseconds_t;
pub type rsize_t = __darwin_size_t;
pub type errno_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub fds_bits: [__int32_t; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fd_set"][::std::mem::size_of::<fd_set>() - 128usize];
    ["Alignment of fd_set"][::std::mem::align_of::<fd_set>() - 4usize];
    ["Offset of field: fd_set::fds_bits"][::std::mem::offset_of!(fd_set, fds_bits) - 0usize];
};
unsafe extern "C" {
    pub fn __darwin_check_fd_set_overflow(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type fd_mask = __int32_t;
pub type pthread_attr_t = __darwin_pthread_attr_t;
pub type pthread_cond_t = __darwin_pthread_cond_t;
pub type pthread_condattr_t = __darwin_pthread_condattr_t;
pub type pthread_mutex_t = __darwin_pthread_mutex_t;
pub type pthread_mutexattr_t = __darwin_pthread_mutexattr_t;
pub type pthread_once_t = __darwin_pthread_once_t;
pub type pthread_rwlock_t = __darwin_pthread_rwlock_t;
pub type pthread_rwlockattr_t = __darwin_pthread_rwlockattr_t;
pub type pthread_t = __darwin_pthread_t;
pub type pthread_key_t = __darwin_pthread_key_t;
pub type fsblkcnt_t = __darwin_fsblkcnt_t;
pub type fsfilcnt_t = __darwin_fsfilcnt_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flock {
    pub l_start: off_t,
    pub l_len: off_t,
    pub l_pid: pid_t,
    pub l_type: ::std::os::raw::c_short,
    pub l_whence: ::std::os::raw::c_short,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of flock"][::std::mem::size_of::<flock>() - 24usize];
    ["Alignment of flock"][::std::mem::align_of::<flock>() - 8usize];
    ["Offset of field: flock::l_start"][::std::mem::offset_of!(flock, l_start) - 0usize];
    ["Offset of field: flock::l_len"][::std::mem::offset_of!(flock, l_len) - 8usize];
    ["Offset of field: flock::l_pid"][::std::mem::offset_of!(flock, l_pid) - 16usize];
    ["Offset of field: flock::l_type"][::std::mem::offset_of!(flock, l_type) - 20usize];
    ["Offset of field: flock::l_whence"][::std::mem::offset_of!(flock, l_whence) - 22usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __darwin_time_t,
    pub tv_nsec: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timespec"][::std::mem::size_of::<timespec>() - 16usize];
    ["Alignment of timespec"][::std::mem::align_of::<timespec>() - 8usize];
    ["Offset of field: timespec::tv_sec"][::std::mem::offset_of!(timespec, tv_sec) - 0usize];
    ["Offset of field: timespec::tv_nsec"][::std::mem::offset_of!(timespec, tv_nsec) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flocktimeout {
    pub fl: flock,
    pub timeout: timespec,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of flocktimeout"][::std::mem::size_of::<flocktimeout>() - 40usize];
    ["Alignment of flocktimeout"][::std::mem::align_of::<flocktimeout>() - 8usize];
    ["Offset of field: flocktimeout::fl"][::std::mem::offset_of!(flocktimeout, fl) - 0usize];
    ["Offset of field: flocktimeout::timeout"]
        [::std::mem::offset_of!(flocktimeout, timeout) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct radvisory {
    pub ra_offset: off_t,
    pub ra_count: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of radvisory"][::std::mem::size_of::<radvisory>() - 16usize];
    ["Alignment of radvisory"][::std::mem::align_of::<radvisory>() - 8usize];
    ["Offset of field: radvisory::ra_offset"]
        [::std::mem::offset_of!(radvisory, ra_offset) - 0usize];
    ["Offset of field: radvisory::ra_count"][::std::mem::offset_of!(radvisory, ra_count) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fsignatures {
    pub fs_file_start: off_t,
    pub fs_blob_start: *mut ::std::os::raw::c_void,
    pub fs_blob_size: usize,
    pub fs_fsignatures_size: usize,
    pub fs_cdhash: [::std::os::raw::c_char; 20usize],
    pub fs_hash_type: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fsignatures"][::std::mem::size_of::<fsignatures>() - 56usize];
    ["Alignment of fsignatures"][::std::mem::align_of::<fsignatures>() - 8usize];
    ["Offset of field: fsignatures::fs_file_start"]
        [::std::mem::offset_of!(fsignatures, fs_file_start) - 0usize];
    ["Offset of field: fsignatures::fs_blob_start"]
        [::std::mem::offset_of!(fsignatures, fs_blob_start) - 8usize];
    ["Offset of field: fsignatures::fs_blob_size"]
        [::std::mem::offset_of!(fsignatures, fs_blob_size) - 16usize];
    ["Offset of field: fsignatures::fs_fsignatures_size"]
        [::std::mem::offset_of!(fsignatures, fs_fsignatures_size) - 24usize];
    ["Offset of field: fsignatures::fs_cdhash"]
        [::std::mem::offset_of!(fsignatures, fs_cdhash) - 32usize];
    ["Offset of field: fsignatures::fs_hash_type"]
        [::std::mem::offset_of!(fsignatures, fs_hash_type) - 52usize];
};
pub type fsignatures_t = fsignatures;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fsupplement {
    pub fs_file_start: off_t,
    pub fs_blob_start: off_t,
    pub fs_blob_size: usize,
    pub fs_orig_fd: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fsupplement"][::std::mem::size_of::<fsupplement>() - 32usize];
    ["Alignment of fsupplement"][::std::mem::align_of::<fsupplement>() - 8usize];
    ["Offset of field: fsupplement::fs_file_start"]
        [::std::mem::offset_of!(fsupplement, fs_file_start) - 0usize];
    ["Offset of field: fsupplement::fs_blob_start"]
        [::std::mem::offset_of!(fsupplement, fs_blob_start) - 8usize];
    ["Offset of field: fsupplement::fs_blob_size"]
        [::std::mem::offset_of!(fsupplement, fs_blob_size) - 16usize];
    ["Offset of field: fsupplement::fs_orig_fd"]
        [::std::mem::offset_of!(fsupplement, fs_orig_fd) - 24usize];
};
pub type fsupplement_t = fsupplement;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fchecklv {
    pub lv_file_start: off_t,
    pub lv_error_message_size: usize,
    pub lv_error_message: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fchecklv"][::std::mem::size_of::<fchecklv>() - 24usize];
    ["Alignment of fchecklv"][::std::mem::align_of::<fchecklv>() - 8usize];
    ["Offset of field: fchecklv::lv_file_start"]
        [::std::mem::offset_of!(fchecklv, lv_file_start) - 0usize];
    ["Offset of field: fchecklv::lv_error_message_size"]
        [::std::mem::offset_of!(fchecklv, lv_error_message_size) - 8usize];
    ["Offset of field: fchecklv::lv_error_message"]
        [::std::mem::offset_of!(fchecklv, lv_error_message) - 16usize];
};
pub type fchecklv_t = fchecklv;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fgetsigsinfo {
    pub fg_file_start: off_t,
    pub fg_info_request: ::std::os::raw::c_int,
    pub fg_sig_is_platform: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fgetsigsinfo"][::std::mem::size_of::<fgetsigsinfo>() - 16usize];
    ["Alignment of fgetsigsinfo"][::std::mem::align_of::<fgetsigsinfo>() - 8usize];
    ["Offset of field: fgetsigsinfo::fg_file_start"]
        [::std::mem::offset_of!(fgetsigsinfo, fg_file_start) - 0usize];
    ["Offset of field: fgetsigsinfo::fg_info_request"]
        [::std::mem::offset_of!(fgetsigsinfo, fg_info_request) - 8usize];
    ["Offset of field: fgetsigsinfo::fg_sig_is_platform"]
        [::std::mem::offset_of!(fgetsigsinfo, fg_sig_is_platform) - 12usize];
};
pub type fgetsigsinfo_t = fgetsigsinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fstore {
    pub fst_flags: ::std::os::raw::c_uint,
    pub fst_posmode: ::std::os::raw::c_int,
    pub fst_offset: off_t,
    pub fst_length: off_t,
    pub fst_bytesalloc: off_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fstore"][::std::mem::size_of::<fstore>() - 32usize];
    ["Alignment of fstore"][::std::mem::align_of::<fstore>() - 8usize];
    ["Offset of field: fstore::fst_flags"][::std::mem::offset_of!(fstore, fst_flags) - 0usize];
    ["Offset of field: fstore::fst_posmode"][::std::mem::offset_of!(fstore, fst_posmode) - 4usize];
    ["Offset of field: fstore::fst_offset"][::std::mem::offset_of!(fstore, fst_offset) - 8usize];
    ["Offset of field: fstore::fst_length"][::std::mem::offset_of!(fstore, fst_length) - 16usize];
    ["Offset of field: fstore::fst_bytesalloc"]
        [::std::mem::offset_of!(fstore, fst_bytesalloc) - 24usize];
};
pub type fstore_t = fstore;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fpunchhole {
    pub fp_flags: ::std::os::raw::c_uint,
    pub reserved: ::std::os::raw::c_uint,
    pub fp_offset: off_t,
    pub fp_length: off_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fpunchhole"][::std::mem::size_of::<fpunchhole>() - 24usize];
    ["Alignment of fpunchhole"][::std::mem::align_of::<fpunchhole>() - 8usize];
    ["Offset of field: fpunchhole::fp_flags"]
        [::std::mem::offset_of!(fpunchhole, fp_flags) - 0usize];
    ["Offset of field: fpunchhole::reserved"]
        [::std::mem::offset_of!(fpunchhole, reserved) - 4usize];
    ["Offset of field: fpunchhole::fp_offset"]
        [::std::mem::offset_of!(fpunchhole, fp_offset) - 8usize];
    ["Offset of field: fpunchhole::fp_length"]
        [::std::mem::offset_of!(fpunchhole, fp_length) - 16usize];
};
pub type fpunchhole_t = fpunchhole;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ftrimactivefile {
    pub fta_offset: off_t,
    pub fta_length: off_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ftrimactivefile"][::std::mem::size_of::<ftrimactivefile>() - 16usize];
    ["Alignment of ftrimactivefile"][::std::mem::align_of::<ftrimactivefile>() - 8usize];
    ["Offset of field: ftrimactivefile::fta_offset"]
        [::std::mem::offset_of!(ftrimactivefile, fta_offset) - 0usize];
    ["Offset of field: ftrimactivefile::fta_length"]
        [::std::mem::offset_of!(ftrimactivefile, fta_length) - 8usize];
};
pub type ftrimactivefile_t = ftrimactivefile;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fspecread {
    pub fsr_flags: ::std::os::raw::c_uint,
    pub reserved: ::std::os::raw::c_uint,
    pub fsr_offset: off_t,
    pub fsr_length: off_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fspecread"][::std::mem::size_of::<fspecread>() - 24usize];
    ["Alignment of fspecread"][::std::mem::align_of::<fspecread>() - 8usize];
    ["Offset of field: fspecread::fsr_flags"]
        [::std::mem::offset_of!(fspecread, fsr_flags) - 0usize];
    ["Offset of field: fspecread::reserved"][::std::mem::offset_of!(fspecread, reserved) - 4usize];
    ["Offset of field: fspecread::fsr_offset"]
        [::std::mem::offset_of!(fspecread, fsr_offset) - 8usize];
    ["Offset of field: fspecread::fsr_length"]
        [::std::mem::offset_of!(fspecread, fsr_length) - 16usize];
};
pub type fspecread_t = fspecread;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fattributiontag {
    pub ft_flags: ::std::os::raw::c_uint,
    pub ft_hash: ::std::os::raw::c_ulonglong,
    pub ft_attribution_name: [::std::os::raw::c_char; 255usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fattributiontag"][::std::mem::size_of::<fattributiontag>() - 272usize];
    ["Alignment of fattributiontag"][::std::mem::align_of::<fattributiontag>() - 8usize];
    ["Offset of field: fattributiontag::ft_flags"]
        [::std::mem::offset_of!(fattributiontag, ft_flags) - 0usize];
    ["Offset of field: fattributiontag::ft_hash"]
        [::std::mem::offset_of!(fattributiontag, ft_hash) - 8usize];
    ["Offset of field: fattributiontag::ft_attribution_name"]
        [::std::mem::offset_of!(fattributiontag, ft_attribution_name) - 16usize];
};
pub type fattributiontag_t = fattributiontag;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct log2phys {
    pub l2p_flags: ::std::os::raw::c_uint,
    pub l2p_contigbytes: off_t,
    pub l2p_devoffset: off_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of log2phys"][::std::mem::size_of::<log2phys>() - 20usize];
    ["Alignment of log2phys"][::std::mem::align_of::<log2phys>() - 4usize];
    ["Offset of field: log2phys::l2p_flags"][::std::mem::offset_of!(log2phys, l2p_flags) - 0usize];
    ["Offset of field: log2phys::l2p_contigbytes"]
        [::std::mem::offset_of!(log2phys, l2p_contigbytes) - 4usize];
    ["Offset of field: log2phys::l2p_devoffset"]
        [::std::mem::offset_of!(log2phys, l2p_devoffset) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _filesec {
    _unused: [u8; 0],
}
pub type filesec_t = *mut _filesec;
pub const filesec_property_t_FILESEC_OWNER: filesec_property_t = 1;
pub const filesec_property_t_FILESEC_GROUP: filesec_property_t = 2;
pub const filesec_property_t_FILESEC_UUID: filesec_property_t = 3;
pub const filesec_property_t_FILESEC_MODE: filesec_property_t = 4;
pub const filesec_property_t_FILESEC_ACL: filesec_property_t = 5;
pub const filesec_property_t_FILESEC_GRPUUID: filesec_property_t = 6;
pub const filesec_property_t_FILESEC_ACL_RAW: filesec_property_t = 100;
pub const filesec_property_t_FILESEC_ACL_ALLOCSIZE: filesec_property_t = 101;
pub type filesec_property_t = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn open(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn openat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn creat(arg1: *const ::std::os::raw::c_char, arg2: mode_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fcntl(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn openx_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: filesec_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn open_dprotected_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn openat_dprotected_np(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn openat_authenticated_np(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn flock(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn filesec_init() -> filesec_t;
}
unsafe extern "C" {
    pub fn filesec_dup(arg1: filesec_t) -> filesec_t;
}
unsafe extern "C" {
    pub fn filesec_free(arg1: filesec_t);
}
unsafe extern "C" {
    pub fn filesec_get_property(
        arg1: filesec_t,
        arg2: filesec_property_t,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn filesec_query_property(
        arg1: filesec_t,
        arg2: filesec_property_t,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn filesec_set_property(
        arg1: filesec_t,
        arg2: filesec_property_t,
        arg3: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn filesec_unset_property(
        arg1: filesec_t,
        arg2: filesec_property_t,
    ) -> ::std::os::raw::c_int;
}
pub type __darwin_nl_item = ::std::os::raw::c_int;
pub type __darwin_wctrans_t = ::std::os::raw::c_int;
pub type __darwin_wctype_t = __uint32_t;
pub const idtype_t_P_ALL: idtype_t = 0;
pub const idtype_t_P_PID: idtype_t = 1;
pub const idtype_t_P_PGID: idtype_t = 2;
pub type idtype_t = ::std::os::raw::c_uint;
pub type sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_i386_thread_state {
    pub __eax: ::std::os::raw::c_uint,
    pub __ebx: ::std::os::raw::c_uint,
    pub __ecx: ::std::os::raw::c_uint,
    pub __edx: ::std::os::raw::c_uint,
    pub __edi: ::std::os::raw::c_uint,
    pub __esi: ::std::os::raw::c_uint,
    pub __ebp: ::std::os::raw::c_uint,
    pub __esp: ::std::os::raw::c_uint,
    pub __ss: ::std::os::raw::c_uint,
    pub __eflags: ::std::os::raw::c_uint,
    pub __eip: ::std::os::raw::c_uint,
    pub __cs: ::std::os::raw::c_uint,
    pub __ds: ::std::os::raw::c_uint,
    pub __es: ::std::os::raw::c_uint,
    pub __fs: ::std::os::raw::c_uint,
    pub __gs: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_i386_thread_state"]
        [::std::mem::size_of::<__darwin_i386_thread_state>() - 64usize];
    ["Alignment of __darwin_i386_thread_state"]
        [::std::mem::align_of::<__darwin_i386_thread_state>() - 4usize];
    ["Offset of field: __darwin_i386_thread_state::__eax"]
        [::std::mem::offset_of!(__darwin_i386_thread_state, __eax) - 0usize];
    ["Offset of field: __darwin_i386_thread_state::__ebx"]
        [::std::mem::offset_of!(__darwin_i386_thread_state, __ebx) - 4usize];
    ["Offset of field: __darwin_i386_thread_state::__ecx"]
        [::std::mem::offset_of!(__darwin_i386_thread_state, __ecx) - 8usize];
    ["Offset of field: __darwin_i386_thread_state::__edx"]
        [::std::mem::offset_of!(__darwin_i386_thread_state, __edx) - 12usize];
    ["Offset of field: __darwin_i386_thread_state::__edi"]
        [::std::mem::offset_of!(__darwin_i386_thread_state, __edi) - 16usize];
    ["Offset of field: __darwin_i386_thread_state::__esi"]
        [::std::mem::offset_of!(__darwin_i386_thread_state, __esi) - 20usize];
    ["Offset of field: __darwin_i386_thread_state::__ebp"]
        [::std::mem::offset_of!(__darwin_i386_thread_state, __ebp) - 24usize];
    ["Offset of field: __darwin_i386_thread_state::__esp"]
        [::std::mem::offset_of!(__darwin_i386_thread_state, __esp) - 28usize];
    ["Offset of field: __darwin_i386_thread_state::__ss"]
        [::std::mem::offset_of!(__darwin_i386_thread_state, __ss) - 32usize];
    ["Offset of field: __darwin_i386_thread_state::__eflags"]
        [::std::mem::offset_of!(__darwin_i386_thread_state, __eflags) - 36usize];
    ["Offset of field: __darwin_i386_thread_state::__eip"]
        [::std::mem::offset_of!(__darwin_i386_thread_state, __eip) - 40usize];
    ["Offset of field: __darwin_i386_thread_state::__cs"]
        [::std::mem::offset_of!(__darwin_i386_thread_state, __cs) - 44usize];
    ["Offset of field: __darwin_i386_thread_state::__ds"]
        [::std::mem::offset_of!(__darwin_i386_thread_state, __ds) - 48usize];
    ["Offset of field: __darwin_i386_thread_state::__es"]
        [::std::mem::offset_of!(__darwin_i386_thread_state, __es) - 52usize];
    ["Offset of field: __darwin_i386_thread_state::__fs"]
        [::std::mem::offset_of!(__darwin_i386_thread_state, __fs) - 56usize];
    ["Offset of field: __darwin_i386_thread_state::__gs"]
        [::std::mem::offset_of!(__darwin_i386_thread_state, __gs) - 60usize];
};
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_fp_control {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_fp_control"][::std::mem::size_of::<__darwin_fp_control>() - 2usize];
    ["Alignment of __darwin_fp_control"][::std::mem::align_of::<__darwin_fp_control>() - 2usize];
};
impl __darwin_fp_control {
    #[inline]
    pub fn __invalid(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___invalid(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __invalid_raw(this: *const Self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set___invalid_raw(this: *mut Self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __denorm(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___denorm(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __denorm_raw(this: *const Self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set___denorm_raw(this: *mut Self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __zdiv(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___zdiv(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __zdiv_raw(this: *const Self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set___zdiv_raw(this: *mut Self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __ovrfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___ovrfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __ovrfl_raw(this: *const Self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set___ovrfl_raw(this: *mut Self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __undfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___undfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __undfl_raw(this: *const Self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set___undfl_raw(this: *mut Self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __precis(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___precis(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __precis_raw(this: *const Self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set___precis_raw(this: *mut Self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __pc(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set___pc(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __pc_raw(this: *const Self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                2u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set___pc_raw(this: *mut Self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __rc(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set___rc(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __rc_raw(this: *const Self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                10usize,
                2u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set___rc_raw(this: *mut Self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                10usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __invalid: ::std::os::raw::c_ushort,
        __denorm: ::std::os::raw::c_ushort,
        __zdiv: ::std::os::raw::c_ushort,
        __ovrfl: ::std::os::raw::c_ushort,
        __undfl: ::std::os::raw::c_ushort,
        __precis: ::std::os::raw::c_ushort,
        __pc: ::std::os::raw::c_ushort,
        __rc: ::std::os::raw::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let __invalid: u16 = unsafe { ::std::mem::transmute(__invalid) };
            __invalid as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let __denorm: u16 = unsafe { ::std::mem::transmute(__denorm) };
            __denorm as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let __zdiv: u16 = unsafe { ::std::mem::transmute(__zdiv) };
            __zdiv as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let __ovrfl: u16 = unsafe { ::std::mem::transmute(__ovrfl) };
            __ovrfl as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let __undfl: u16 = unsafe { ::std::mem::transmute(__undfl) };
            __undfl as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let __precis: u16 = unsafe { ::std::mem::transmute(__precis) };
            __precis as u64
        });
        __bindgen_bitfield_unit.set(8usize, 2u8, {
            let __pc: u16 = unsafe { ::std::mem::transmute(__pc) };
            __pc as u64
        });
        __bindgen_bitfield_unit.set(10usize, 2u8, {
            let __rc: u16 = unsafe { ::std::mem::transmute(__rc) };
            __rc as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type __darwin_fp_control_t = __darwin_fp_control;
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_fp_status {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_fp_status"][::std::mem::size_of::<__darwin_fp_status>() - 2usize];
    ["Alignment of __darwin_fp_status"][::std::mem::align_of::<__darwin_fp_status>() - 2usize];
};
impl __darwin_fp_status {
    #[inline]
    pub fn __invalid(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___invalid(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __invalid_raw(this: *const Self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set___invalid_raw(this: *mut Self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __denorm(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___denorm(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __denorm_raw(this: *const Self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set___denorm_raw(this: *mut Self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __zdiv(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___zdiv(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __zdiv_raw(this: *const Self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set___zdiv_raw(this: *mut Self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __ovrfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___ovrfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __ovrfl_raw(this: *const Self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set___ovrfl_raw(this: *mut Self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __undfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___undfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __undfl_raw(this: *const Self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set___undfl_raw(this: *mut Self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __precis(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___precis(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __precis_raw(this: *const Self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set___precis_raw(this: *mut Self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __stkflt(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___stkflt(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __stkflt_raw(this: *const Self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set___stkflt_raw(this: *mut Self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __errsumm(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___errsumm(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __errsumm_raw(this: *const Self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                7usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set___errsumm_raw(this: *mut Self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                7usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __c0(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c0(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __c0_raw(this: *const Self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set___c0_raw(this: *mut Self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __c1(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c1(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __c1_raw(this: *const Self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set___c1_raw(this: *mut Self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __c2(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c2(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __c2_raw(this: *const Self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                10usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set___c2_raw(this: *mut Self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                10usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __tos(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set___tos(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __tos_raw(this: *const Self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                11usize,
                3u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set___tos_raw(this: *mut Self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                11usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __c3(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c3(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __c3_raw(this: *const Self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                14usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set___c3_raw(this: *mut Self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                14usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __busy(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___busy(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __busy_raw(this: *const Self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                15usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set___busy_raw(this: *mut Self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                15usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __invalid: ::std::os::raw::c_ushort,
        __denorm: ::std::os::raw::c_ushort,
        __zdiv: ::std::os::raw::c_ushort,
        __ovrfl: ::std::os::raw::c_ushort,
        __undfl: ::std::os::raw::c_ushort,
        __precis: ::std::os::raw::c_ushort,
        __stkflt: ::std::os::raw::c_ushort,
        __errsumm: ::std::os::raw::c_ushort,
        __c0: ::std::os::raw::c_ushort,
        __c1: ::std::os::raw::c_ushort,
        __c2: ::std::os::raw::c_ushort,
        __tos: ::std::os::raw::c_ushort,
        __c3: ::std::os::raw::c_ushort,
        __busy: ::std::os::raw::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let __invalid: u16 = unsafe { ::std::mem::transmute(__invalid) };
            __invalid as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let __denorm: u16 = unsafe { ::std::mem::transmute(__denorm) };
            __denorm as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let __zdiv: u16 = unsafe { ::std::mem::transmute(__zdiv) };
            __zdiv as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let __ovrfl: u16 = unsafe { ::std::mem::transmute(__ovrfl) };
            __ovrfl as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let __undfl: u16 = unsafe { ::std::mem::transmute(__undfl) };
            __undfl as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let __precis: u16 = unsafe { ::std::mem::transmute(__precis) };
            __precis as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let __stkflt: u16 = unsafe { ::std::mem::transmute(__stkflt) };
            __stkflt as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let __errsumm: u16 = unsafe { ::std::mem::transmute(__errsumm) };
            __errsumm as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let __c0: u16 = unsafe { ::std::mem::transmute(__c0) };
            __c0 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let __c1: u16 = unsafe { ::std::mem::transmute(__c1) };
            __c1 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let __c2: u16 = unsafe { ::std::mem::transmute(__c2) };
            __c2 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 3u8, {
            let __tos: u16 = unsafe { ::std::mem::transmute(__tos) };
            __tos as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let __c3: u16 = unsafe { ::std::mem::transmute(__c3) };
            __c3 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let __busy: u16 = unsafe { ::std::mem::transmute(__busy) };
            __busy as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type __darwin_fp_status_t = __darwin_fp_status;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mmst_reg {
    pub __mmst_reg: [::std::os::raw::c_char; 10usize],
    pub __mmst_rsrv: [::std::os::raw::c_char; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_mmst_reg"][::std::mem::size_of::<__darwin_mmst_reg>() - 16usize];
    ["Alignment of __darwin_mmst_reg"][::std::mem::align_of::<__darwin_mmst_reg>() - 1usize];
    ["Offset of field: __darwin_mmst_reg::__mmst_reg"]
        [::std::mem::offset_of!(__darwin_mmst_reg, __mmst_reg) - 0usize];
    ["Offset of field: __darwin_mmst_reg::__mmst_rsrv"]
        [::std::mem::offset_of!(__darwin_mmst_reg, __mmst_rsrv) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_xmm_reg {
    pub __xmm_reg: [::std::os::raw::c_char; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_xmm_reg"][::std::mem::size_of::<__darwin_xmm_reg>() - 16usize];
    ["Alignment of __darwin_xmm_reg"][::std::mem::align_of::<__darwin_xmm_reg>() - 1usize];
    ["Offset of field: __darwin_xmm_reg::__xmm_reg"]
        [::std::mem::offset_of!(__darwin_xmm_reg, __xmm_reg) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_ymm_reg {
    pub __ymm_reg: [::std::os::raw::c_char; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_ymm_reg"][::std::mem::size_of::<__darwin_ymm_reg>() - 32usize];
    ["Alignment of __darwin_ymm_reg"][::std::mem::align_of::<__darwin_ymm_reg>() - 1usize];
    ["Offset of field: __darwin_ymm_reg::__ymm_reg"]
        [::std::mem::offset_of!(__darwin_ymm_reg, __ymm_reg) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_zmm_reg {
    pub __zmm_reg: [::std::os::raw::c_char; 64usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_zmm_reg"][::std::mem::size_of::<__darwin_zmm_reg>() - 64usize];
    ["Alignment of __darwin_zmm_reg"][::std::mem::align_of::<__darwin_zmm_reg>() - 1usize];
    ["Offset of field: __darwin_zmm_reg::__zmm_reg"]
        [::std::mem::offset_of!(__darwin_zmm_reg, __zmm_reg) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_opmask_reg {
    pub __opmask_reg: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_opmask_reg"][::std::mem::size_of::<__darwin_opmask_reg>() - 8usize];
    ["Alignment of __darwin_opmask_reg"][::std::mem::align_of::<__darwin_opmask_reg>() - 1usize];
    ["Offset of field: __darwin_opmask_reg::__opmask_reg"]
        [::std::mem::offset_of!(__darwin_opmask_reg, __opmask_reg) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_i386_float_state {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 224usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_i386_float_state"]
        [::std::mem::size_of::<__darwin_i386_float_state>() - 524usize];
    ["Alignment of __darwin_i386_float_state"]
        [::std::mem::align_of::<__darwin_i386_float_state>() - 4usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_reserved"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_reserved) - 0usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_fcw"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_fcw) - 8usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_fsw"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_fsw) - 10usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_ftw"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_ftw) - 12usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_rsrv1"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_rsrv1) - 13usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_fop"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_fop) - 14usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_ip"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_ip) - 16usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_cs"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_cs) - 20usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_rsrv2"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_rsrv2) - 22usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_dp"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_dp) - 24usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_ds"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_ds) - 28usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_rsrv3"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_rsrv3) - 30usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_mxcsr"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_mxcsr) - 32usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_mxcsrmask"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_mxcsrmask) - 36usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_stmm0"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_stmm0) - 40usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_stmm1"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_stmm1) - 56usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_stmm2"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_stmm2) - 72usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_stmm3"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_stmm3) - 88usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_stmm4"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_stmm4) - 104usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_stmm5"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_stmm5) - 120usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_stmm6"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_stmm6) - 136usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_stmm7"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_stmm7) - 152usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_xmm0"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_xmm0) - 168usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_xmm1"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_xmm1) - 184usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_xmm2"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_xmm2) - 200usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_xmm3"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_xmm3) - 216usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_xmm4"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_xmm4) - 232usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_xmm5"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_xmm5) - 248usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_xmm6"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_xmm6) - 264usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_xmm7"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_xmm7) - 280usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_rsrv4"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_rsrv4) - 296usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_reserved1"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_reserved1) - 520usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_i386_avx_state {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 224usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_i386_avx_state"]
        [::std::mem::size_of::<__darwin_i386_avx_state>() - 716usize];
    ["Alignment of __darwin_i386_avx_state"]
        [::std::mem::align_of::<__darwin_i386_avx_state>() - 4usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_reserved"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_reserved) - 0usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_fcw"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_fcw) - 8usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_fsw"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_fsw) - 10usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_ftw"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_ftw) - 12usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_rsrv1"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_rsrv1) - 13usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_fop"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_fop) - 14usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_ip"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_ip) - 16usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_cs"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_cs) - 20usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_rsrv2"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_rsrv2) - 22usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_dp"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_dp) - 24usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_ds"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_ds) - 28usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_rsrv3"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_rsrv3) - 30usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_mxcsr"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_mxcsr) - 32usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_mxcsrmask"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_mxcsrmask) - 36usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_stmm0"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_stmm0) - 40usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_stmm1"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_stmm1) - 56usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_stmm2"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_stmm2) - 72usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_stmm3"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_stmm3) - 88usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_stmm4"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_stmm4) - 104usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_stmm5"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_stmm5) - 120usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_stmm6"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_stmm6) - 136usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_stmm7"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_stmm7) - 152usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_xmm0"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_xmm0) - 168usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_xmm1"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_xmm1) - 184usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_xmm2"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_xmm2) - 200usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_xmm3"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_xmm3) - 216usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_xmm4"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_xmm4) - 232usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_xmm5"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_xmm5) - 248usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_xmm6"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_xmm6) - 264usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_xmm7"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_xmm7) - 280usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_rsrv4"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_rsrv4) - 296usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_reserved1"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_reserved1) - 520usize];
    ["Offset of field: __darwin_i386_avx_state::__avx_reserved1"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __avx_reserved1) - 524usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_ymmh0"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_ymmh0) - 588usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_ymmh1"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_ymmh1) - 604usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_ymmh2"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_ymmh2) - 620usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_ymmh3"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_ymmh3) - 636usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_ymmh4"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_ymmh4) - 652usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_ymmh5"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_ymmh5) - 668usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_ymmh6"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_ymmh6) - 684usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_ymmh7"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_ymmh7) - 700usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_i386_avx512_state {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 224usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
    pub __fpu_k0: __darwin_opmask_reg,
    pub __fpu_k1: __darwin_opmask_reg,
    pub __fpu_k2: __darwin_opmask_reg,
    pub __fpu_k3: __darwin_opmask_reg,
    pub __fpu_k4: __darwin_opmask_reg,
    pub __fpu_k5: __darwin_opmask_reg,
    pub __fpu_k6: __darwin_opmask_reg,
    pub __fpu_k7: __darwin_opmask_reg,
    pub __fpu_zmmh0: __darwin_ymm_reg,
    pub __fpu_zmmh1: __darwin_ymm_reg,
    pub __fpu_zmmh2: __darwin_ymm_reg,
    pub __fpu_zmmh3: __darwin_ymm_reg,
    pub __fpu_zmmh4: __darwin_ymm_reg,
    pub __fpu_zmmh5: __darwin_ymm_reg,
    pub __fpu_zmmh6: __darwin_ymm_reg,
    pub __fpu_zmmh7: __darwin_ymm_reg,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_i386_avx512_state"]
        [::std::mem::size_of::<__darwin_i386_avx512_state>() - 1036usize];
    ["Alignment of __darwin_i386_avx512_state"]
        [::std::mem::align_of::<__darwin_i386_avx512_state>() - 4usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_reserved"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_reserved) - 0usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_fcw"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_fcw) - 8usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_fsw"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_fsw) - 10usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_ftw"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_ftw) - 12usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_rsrv1"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_rsrv1) - 13usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_fop"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_fop) - 14usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_ip"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_ip) - 16usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_cs"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_cs) - 20usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_rsrv2"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_rsrv2) - 22usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_dp"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_dp) - 24usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_ds"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_ds) - 28usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_rsrv3"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_rsrv3) - 30usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_mxcsr"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_mxcsr) - 32usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_mxcsrmask"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_mxcsrmask) - 36usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_stmm0"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_stmm0) - 40usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_stmm1"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_stmm1) - 56usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_stmm2"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_stmm2) - 72usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_stmm3"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_stmm3) - 88usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_stmm4"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_stmm4) - 104usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_stmm5"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_stmm5) - 120usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_stmm6"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_stmm6) - 136usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_stmm7"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_stmm7) - 152usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_xmm0"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_xmm0) - 168usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_xmm1"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_xmm1) - 184usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_xmm2"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_xmm2) - 200usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_xmm3"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_xmm3) - 216usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_xmm4"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_xmm4) - 232usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_xmm5"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_xmm5) - 248usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_xmm6"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_xmm6) - 264usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_xmm7"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_xmm7) - 280usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_rsrv4"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_rsrv4) - 296usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_reserved1"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_reserved1) - 520usize];
    ["Offset of field: __darwin_i386_avx512_state::__avx_reserved1"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __avx_reserved1) - 524usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_ymmh0"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_ymmh0) - 588usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_ymmh1"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_ymmh1) - 604usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_ymmh2"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_ymmh2) - 620usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_ymmh3"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_ymmh3) - 636usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_ymmh4"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_ymmh4) - 652usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_ymmh5"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_ymmh5) - 668usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_ymmh6"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_ymmh6) - 684usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_ymmh7"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_ymmh7) - 700usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_k0"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_k0) - 716usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_k1"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_k1) - 724usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_k2"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_k2) - 732usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_k3"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_k3) - 740usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_k4"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_k4) - 748usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_k5"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_k5) - 756usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_k6"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_k6) - 764usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_k7"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_k7) - 772usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_zmmh0"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_zmmh0) - 780usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_zmmh1"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_zmmh1) - 812usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_zmmh2"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_zmmh2) - 844usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_zmmh3"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_zmmh3) - 876usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_zmmh4"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_zmmh4) - 908usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_zmmh5"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_zmmh5) - 940usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_zmmh6"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_zmmh6) - 972usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_zmmh7"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_zmmh7) - 1004usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_i386_exception_state {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_i386_exception_state"]
        [::std::mem::size_of::<__darwin_i386_exception_state>() - 12usize];
    ["Alignment of __darwin_i386_exception_state"]
        [::std::mem::align_of::<__darwin_i386_exception_state>() - 4usize];
    ["Offset of field: __darwin_i386_exception_state::__trapno"]
        [::std::mem::offset_of!(__darwin_i386_exception_state, __trapno) - 0usize];
    ["Offset of field: __darwin_i386_exception_state::__cpu"]
        [::std::mem::offset_of!(__darwin_i386_exception_state, __cpu) - 2usize];
    ["Offset of field: __darwin_i386_exception_state::__err"]
        [::std::mem::offset_of!(__darwin_i386_exception_state, __err) - 4usize];
    ["Offset of field: __darwin_i386_exception_state::__faultvaddr"]
        [::std::mem::offset_of!(__darwin_i386_exception_state, __faultvaddr) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_debug_state32 {
    pub __dr0: ::std::os::raw::c_uint,
    pub __dr1: ::std::os::raw::c_uint,
    pub __dr2: ::std::os::raw::c_uint,
    pub __dr3: ::std::os::raw::c_uint,
    pub __dr4: ::std::os::raw::c_uint,
    pub __dr5: ::std::os::raw::c_uint,
    pub __dr6: ::std::os::raw::c_uint,
    pub __dr7: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_x86_debug_state32"]
        [::std::mem::size_of::<__darwin_x86_debug_state32>() - 32usize];
    ["Alignment of __darwin_x86_debug_state32"]
        [::std::mem::align_of::<__darwin_x86_debug_state32>() - 4usize];
    ["Offset of field: __darwin_x86_debug_state32::__dr0"]
        [::std::mem::offset_of!(__darwin_x86_debug_state32, __dr0) - 0usize];
    ["Offset of field: __darwin_x86_debug_state32::__dr1"]
        [::std::mem::offset_of!(__darwin_x86_debug_state32, __dr1) - 4usize];
    ["Offset of field: __darwin_x86_debug_state32::__dr2"]
        [::std::mem::offset_of!(__darwin_x86_debug_state32, __dr2) - 8usize];
    ["Offset of field: __darwin_x86_debug_state32::__dr3"]
        [::std::mem::offset_of!(__darwin_x86_debug_state32, __dr3) - 12usize];
    ["Offset of field: __darwin_x86_debug_state32::__dr4"]
        [::std::mem::offset_of!(__darwin_x86_debug_state32, __dr4) - 16usize];
    ["Offset of field: __darwin_x86_debug_state32::__dr5"]
        [::std::mem::offset_of!(__darwin_x86_debug_state32, __dr5) - 20usize];
    ["Offset of field: __darwin_x86_debug_state32::__dr6"]
        [::std::mem::offset_of!(__darwin_x86_debug_state32, __dr6) - 24usize];
    ["Offset of field: __darwin_x86_debug_state32::__dr7"]
        [::std::mem::offset_of!(__darwin_x86_debug_state32, __dr7) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __x86_instruction_state {
    pub __insn_stream_valid_bytes: ::std::os::raw::c_int,
    pub __insn_offset: ::std::os::raw::c_int,
    pub __out_of_synch: ::std::os::raw::c_int,
    pub __insn_bytes: [__uint8_t; 2380usize],
    pub __insn_cacheline: [__uint8_t; 64usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __x86_instruction_state"]
        [::std::mem::size_of::<__x86_instruction_state>() - 2456usize];
    ["Alignment of __x86_instruction_state"]
        [::std::mem::align_of::<__x86_instruction_state>() - 4usize];
    ["Offset of field: __x86_instruction_state::__insn_stream_valid_bytes"]
        [::std::mem::offset_of!(__x86_instruction_state, __insn_stream_valid_bytes) - 0usize];
    ["Offset of field: __x86_instruction_state::__insn_offset"]
        [::std::mem::offset_of!(__x86_instruction_state, __insn_offset) - 4usize];
    ["Offset of field: __x86_instruction_state::__out_of_synch"]
        [::std::mem::offset_of!(__x86_instruction_state, __out_of_synch) - 8usize];
    ["Offset of field: __x86_instruction_state::__insn_bytes"]
        [::std::mem::offset_of!(__x86_instruction_state, __insn_bytes) - 12usize];
    ["Offset of field: __x86_instruction_state::__insn_cacheline"]
        [::std::mem::offset_of!(__x86_instruction_state, __insn_cacheline) - 2392usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __last_branch_record {
    pub __from_ip: __uint64_t,
    pub __to_ip: __uint64_t,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub __bindgen_padding_0: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __last_branch_record"][::std::mem::size_of::<__last_branch_record>() - 24usize];
    ["Alignment of __last_branch_record"][::std::mem::align_of::<__last_branch_record>() - 8usize];
    ["Offset of field: __last_branch_record::__from_ip"]
        [::std::mem::offset_of!(__last_branch_record, __from_ip) - 0usize];
    ["Offset of field: __last_branch_record::__to_ip"]
        [::std::mem::offset_of!(__last_branch_record, __to_ip) - 8usize];
};
impl __last_branch_record {
    #[inline]
    pub fn __mispredict(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___mispredict(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __mispredict_raw(this: *const Self) -> __uint32_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set___mispredict_raw(this: *mut Self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __tsx_abort(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___tsx_abort(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __tsx_abort_raw(this: *const Self) -> __uint32_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set___tsx_abort_raw(this: *mut Self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __in_tsx(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___in_tsx(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __in_tsx_raw(this: *const Self) -> __uint32_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set___in_tsx_raw(this: *mut Self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __cycle_count(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set___cycle_count(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __cycle_count_raw(this: *const Self) -> __uint32_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set___cycle_count_raw(this: *mut Self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __reserved(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(19usize, 13u8) as u32) }
    }
    #[inline]
    pub fn set___reserved(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(19usize, 13u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __reserved_raw(this: *const Self) -> __uint32_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                19usize,
                13u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set___reserved_raw(this: *mut Self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                19usize,
                13u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __mispredict: __uint32_t,
        __tsx_abort: __uint32_t,
        __in_tsx: __uint32_t,
        __cycle_count: __uint32_t,
        __reserved: __uint32_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let __mispredict: u32 = unsafe { ::std::mem::transmute(__mispredict) };
            __mispredict as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let __tsx_abort: u32 = unsafe { ::std::mem::transmute(__tsx_abort) };
            __tsx_abort as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let __in_tsx: u32 = unsafe { ::std::mem::transmute(__in_tsx) };
            __in_tsx as u64
        });
        __bindgen_bitfield_unit.set(3usize, 16u8, {
            let __cycle_count: u32 = unsafe { ::std::mem::transmute(__cycle_count) };
            __cycle_count as u64
        });
        __bindgen_bitfield_unit.set(19usize, 13u8, {
            let __reserved: u32 = unsafe { ::std::mem::transmute(__reserved) };
            __reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __last_branch_state {
    pub __lbr_count: ::std::os::raw::c_int,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub __lbrs: [__last_branch_record; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __last_branch_state"][::std::mem::size_of::<__last_branch_state>() - 776usize];
    ["Alignment of __last_branch_state"][::std::mem::align_of::<__last_branch_state>() - 8usize];
    ["Offset of field: __last_branch_state::__lbr_count"]
        [::std::mem::offset_of!(__last_branch_state, __lbr_count) - 0usize];
    ["Offset of field: __last_branch_state::__lbrs"]
        [::std::mem::offset_of!(__last_branch_state, __lbrs) - 8usize];
};
impl __last_branch_state {
    #[inline]
    pub fn __lbr_supported_tsx(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___lbr_supported_tsx(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __lbr_supported_tsx_raw(this: *const Self) -> __uint32_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set___lbr_supported_tsx_raw(this: *mut Self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __lbr_supported_cycle_count(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___lbr_supported_cycle_count(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __lbr_supported_cycle_count_raw(this: *const Self) -> __uint32_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set___lbr_supported_cycle_count_raw(this: *mut Self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __reserved(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set___reserved(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __reserved_raw(this: *const Self) -> __uint32_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                30u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set___reserved_raw(this: *mut Self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                30u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __lbr_supported_tsx: __uint32_t,
        __lbr_supported_cycle_count: __uint32_t,
        __reserved: __uint32_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let __lbr_supported_tsx: u32 = unsafe { ::std::mem::transmute(__lbr_supported_tsx) };
            __lbr_supported_tsx as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let __lbr_supported_cycle_count: u32 =
                unsafe { ::std::mem::transmute(__lbr_supported_cycle_count) };
            __lbr_supported_cycle_count as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let __reserved: u32 = unsafe { ::std::mem::transmute(__reserved) };
            __reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __x86_pagein_state {
    pub __pagein_error: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __x86_pagein_state"][::std::mem::size_of::<__x86_pagein_state>() - 4usize];
    ["Alignment of __x86_pagein_state"][::std::mem::align_of::<__x86_pagein_state>() - 4usize];
    ["Offset of field: __x86_pagein_state::__pagein_error"]
        [::std::mem::offset_of!(__x86_pagein_state, __pagein_error) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_thread_state64 {
    pub __rax: __uint64_t,
    pub __rbx: __uint64_t,
    pub __rcx: __uint64_t,
    pub __rdx: __uint64_t,
    pub __rdi: __uint64_t,
    pub __rsi: __uint64_t,
    pub __rbp: __uint64_t,
    pub __rsp: __uint64_t,
    pub __r8: __uint64_t,
    pub __r9: __uint64_t,
    pub __r10: __uint64_t,
    pub __r11: __uint64_t,
    pub __r12: __uint64_t,
    pub __r13: __uint64_t,
    pub __r14: __uint64_t,
    pub __r15: __uint64_t,
    pub __rip: __uint64_t,
    pub __rflags: __uint64_t,
    pub __cs: __uint64_t,
    pub __fs: __uint64_t,
    pub __gs: __uint64_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_x86_thread_state64"]
        [::std::mem::size_of::<__darwin_x86_thread_state64>() - 168usize];
    ["Alignment of __darwin_x86_thread_state64"]
        [::std::mem::align_of::<__darwin_x86_thread_state64>() - 8usize];
    ["Offset of field: __darwin_x86_thread_state64::__rax"]
        [::std::mem::offset_of!(__darwin_x86_thread_state64, __rax) - 0usize];
    ["Offset of field: __darwin_x86_thread_state64::__rbx"]
        [::std::mem::offset_of!(__darwin_x86_thread_state64, __rbx) - 8usize];
    ["Offset of field: __darwin_x86_thread_state64::__rcx"]
        [::std::mem::offset_of!(__darwin_x86_thread_state64, __rcx) - 16usize];
    ["Offset of field: __darwin_x86_thread_state64::__rdx"]
        [::std::mem::offset_of!(__darwin_x86_thread_state64, __rdx) - 24usize];
    ["Offset of field: __darwin_x86_thread_state64::__rdi"]
        [::std::mem::offset_of!(__darwin_x86_thread_state64, __rdi) - 32usize];
    ["Offset of field: __darwin_x86_thread_state64::__rsi"]
        [::std::mem::offset_of!(__darwin_x86_thread_state64, __rsi) - 40usize];
    ["Offset of field: __darwin_x86_thread_state64::__rbp"]
        [::std::mem::offset_of!(__darwin_x86_thread_state64, __rbp) - 48usize];
    ["Offset of field: __darwin_x86_thread_state64::__rsp"]
        [::std::mem::offset_of!(__darwin_x86_thread_state64, __rsp) - 56usize];
    ["Offset of field: __darwin_x86_thread_state64::__r8"]
        [::std::mem::offset_of!(__darwin_x86_thread_state64, __r8) - 64usize];
    ["Offset of field: __darwin_x86_thread_state64::__r9"]
        [::std::mem::offset_of!(__darwin_x86_thread_state64, __r9) - 72usize];
    ["Offset of field: __darwin_x86_thread_state64::__r10"]
        [::std::mem::offset_of!(__darwin_x86_thread_state64, __r10) - 80usize];
    ["Offset of field: __darwin_x86_thread_state64::__r11"]
        [::std::mem::offset_of!(__darwin_x86_thread_state64, __r11) - 88usize];
    ["Offset of field: __darwin_x86_thread_state64::__r12"]
        [::std::mem::offset_of!(__darwin_x86_thread_state64, __r12) - 96usize];
    ["Offset of field: __darwin_x86_thread_state64::__r13"]
        [::std::mem::offset_of!(__darwin_x86_thread_state64, __r13) - 104usize];
    ["Offset of field: __darwin_x86_thread_state64::__r14"]
        [::std::mem::offset_of!(__darwin_x86_thread_state64, __r14) - 112usize];
    ["Offset of field: __darwin_x86_thread_state64::__r15"]
        [::std::mem::offset_of!(__darwin_x86_thread_state64, __r15) - 120usize];
    ["Offset of field: __darwin_x86_thread_state64::__rip"]
        [::std::mem::offset_of!(__darwin_x86_thread_state64, __rip) - 128usize];
    ["Offset of field: __darwin_x86_thread_state64::__rflags"]
        [::std::mem::offset_of!(__darwin_x86_thread_state64, __rflags) - 136usize];
    ["Offset of field: __darwin_x86_thread_state64::__cs"]
        [::std::mem::offset_of!(__darwin_x86_thread_state64, __cs) - 144usize];
    ["Offset of field: __darwin_x86_thread_state64::__fs"]
        [::std::mem::offset_of!(__darwin_x86_thread_state64, __fs) - 152usize];
    ["Offset of field: __darwin_x86_thread_state64::__gs"]
        [::std::mem::offset_of!(__darwin_x86_thread_state64, __gs) - 160usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_thread_full_state64 {
    pub __ss64: __darwin_x86_thread_state64,
    pub __ds: __uint64_t,
    pub __es: __uint64_t,
    pub __ss: __uint64_t,
    pub __gsbase: __uint64_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_x86_thread_full_state64"]
        [::std::mem::size_of::<__darwin_x86_thread_full_state64>() - 200usize];
    ["Alignment of __darwin_x86_thread_full_state64"]
        [::std::mem::align_of::<__darwin_x86_thread_full_state64>() - 8usize];
    ["Offset of field: __darwin_x86_thread_full_state64::__ss64"]
        [::std::mem::offset_of!(__darwin_x86_thread_full_state64, __ss64) - 0usize];
    ["Offset of field: __darwin_x86_thread_full_state64::__ds"]
        [::std::mem::offset_of!(__darwin_x86_thread_full_state64, __ds) - 168usize];
    ["Offset of field: __darwin_x86_thread_full_state64::__es"]
        [::std::mem::offset_of!(__darwin_x86_thread_full_state64, __es) - 176usize];
    ["Offset of field: __darwin_x86_thread_full_state64::__ss"]
        [::std::mem::offset_of!(__darwin_x86_thread_full_state64, __ss) - 184usize];
    ["Offset of field: __darwin_x86_thread_full_state64::__gsbase"]
        [::std::mem::offset_of!(__darwin_x86_thread_full_state64, __gsbase) - 192usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_float_state64 {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_xmm8: __darwin_xmm_reg,
    pub __fpu_xmm9: __darwin_xmm_reg,
    pub __fpu_xmm10: __darwin_xmm_reg,
    pub __fpu_xmm11: __darwin_xmm_reg,
    pub __fpu_xmm12: __darwin_xmm_reg,
    pub __fpu_xmm13: __darwin_xmm_reg,
    pub __fpu_xmm14: __darwin_xmm_reg,
    pub __fpu_xmm15: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 96usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_x86_float_state64"]
        [::std::mem::size_of::<__darwin_x86_float_state64>() - 524usize];
    ["Alignment of __darwin_x86_float_state64"]
        [::std::mem::align_of::<__darwin_x86_float_state64>() - 4usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_reserved"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_reserved) - 0usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_fcw"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_fcw) - 8usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_fsw"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_fsw) - 10usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_ftw"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_ftw) - 12usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_rsrv1"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_rsrv1) - 13usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_fop"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_fop) - 14usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_ip"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_ip) - 16usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_cs"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_cs) - 20usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_rsrv2"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_rsrv2) - 22usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_dp"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_dp) - 24usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_ds"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_ds) - 28usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_rsrv3"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_rsrv3) - 30usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_mxcsr"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_mxcsr) - 32usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_mxcsrmask"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_mxcsrmask) - 36usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_stmm0"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_stmm0) - 40usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_stmm1"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_stmm1) - 56usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_stmm2"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_stmm2) - 72usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_stmm3"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_stmm3) - 88usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_stmm4"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_stmm4) - 104usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_stmm5"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_stmm5) - 120usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_stmm6"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_stmm6) - 136usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_stmm7"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_stmm7) - 152usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_xmm0"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_xmm0) - 168usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_xmm1"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_xmm1) - 184usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_xmm2"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_xmm2) - 200usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_xmm3"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_xmm3) - 216usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_xmm4"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_xmm4) - 232usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_xmm5"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_xmm5) - 248usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_xmm6"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_xmm6) - 264usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_xmm7"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_xmm7) - 280usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_xmm8"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_xmm8) - 296usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_xmm9"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_xmm9) - 312usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_xmm10"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_xmm10) - 328usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_xmm11"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_xmm11) - 344usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_xmm12"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_xmm12) - 360usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_xmm13"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_xmm13) - 376usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_xmm14"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_xmm14) - 392usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_xmm15"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_xmm15) - 408usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_rsrv4"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_rsrv4) - 424usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_reserved1"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_reserved1) - 520usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_avx_state64 {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_xmm8: __darwin_xmm_reg,
    pub __fpu_xmm9: __darwin_xmm_reg,
    pub __fpu_xmm10: __darwin_xmm_reg,
    pub __fpu_xmm11: __darwin_xmm_reg,
    pub __fpu_xmm12: __darwin_xmm_reg,
    pub __fpu_xmm13: __darwin_xmm_reg,
    pub __fpu_xmm14: __darwin_xmm_reg,
    pub __fpu_xmm15: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 96usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
    pub __fpu_ymmh8: __darwin_xmm_reg,
    pub __fpu_ymmh9: __darwin_xmm_reg,
    pub __fpu_ymmh10: __darwin_xmm_reg,
    pub __fpu_ymmh11: __darwin_xmm_reg,
    pub __fpu_ymmh12: __darwin_xmm_reg,
    pub __fpu_ymmh13: __darwin_xmm_reg,
    pub __fpu_ymmh14: __darwin_xmm_reg,
    pub __fpu_ymmh15: __darwin_xmm_reg,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_x86_avx_state64"]
        [::std::mem::size_of::<__darwin_x86_avx_state64>() - 844usize];
    ["Alignment of __darwin_x86_avx_state64"]
        [::std::mem::align_of::<__darwin_x86_avx_state64>() - 4usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_reserved"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_reserved) - 0usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_fcw"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_fcw) - 8usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_fsw"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_fsw) - 10usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_ftw"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_ftw) - 12usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_rsrv1"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_rsrv1) - 13usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_fop"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_fop) - 14usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_ip"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_ip) - 16usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_cs"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_cs) - 20usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_rsrv2"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_rsrv2) - 22usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_dp"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_dp) - 24usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_ds"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_ds) - 28usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_rsrv3"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_rsrv3) - 30usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_mxcsr"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_mxcsr) - 32usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_mxcsrmask"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_mxcsrmask) - 36usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_stmm0"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_stmm0) - 40usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_stmm1"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_stmm1) - 56usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_stmm2"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_stmm2) - 72usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_stmm3"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_stmm3) - 88usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_stmm4"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_stmm4) - 104usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_stmm5"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_stmm5) - 120usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_stmm6"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_stmm6) - 136usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_stmm7"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_stmm7) - 152usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_xmm0"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_xmm0) - 168usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_xmm1"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_xmm1) - 184usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_xmm2"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_xmm2) - 200usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_xmm3"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_xmm3) - 216usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_xmm4"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_xmm4) - 232usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_xmm5"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_xmm5) - 248usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_xmm6"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_xmm6) - 264usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_xmm7"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_xmm7) - 280usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_xmm8"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_xmm8) - 296usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_xmm9"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_xmm9) - 312usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_xmm10"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_xmm10) - 328usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_xmm11"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_xmm11) - 344usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_xmm12"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_xmm12) - 360usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_xmm13"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_xmm13) - 376usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_xmm14"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_xmm14) - 392usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_xmm15"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_xmm15) - 408usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_rsrv4"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_rsrv4) - 424usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_reserved1"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_reserved1) - 520usize];
    ["Offset of field: __darwin_x86_avx_state64::__avx_reserved1"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __avx_reserved1) - 524usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_ymmh0"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_ymmh0) - 588usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_ymmh1"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_ymmh1) - 604usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_ymmh2"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_ymmh2) - 620usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_ymmh3"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_ymmh3) - 636usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_ymmh4"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_ymmh4) - 652usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_ymmh5"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_ymmh5) - 668usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_ymmh6"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_ymmh6) - 684usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_ymmh7"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_ymmh7) - 700usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_ymmh8"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_ymmh8) - 716usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_ymmh9"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_ymmh9) - 732usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_ymmh10"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_ymmh10) - 748usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_ymmh11"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_ymmh11) - 764usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_ymmh12"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_ymmh12) - 780usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_ymmh13"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_ymmh13) - 796usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_ymmh14"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_ymmh14) - 812usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_ymmh15"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_ymmh15) - 828usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_avx512_state64 {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_xmm8: __darwin_xmm_reg,
    pub __fpu_xmm9: __darwin_xmm_reg,
    pub __fpu_xmm10: __darwin_xmm_reg,
    pub __fpu_xmm11: __darwin_xmm_reg,
    pub __fpu_xmm12: __darwin_xmm_reg,
    pub __fpu_xmm13: __darwin_xmm_reg,
    pub __fpu_xmm14: __darwin_xmm_reg,
    pub __fpu_xmm15: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 96usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
    pub __fpu_ymmh8: __darwin_xmm_reg,
    pub __fpu_ymmh9: __darwin_xmm_reg,
    pub __fpu_ymmh10: __darwin_xmm_reg,
    pub __fpu_ymmh11: __darwin_xmm_reg,
    pub __fpu_ymmh12: __darwin_xmm_reg,
    pub __fpu_ymmh13: __darwin_xmm_reg,
    pub __fpu_ymmh14: __darwin_xmm_reg,
    pub __fpu_ymmh15: __darwin_xmm_reg,
    pub __fpu_k0: __darwin_opmask_reg,
    pub __fpu_k1: __darwin_opmask_reg,
    pub __fpu_k2: __darwin_opmask_reg,
    pub __fpu_k3: __darwin_opmask_reg,
    pub __fpu_k4: __darwin_opmask_reg,
    pub __fpu_k5: __darwin_opmask_reg,
    pub __fpu_k6: __darwin_opmask_reg,
    pub __fpu_k7: __darwin_opmask_reg,
    pub __fpu_zmmh0: __darwin_ymm_reg,
    pub __fpu_zmmh1: __darwin_ymm_reg,
    pub __fpu_zmmh2: __darwin_ymm_reg,
    pub __fpu_zmmh3: __darwin_ymm_reg,
    pub __fpu_zmmh4: __darwin_ymm_reg,
    pub __fpu_zmmh5: __darwin_ymm_reg,
    pub __fpu_zmmh6: __darwin_ymm_reg,
    pub __fpu_zmmh7: __darwin_ymm_reg,
    pub __fpu_zmmh8: __darwin_ymm_reg,
    pub __fpu_zmmh9: __darwin_ymm_reg,
    pub __fpu_zmmh10: __darwin_ymm_reg,
    pub __fpu_zmmh11: __darwin_ymm_reg,
    pub __fpu_zmmh12: __darwin_ymm_reg,
    pub __fpu_zmmh13: __darwin_ymm_reg,
    pub __fpu_zmmh14: __darwin_ymm_reg,
    pub __fpu_zmmh15: __darwin_ymm_reg,
    pub __fpu_zmm16: __darwin_zmm_reg,
    pub __fpu_zmm17: __darwin_zmm_reg,
    pub __fpu_zmm18: __darwin_zmm_reg,
    pub __fpu_zmm19: __darwin_zmm_reg,
    pub __fpu_zmm20: __darwin_zmm_reg,
    pub __fpu_zmm21: __darwin_zmm_reg,
    pub __fpu_zmm22: __darwin_zmm_reg,
    pub __fpu_zmm23: __darwin_zmm_reg,
    pub __fpu_zmm24: __darwin_zmm_reg,
    pub __fpu_zmm25: __darwin_zmm_reg,
    pub __fpu_zmm26: __darwin_zmm_reg,
    pub __fpu_zmm27: __darwin_zmm_reg,
    pub __fpu_zmm28: __darwin_zmm_reg,
    pub __fpu_zmm29: __darwin_zmm_reg,
    pub __fpu_zmm30: __darwin_zmm_reg,
    pub __fpu_zmm31: __darwin_zmm_reg,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_x86_avx512_state64"]
        [::std::mem::size_of::<__darwin_x86_avx512_state64>() - 2444usize];
    ["Alignment of __darwin_x86_avx512_state64"]
        [::std::mem::align_of::<__darwin_x86_avx512_state64>() - 4usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_reserved"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_reserved) - 0usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_fcw"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_fcw) - 8usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_fsw"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_fsw) - 10usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_ftw"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_ftw) - 12usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_rsrv1"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_rsrv1) - 13usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_fop"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_fop) - 14usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_ip"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_ip) - 16usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_cs"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_cs) - 20usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_rsrv2"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_rsrv2) - 22usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_dp"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_dp) - 24usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_ds"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_ds) - 28usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_rsrv3"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_rsrv3) - 30usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_mxcsr"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_mxcsr) - 32usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_mxcsrmask"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_mxcsrmask) - 36usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_stmm0"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_stmm0) - 40usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_stmm1"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_stmm1) - 56usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_stmm2"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_stmm2) - 72usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_stmm3"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_stmm3) - 88usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_stmm4"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_stmm4) - 104usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_stmm5"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_stmm5) - 120usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_stmm6"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_stmm6) - 136usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_stmm7"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_stmm7) - 152usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_xmm0"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_xmm0) - 168usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_xmm1"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_xmm1) - 184usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_xmm2"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_xmm2) - 200usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_xmm3"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_xmm3) - 216usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_xmm4"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_xmm4) - 232usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_xmm5"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_xmm5) - 248usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_xmm6"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_xmm6) - 264usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_xmm7"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_xmm7) - 280usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_xmm8"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_xmm8) - 296usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_xmm9"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_xmm9) - 312usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_xmm10"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_xmm10) - 328usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_xmm11"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_xmm11) - 344usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_xmm12"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_xmm12) - 360usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_xmm13"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_xmm13) - 376usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_xmm14"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_xmm14) - 392usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_xmm15"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_xmm15) - 408usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_rsrv4"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_rsrv4) - 424usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_reserved1"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_reserved1) - 520usize];
    ["Offset of field: __darwin_x86_avx512_state64::__avx_reserved1"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __avx_reserved1) - 524usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_ymmh0"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_ymmh0) - 588usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_ymmh1"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_ymmh1) - 604usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_ymmh2"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_ymmh2) - 620usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_ymmh3"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_ymmh3) - 636usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_ymmh4"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_ymmh4) - 652usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_ymmh5"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_ymmh5) - 668usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_ymmh6"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_ymmh6) - 684usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_ymmh7"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_ymmh7) - 700usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_ymmh8"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_ymmh8) - 716usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_ymmh9"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_ymmh9) - 732usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_ymmh10"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_ymmh10) - 748usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_ymmh11"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_ymmh11) - 764usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_ymmh12"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_ymmh12) - 780usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_ymmh13"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_ymmh13) - 796usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_ymmh14"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_ymmh14) - 812usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_ymmh15"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_ymmh15) - 828usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_k0"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_k0) - 844usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_k1"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_k1) - 852usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_k2"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_k2) - 860usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_k3"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_k3) - 868usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_k4"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_k4) - 876usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_k5"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_k5) - 884usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_k6"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_k6) - 892usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_k7"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_k7) - 900usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmmh0"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmmh0) - 908usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmmh1"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmmh1) - 940usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmmh2"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmmh2) - 972usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmmh3"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmmh3) - 1004usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmmh4"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmmh4) - 1036usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmmh5"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmmh5) - 1068usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmmh6"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmmh6) - 1100usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmmh7"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmmh7) - 1132usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmmh8"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmmh8) - 1164usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmmh9"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmmh9) - 1196usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmmh10"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmmh10) - 1228usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmmh11"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmmh11) - 1260usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmmh12"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmmh12) - 1292usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmmh13"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmmh13) - 1324usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmmh14"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmmh14) - 1356usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmmh15"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmmh15) - 1388usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmm16"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmm16) - 1420usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmm17"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmm17) - 1484usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmm18"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmm18) - 1548usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmm19"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmm19) - 1612usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmm20"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmm20) - 1676usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmm21"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmm21) - 1740usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmm22"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmm22) - 1804usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmm23"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmm23) - 1868usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmm24"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmm24) - 1932usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmm25"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmm25) - 1996usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmm26"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmm26) - 2060usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmm27"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmm27) - 2124usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmm28"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmm28) - 2188usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmm29"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmm29) - 2252usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmm30"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmm30) - 2316usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmm31"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmm31) - 2380usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_exception_state64 {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint64_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_x86_exception_state64"]
        [::std::mem::size_of::<__darwin_x86_exception_state64>() - 16usize];
    ["Alignment of __darwin_x86_exception_state64"]
        [::std::mem::align_of::<__darwin_x86_exception_state64>() - 8usize];
    ["Offset of field: __darwin_x86_exception_state64::__trapno"]
        [::std::mem::offset_of!(__darwin_x86_exception_state64, __trapno) - 0usize];
    ["Offset of field: __darwin_x86_exception_state64::__cpu"]
        [::std::mem::offset_of!(__darwin_x86_exception_state64, __cpu) - 2usize];
    ["Offset of field: __darwin_x86_exception_state64::__err"]
        [::std::mem::offset_of!(__darwin_x86_exception_state64, __err) - 4usize];
    ["Offset of field: __darwin_x86_exception_state64::__faultvaddr"]
        [::std::mem::offset_of!(__darwin_x86_exception_state64, __faultvaddr) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_debug_state64 {
    pub __dr0: __uint64_t,
    pub __dr1: __uint64_t,
    pub __dr2: __uint64_t,
    pub __dr3: __uint64_t,
    pub __dr4: __uint64_t,
    pub __dr5: __uint64_t,
    pub __dr6: __uint64_t,
    pub __dr7: __uint64_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_x86_debug_state64"]
        [::std::mem::size_of::<__darwin_x86_debug_state64>() - 64usize];
    ["Alignment of __darwin_x86_debug_state64"]
        [::std::mem::align_of::<__darwin_x86_debug_state64>() - 8usize];
    ["Offset of field: __darwin_x86_debug_state64::__dr0"]
        [::std::mem::offset_of!(__darwin_x86_debug_state64, __dr0) - 0usize];
    ["Offset of field: __darwin_x86_debug_state64::__dr1"]
        [::std::mem::offset_of!(__darwin_x86_debug_state64, __dr1) - 8usize];
    ["Offset of field: __darwin_x86_debug_state64::__dr2"]
        [::std::mem::offset_of!(__darwin_x86_debug_state64, __dr2) - 16usize];
    ["Offset of field: __darwin_x86_debug_state64::__dr3"]
        [::std::mem::offset_of!(__darwin_x86_debug_state64, __dr3) - 24usize];
    ["Offset of field: __darwin_x86_debug_state64::__dr4"]
        [::std::mem::offset_of!(__darwin_x86_debug_state64, __dr4) - 32usize];
    ["Offset of field: __darwin_x86_debug_state64::__dr5"]
        [::std::mem::offset_of!(__darwin_x86_debug_state64, __dr5) - 40usize];
    ["Offset of field: __darwin_x86_debug_state64::__dr6"]
        [::std::mem::offset_of!(__darwin_x86_debug_state64, __dr6) - 48usize];
    ["Offset of field: __darwin_x86_debug_state64::__dr7"]
        [::std::mem::offset_of!(__darwin_x86_debug_state64, __dr7) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_cpmu_state64 {
    pub __ctrs: [__uint64_t; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_x86_cpmu_state64"]
        [::std::mem::size_of::<__darwin_x86_cpmu_state64>() - 128usize];
    ["Alignment of __darwin_x86_cpmu_state64"]
        [::std::mem::align_of::<__darwin_x86_cpmu_state64>() - 8usize];
    ["Offset of field: __darwin_x86_cpmu_state64::__ctrs"]
        [::std::mem::offset_of!(__darwin_x86_cpmu_state64, __ctrs) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext32 {
    pub __es: __darwin_i386_exception_state,
    pub __ss: __darwin_i386_thread_state,
    pub __fs: __darwin_i386_float_state,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_mcontext32"][::std::mem::size_of::<__darwin_mcontext32>() - 600usize];
    ["Alignment of __darwin_mcontext32"][::std::mem::align_of::<__darwin_mcontext32>() - 4usize];
    ["Offset of field: __darwin_mcontext32::__es"]
        [::std::mem::offset_of!(__darwin_mcontext32, __es) - 0usize];
    ["Offset of field: __darwin_mcontext32::__ss"]
        [::std::mem::offset_of!(__darwin_mcontext32, __ss) - 12usize];
    ["Offset of field: __darwin_mcontext32::__fs"]
        [::std::mem::offset_of!(__darwin_mcontext32, __fs) - 76usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext_avx32 {
    pub __es: __darwin_i386_exception_state,
    pub __ss: __darwin_i386_thread_state,
    pub __fs: __darwin_i386_avx_state,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_mcontext_avx32"]
        [::std::mem::size_of::<__darwin_mcontext_avx32>() - 792usize];
    ["Alignment of __darwin_mcontext_avx32"]
        [::std::mem::align_of::<__darwin_mcontext_avx32>() - 4usize];
    ["Offset of field: __darwin_mcontext_avx32::__es"]
        [::std::mem::offset_of!(__darwin_mcontext_avx32, __es) - 0usize];
    ["Offset of field: __darwin_mcontext_avx32::__ss"]
        [::std::mem::offset_of!(__darwin_mcontext_avx32, __ss) - 12usize];
    ["Offset of field: __darwin_mcontext_avx32::__fs"]
        [::std::mem::offset_of!(__darwin_mcontext_avx32, __fs) - 76usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext_avx512_32 {
    pub __es: __darwin_i386_exception_state,
    pub __ss: __darwin_i386_thread_state,
    pub __fs: __darwin_i386_avx512_state,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_mcontext_avx512_32"]
        [::std::mem::size_of::<__darwin_mcontext_avx512_32>() - 1112usize];
    ["Alignment of __darwin_mcontext_avx512_32"]
        [::std::mem::align_of::<__darwin_mcontext_avx512_32>() - 4usize];
    ["Offset of field: __darwin_mcontext_avx512_32::__es"]
        [::std::mem::offset_of!(__darwin_mcontext_avx512_32, __es) - 0usize];
    ["Offset of field: __darwin_mcontext_avx512_32::__ss"]
        [::std::mem::offset_of!(__darwin_mcontext_avx512_32, __ss) - 12usize];
    ["Offset of field: __darwin_mcontext_avx512_32::__fs"]
        [::std::mem::offset_of!(__darwin_mcontext_avx512_32, __fs) - 76usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext64 {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_state64,
    pub __fs: __darwin_x86_float_state64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_mcontext64"][::std::mem::size_of::<__darwin_mcontext64>() - 712usize];
    ["Alignment of __darwin_mcontext64"][::std::mem::align_of::<__darwin_mcontext64>() - 8usize];
    ["Offset of field: __darwin_mcontext64::__es"]
        [::std::mem::offset_of!(__darwin_mcontext64, __es) - 0usize];
    ["Offset of field: __darwin_mcontext64::__ss"]
        [::std::mem::offset_of!(__darwin_mcontext64, __ss) - 16usize];
    ["Offset of field: __darwin_mcontext64::__fs"]
        [::std::mem::offset_of!(__darwin_mcontext64, __fs) - 184usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext64_full {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_full_state64,
    pub __fs: __darwin_x86_float_state64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_mcontext64_full"]
        [::std::mem::size_of::<__darwin_mcontext64_full>() - 744usize];
    ["Alignment of __darwin_mcontext64_full"]
        [::std::mem::align_of::<__darwin_mcontext64_full>() - 8usize];
    ["Offset of field: __darwin_mcontext64_full::__es"]
        [::std::mem::offset_of!(__darwin_mcontext64_full, __es) - 0usize];
    ["Offset of field: __darwin_mcontext64_full::__ss"]
        [::std::mem::offset_of!(__darwin_mcontext64_full, __ss) - 16usize];
    ["Offset of field: __darwin_mcontext64_full::__fs"]
        [::std::mem::offset_of!(__darwin_mcontext64_full, __fs) - 216usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext_avx64 {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_state64,
    pub __fs: __darwin_x86_avx_state64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_mcontext_avx64"]
        [::std::mem::size_of::<__darwin_mcontext_avx64>() - 1032usize];
    ["Alignment of __darwin_mcontext_avx64"]
        [::std::mem::align_of::<__darwin_mcontext_avx64>() - 8usize];
    ["Offset of field: __darwin_mcontext_avx64::__es"]
        [::std::mem::offset_of!(__darwin_mcontext_avx64, __es) - 0usize];
    ["Offset of field: __darwin_mcontext_avx64::__ss"]
        [::std::mem::offset_of!(__darwin_mcontext_avx64, __ss) - 16usize];
    ["Offset of field: __darwin_mcontext_avx64::__fs"]
        [::std::mem::offset_of!(__darwin_mcontext_avx64, __fs) - 184usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext_avx64_full {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_full_state64,
    pub __fs: __darwin_x86_avx_state64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_mcontext_avx64_full"]
        [::std::mem::size_of::<__darwin_mcontext_avx64_full>() - 1064usize];
    ["Alignment of __darwin_mcontext_avx64_full"]
        [::std::mem::align_of::<__darwin_mcontext_avx64_full>() - 8usize];
    ["Offset of field: __darwin_mcontext_avx64_full::__es"]
        [::std::mem::offset_of!(__darwin_mcontext_avx64_full, __es) - 0usize];
    ["Offset of field: __darwin_mcontext_avx64_full::__ss"]
        [::std::mem::offset_of!(__darwin_mcontext_avx64_full, __ss) - 16usize];
    ["Offset of field: __darwin_mcontext_avx64_full::__fs"]
        [::std::mem::offset_of!(__darwin_mcontext_avx64_full, __fs) - 216usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext_avx512_64 {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_state64,
    pub __fs: __darwin_x86_avx512_state64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_mcontext_avx512_64"]
        [::std::mem::size_of::<__darwin_mcontext_avx512_64>() - 2632usize];
    ["Alignment of __darwin_mcontext_avx512_64"]
        [::std::mem::align_of::<__darwin_mcontext_avx512_64>() - 8usize];
    ["Offset of field: __darwin_mcontext_avx512_64::__es"]
        [::std::mem::offset_of!(__darwin_mcontext_avx512_64, __es) - 0usize];
    ["Offset of field: __darwin_mcontext_avx512_64::__ss"]
        [::std::mem::offset_of!(__darwin_mcontext_avx512_64, __ss) - 16usize];
    ["Offset of field: __darwin_mcontext_avx512_64::__fs"]
        [::std::mem::offset_of!(__darwin_mcontext_avx512_64, __fs) - 184usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext_avx512_64_full {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_full_state64,
    pub __fs: __darwin_x86_avx512_state64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_mcontext_avx512_64_full"]
        [::std::mem::size_of::<__darwin_mcontext_avx512_64_full>() - 2664usize];
    ["Alignment of __darwin_mcontext_avx512_64_full"]
        [::std::mem::align_of::<__darwin_mcontext_avx512_64_full>() - 8usize];
    ["Offset of field: __darwin_mcontext_avx512_64_full::__es"]
        [::std::mem::offset_of!(__darwin_mcontext_avx512_64_full, __es) - 0usize];
    ["Offset of field: __darwin_mcontext_avx512_64_full::__ss"]
        [::std::mem::offset_of!(__darwin_mcontext_avx512_64_full, __ss) - 16usize];
    ["Offset of field: __darwin_mcontext_avx512_64_full::__fs"]
        [::std::mem::offset_of!(__darwin_mcontext_avx512_64_full, __fs) - 216usize];
};
pub type mcontext_t = *mut __darwin_mcontext64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_sigaltstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_size: __darwin_size_t,
    pub ss_flags: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_sigaltstack"][::std::mem::size_of::<__darwin_sigaltstack>() - 24usize];
    ["Alignment of __darwin_sigaltstack"][::std::mem::align_of::<__darwin_sigaltstack>() - 8usize];
    ["Offset of field: __darwin_sigaltstack::ss_sp"]
        [::std::mem::offset_of!(__darwin_sigaltstack, ss_sp) - 0usize];
    ["Offset of field: __darwin_sigaltstack::ss_size"]
        [::std::mem::offset_of!(__darwin_sigaltstack, ss_size) - 8usize];
    ["Offset of field: __darwin_sigaltstack::ss_flags"]
        [::std::mem::offset_of!(__darwin_sigaltstack, ss_flags) - 16usize];
};
pub type stack_t = __darwin_sigaltstack;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_ucontext {
    pub uc_onstack: ::std::os::raw::c_int,
    pub uc_sigmask: __darwin_sigset_t,
    pub uc_stack: __darwin_sigaltstack,
    pub uc_link: *mut __darwin_ucontext,
    pub uc_mcsize: __darwin_size_t,
    pub uc_mcontext: *mut __darwin_mcontext64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_ucontext"][::std::mem::size_of::<__darwin_ucontext>() - 56usize];
    ["Alignment of __darwin_ucontext"][::std::mem::align_of::<__darwin_ucontext>() - 8usize];
    ["Offset of field: __darwin_ucontext::uc_onstack"]
        [::std::mem::offset_of!(__darwin_ucontext, uc_onstack) - 0usize];
    ["Offset of field: __darwin_ucontext::uc_sigmask"]
        [::std::mem::offset_of!(__darwin_ucontext, uc_sigmask) - 4usize];
    ["Offset of field: __darwin_ucontext::uc_stack"]
        [::std::mem::offset_of!(__darwin_ucontext, uc_stack) - 8usize];
    ["Offset of field: __darwin_ucontext::uc_link"]
        [::std::mem::offset_of!(__darwin_ucontext, uc_link) - 32usize];
    ["Offset of field: __darwin_ucontext::uc_mcsize"]
        [::std::mem::offset_of!(__darwin_ucontext, uc_mcsize) - 40usize];
    ["Offset of field: __darwin_ucontext::uc_mcontext"]
        [::std::mem::offset_of!(__darwin_ucontext, uc_mcontext) - 48usize];
};
pub type ucontext_t = __darwin_ucontext;
pub type sigset_t = __darwin_sigset_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigval {
    pub sival_int: ::std::os::raw::c_int,
    pub sival_ptr: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigval"][::std::mem::size_of::<sigval>() - 8usize];
    ["Alignment of sigval"][::std::mem::align_of::<sigval>() - 8usize];
    ["Offset of field: sigval::sival_int"][::std::mem::offset_of!(sigval, sival_int) - 0usize];
    ["Offset of field: sigval::sival_ptr"][::std::mem::offset_of!(sigval, sival_ptr) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigevent {
    pub sigev_notify: ::std::os::raw::c_int,
    pub sigev_signo: ::std::os::raw::c_int,
    pub sigev_value: sigval,
    pub sigev_notify_function: ::std::option::Option<unsafe extern "C" fn(arg1: sigval)>,
    pub sigev_notify_attributes: *mut pthread_attr_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigevent"][::std::mem::size_of::<sigevent>() - 32usize];
    ["Alignment of sigevent"][::std::mem::align_of::<sigevent>() - 8usize];
    ["Offset of field: sigevent::sigev_notify"]
        [::std::mem::offset_of!(sigevent, sigev_notify) - 0usize];
    ["Offset of field: sigevent::sigev_signo"]
        [::std::mem::offset_of!(sigevent, sigev_signo) - 4usize];
    ["Offset of field: sigevent::sigev_value"]
        [::std::mem::offset_of!(sigevent, sigev_value) - 8usize];
    ["Offset of field: sigevent::sigev_notify_function"]
        [::std::mem::offset_of!(sigevent, sigev_notify_function) - 16usize];
    ["Offset of field: sigevent::sigev_notify_attributes"]
        [::std::mem::offset_of!(sigevent, sigev_notify_attributes) - 24usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __siginfo {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub si_pid: pid_t,
    pub si_uid: uid_t,
    pub si_status: ::std::os::raw::c_int,
    pub si_addr: *mut ::std::os::raw::c_void,
    pub si_value: sigval,
    pub si_band: ::std::os::raw::c_long,
    pub __pad: [::std::os::raw::c_ulong; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __siginfo"][::std::mem::size_of::<__siginfo>() - 104usize];
    ["Alignment of __siginfo"][::std::mem::align_of::<__siginfo>() - 8usize];
    ["Offset of field: __siginfo::si_signo"][::std::mem::offset_of!(__siginfo, si_signo) - 0usize];
    ["Offset of field: __siginfo::si_errno"][::std::mem::offset_of!(__siginfo, si_errno) - 4usize];
    ["Offset of field: __siginfo::si_code"][::std::mem::offset_of!(__siginfo, si_code) - 8usize];
    ["Offset of field: __siginfo::si_pid"][::std::mem::offset_of!(__siginfo, si_pid) - 12usize];
    ["Offset of field: __siginfo::si_uid"][::std::mem::offset_of!(__siginfo, si_uid) - 16usize];
    ["Offset of field: __siginfo::si_status"]
        [::std::mem::offset_of!(__siginfo, si_status) - 20usize];
    ["Offset of field: __siginfo::si_addr"][::std::mem::offset_of!(__siginfo, si_addr) - 24usize];
    ["Offset of field: __siginfo::si_value"][::std::mem::offset_of!(__siginfo, si_value) - 32usize];
    ["Offset of field: __siginfo::si_band"][::std::mem::offset_of!(__siginfo, si_band) - 40usize];
    ["Offset of field: __siginfo::__pad"][::std::mem::offset_of!(__siginfo, __pad) - 48usize];
};
pub type siginfo_t = __siginfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __sigaction_u {
    pub __sa_handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub __sa_sigaction: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut __siginfo,
            arg3: *mut ::std::os::raw::c_void,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sigaction_u"][::std::mem::size_of::<__sigaction_u>() - 8usize];
    ["Alignment of __sigaction_u"][::std::mem::align_of::<__sigaction_u>() - 8usize];
    ["Offset of field: __sigaction_u::__sa_handler"]
        [::std::mem::offset_of!(__sigaction_u, __sa_handler) - 0usize];
    ["Offset of field: __sigaction_u::__sa_sigaction"]
        [::std::mem::offset_of!(__sigaction_u, __sa_sigaction) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_tramp: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
            arg4: *mut siginfo_t,
            arg5: *mut ::std::os::raw::c_void,
        ),
    >,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sigaction"][::std::mem::size_of::<__sigaction>() - 24usize];
    ["Alignment of __sigaction"][::std::mem::align_of::<__sigaction>() - 8usize];
    ["Offset of field: __sigaction::__sigaction_u"]
        [::std::mem::offset_of!(__sigaction, __sigaction_u) - 0usize];
    ["Offset of field: __sigaction::sa_tramp"]
        [::std::mem::offset_of!(__sigaction, sa_tramp) - 8usize];
    ["Offset of field: __sigaction::sa_mask"]
        [::std::mem::offset_of!(__sigaction, sa_mask) - 16usize];
    ["Offset of field: __sigaction::sa_flags"]
        [::std::mem::offset_of!(__sigaction, sa_flags) - 20usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigaction"][::std::mem::size_of::<sigaction>() - 16usize];
    ["Alignment of sigaction"][::std::mem::align_of::<sigaction>() - 8usize];
    ["Offset of field: sigaction::__sigaction_u"]
        [::std::mem::offset_of!(sigaction, __sigaction_u) - 0usize];
    ["Offset of field: sigaction::sa_mask"][::std::mem::offset_of!(sigaction, sa_mask) - 8usize];
    ["Offset of field: sigaction::sa_flags"][::std::mem::offset_of!(sigaction, sa_flags) - 12usize];
};
pub type sig_t = ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigvec {
    pub sv_handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub sv_mask: ::std::os::raw::c_int,
    pub sv_flags: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigvec"][::std::mem::size_of::<sigvec>() - 16usize];
    ["Alignment of sigvec"][::std::mem::align_of::<sigvec>() - 8usize];
    ["Offset of field: sigvec::sv_handler"][::std::mem::offset_of!(sigvec, sv_handler) - 0usize];
    ["Offset of field: sigvec::sv_mask"][::std::mem::offset_of!(sigvec, sv_mask) - 8usize];
    ["Offset of field: sigvec::sv_flags"][::std::mem::offset_of!(sigvec, sv_flags) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigstack {
    pub ss_sp: *mut ::std::os::raw::c_char,
    pub ss_onstack: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigstack"][::std::mem::size_of::<sigstack>() - 16usize];
    ["Alignment of sigstack"][::std::mem::align_of::<sigstack>() - 8usize];
    ["Offset of field: sigstack::ss_sp"][::std::mem::offset_of!(sigstack, ss_sp) - 0usize];
    ["Offset of field: sigstack::ss_onstack"]
        [::std::mem::offset_of!(sigstack, ss_onstack) - 8usize];
};
unsafe extern "C" {
    pub fn signal(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
        ),
    >;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __darwin_time_t,
    pub tv_usec: __darwin_suseconds_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timeval"][::std::mem::size_of::<timeval>() - 16usize];
    ["Alignment of timeval"][::std::mem::align_of::<timeval>() - 8usize];
    ["Offset of field: timeval::tv_sec"][::std::mem::offset_of!(timeval, tv_sec) - 0usize];
    ["Offset of field: timeval::tv_usec"][::std::mem::offset_of!(timeval, tv_usec) - 8usize];
};
pub type rlim_t = __uint64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage {
    pub ru_utime: timeval,
    pub ru_stime: timeval,
    pub ru_maxrss: ::std::os::raw::c_long,
    pub ru_ixrss: ::std::os::raw::c_long,
    pub ru_idrss: ::std::os::raw::c_long,
    pub ru_isrss: ::std::os::raw::c_long,
    pub ru_minflt: ::std::os::raw::c_long,
    pub ru_majflt: ::std::os::raw::c_long,
    pub ru_nswap: ::std::os::raw::c_long,
    pub ru_inblock: ::std::os::raw::c_long,
    pub ru_oublock: ::std::os::raw::c_long,
    pub ru_msgsnd: ::std::os::raw::c_long,
    pub ru_msgrcv: ::std::os::raw::c_long,
    pub ru_nsignals: ::std::os::raw::c_long,
    pub ru_nvcsw: ::std::os::raw::c_long,
    pub ru_nivcsw: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage"][::std::mem::size_of::<rusage>() - 144usize];
    ["Alignment of rusage"][::std::mem::align_of::<rusage>() - 8usize];
    ["Offset of field: rusage::ru_utime"][::std::mem::offset_of!(rusage, ru_utime) - 0usize];
    ["Offset of field: rusage::ru_stime"][::std::mem::offset_of!(rusage, ru_stime) - 16usize];
    ["Offset of field: rusage::ru_maxrss"][::std::mem::offset_of!(rusage, ru_maxrss) - 32usize];
    ["Offset of field: rusage::ru_ixrss"][::std::mem::offset_of!(rusage, ru_ixrss) - 40usize];
    ["Offset of field: rusage::ru_idrss"][::std::mem::offset_of!(rusage, ru_idrss) - 48usize];
    ["Offset of field: rusage::ru_isrss"][::std::mem::offset_of!(rusage, ru_isrss) - 56usize];
    ["Offset of field: rusage::ru_minflt"][::std::mem::offset_of!(rusage, ru_minflt) - 64usize];
    ["Offset of field: rusage::ru_majflt"][::std::mem::offset_of!(rusage, ru_majflt) - 72usize];
    ["Offset of field: rusage::ru_nswap"][::std::mem::offset_of!(rusage, ru_nswap) - 80usize];
    ["Offset of field: rusage::ru_inblock"][::std::mem::offset_of!(rusage, ru_inblock) - 88usize];
    ["Offset of field: rusage::ru_oublock"][::std::mem::offset_of!(rusage, ru_oublock) - 96usize];
    ["Offset of field: rusage::ru_msgsnd"][::std::mem::offset_of!(rusage, ru_msgsnd) - 104usize];
    ["Offset of field: rusage::ru_msgrcv"][::std::mem::offset_of!(rusage, ru_msgrcv) - 112usize];
    ["Offset of field: rusage::ru_nsignals"]
        [::std::mem::offset_of!(rusage, ru_nsignals) - 120usize];
    ["Offset of field: rusage::ru_nvcsw"][::std::mem::offset_of!(rusage, ru_nvcsw) - 128usize];
    ["Offset of field: rusage::ru_nivcsw"][::std::mem::offset_of!(rusage, ru_nivcsw) - 136usize];
};
pub type rusage_info_t = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v0 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage_info_v0"][::std::mem::size_of::<rusage_info_v0>() - 96usize];
    ["Alignment of rusage_info_v0"][::std::mem::align_of::<rusage_info_v0>() - 8usize];
    ["Offset of field: rusage_info_v0::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v0, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v0::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v0, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v0::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v0, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v0::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v0, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v0::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v0, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v0::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v0, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v0::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v0, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v0::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v0, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v0::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v0, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v0::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v0, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v0::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v0, ri_proc_exit_abstime) - 88usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v1 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage_info_v1"][::std::mem::size_of::<rusage_info_v1>() - 144usize];
    ["Alignment of rusage_info_v1"][::std::mem::align_of::<rusage_info_v1>() - 8usize];
    ["Offset of field: rusage_info_v1::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v1, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v1::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v1, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v1::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v1, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v1::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v1, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v1::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v1, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v1::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v1, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v1::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v1, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v1::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v1, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v1::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v1, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v1::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v1, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v1::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v1, ri_proc_exit_abstime) - 88usize];
    ["Offset of field: rusage_info_v1::ri_child_user_time"]
        [::std::mem::offset_of!(rusage_info_v1, ri_child_user_time) - 96usize];
    ["Offset of field: rusage_info_v1::ri_child_system_time"]
        [::std::mem::offset_of!(rusage_info_v1, ri_child_system_time) - 104usize];
    ["Offset of field: rusage_info_v1::ri_child_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v1, ri_child_pkg_idle_wkups) - 112usize];
    ["Offset of field: rusage_info_v1::ri_child_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v1, ri_child_interrupt_wkups) - 120usize];
    ["Offset of field: rusage_info_v1::ri_child_pageins"]
        [::std::mem::offset_of!(rusage_info_v1, ri_child_pageins) - 128usize];
    ["Offset of field: rusage_info_v1::ri_child_elapsed_abstime"]
        [::std::mem::offset_of!(rusage_info_v1, ri_child_elapsed_abstime) - 136usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v2 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage_info_v2"][::std::mem::size_of::<rusage_info_v2>() - 160usize];
    ["Alignment of rusage_info_v2"][::std::mem::align_of::<rusage_info_v2>() - 8usize];
    ["Offset of field: rusage_info_v2::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v2, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v2::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v2, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v2::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v2, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v2::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v2, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v2::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v2, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v2::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v2, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v2::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v2, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v2::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v2, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v2::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v2, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v2::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v2, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v2::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v2, ri_proc_exit_abstime) - 88usize];
    ["Offset of field: rusage_info_v2::ri_child_user_time"]
        [::std::mem::offset_of!(rusage_info_v2, ri_child_user_time) - 96usize];
    ["Offset of field: rusage_info_v2::ri_child_system_time"]
        [::std::mem::offset_of!(rusage_info_v2, ri_child_system_time) - 104usize];
    ["Offset of field: rusage_info_v2::ri_child_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v2, ri_child_pkg_idle_wkups) - 112usize];
    ["Offset of field: rusage_info_v2::ri_child_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v2, ri_child_interrupt_wkups) - 120usize];
    ["Offset of field: rusage_info_v2::ri_child_pageins"]
        [::std::mem::offset_of!(rusage_info_v2, ri_child_pageins) - 128usize];
    ["Offset of field: rusage_info_v2::ri_child_elapsed_abstime"]
        [::std::mem::offset_of!(rusage_info_v2, ri_child_elapsed_abstime) - 136usize];
    ["Offset of field: rusage_info_v2::ri_diskio_bytesread"]
        [::std::mem::offset_of!(rusage_info_v2, ri_diskio_bytesread) - 144usize];
    ["Offset of field: rusage_info_v2::ri_diskio_byteswritten"]
        [::std::mem::offset_of!(rusage_info_v2, ri_diskio_byteswritten) - 152usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v3 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage_info_v3"][::std::mem::size_of::<rusage_info_v3>() - 232usize];
    ["Alignment of rusage_info_v3"][::std::mem::align_of::<rusage_info_v3>() - 8usize];
    ["Offset of field: rusage_info_v3::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v3, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v3::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v3, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v3::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v3, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v3::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v3, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v3::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v3, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v3::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v3, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v3::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v3, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v3::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v3, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v3::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v3, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v3::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v3, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v3::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v3, ri_proc_exit_abstime) - 88usize];
    ["Offset of field: rusage_info_v3::ri_child_user_time"]
        [::std::mem::offset_of!(rusage_info_v3, ri_child_user_time) - 96usize];
    ["Offset of field: rusage_info_v3::ri_child_system_time"]
        [::std::mem::offset_of!(rusage_info_v3, ri_child_system_time) - 104usize];
    ["Offset of field: rusage_info_v3::ri_child_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v3, ri_child_pkg_idle_wkups) - 112usize];
    ["Offset of field: rusage_info_v3::ri_child_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v3, ri_child_interrupt_wkups) - 120usize];
    ["Offset of field: rusage_info_v3::ri_child_pageins"]
        [::std::mem::offset_of!(rusage_info_v3, ri_child_pageins) - 128usize];
    ["Offset of field: rusage_info_v3::ri_child_elapsed_abstime"]
        [::std::mem::offset_of!(rusage_info_v3, ri_child_elapsed_abstime) - 136usize];
    ["Offset of field: rusage_info_v3::ri_diskio_bytesread"]
        [::std::mem::offset_of!(rusage_info_v3, ri_diskio_bytesread) - 144usize];
    ["Offset of field: rusage_info_v3::ri_diskio_byteswritten"]
        [::std::mem::offset_of!(rusage_info_v3, ri_diskio_byteswritten) - 152usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_default"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_default) - 160usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_maintenance"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_maintenance) - 168usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_background"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_background) - 176usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_utility"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_utility) - 184usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_legacy"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_legacy) - 192usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_user_initiated"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_user_initiated) - 200usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_user_interactive"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_user_interactive) - 208usize];
    ["Offset of field: rusage_info_v3::ri_billed_system_time"]
        [::std::mem::offset_of!(rusage_info_v3, ri_billed_system_time) - 216usize];
    ["Offset of field: rusage_info_v3::ri_serviced_system_time"]
        [::std::mem::offset_of!(rusage_info_v3, ri_serviced_system_time) - 224usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v4 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage_info_v4"][::std::mem::size_of::<rusage_info_v4>() - 296usize];
    ["Alignment of rusage_info_v4"][::std::mem::align_of::<rusage_info_v4>() - 8usize];
    ["Offset of field: rusage_info_v4::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v4, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v4::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v4::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v4::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v4, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v4::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v4, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v4::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v4, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v4::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v4, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v4::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v4, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v4::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v4, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v4::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v4, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v4::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v4, ri_proc_exit_abstime) - 88usize];
    ["Offset of field: rusage_info_v4::ri_child_user_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_child_user_time) - 96usize];
    ["Offset of field: rusage_info_v4::ri_child_system_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_child_system_time) - 104usize];
    ["Offset of field: rusage_info_v4::ri_child_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v4, ri_child_pkg_idle_wkups) - 112usize];
    ["Offset of field: rusage_info_v4::ri_child_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v4, ri_child_interrupt_wkups) - 120usize];
    ["Offset of field: rusage_info_v4::ri_child_pageins"]
        [::std::mem::offset_of!(rusage_info_v4, ri_child_pageins) - 128usize];
    ["Offset of field: rusage_info_v4::ri_child_elapsed_abstime"]
        [::std::mem::offset_of!(rusage_info_v4, ri_child_elapsed_abstime) - 136usize];
    ["Offset of field: rusage_info_v4::ri_diskio_bytesread"]
        [::std::mem::offset_of!(rusage_info_v4, ri_diskio_bytesread) - 144usize];
    ["Offset of field: rusage_info_v4::ri_diskio_byteswritten"]
        [::std::mem::offset_of!(rusage_info_v4, ri_diskio_byteswritten) - 152usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_default"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_default) - 160usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_maintenance"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_maintenance) - 168usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_background"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_background) - 176usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_utility"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_utility) - 184usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_legacy"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_legacy) - 192usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_user_initiated"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_user_initiated) - 200usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_user_interactive"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_user_interactive) - 208usize];
    ["Offset of field: rusage_info_v4::ri_billed_system_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_billed_system_time) - 216usize];
    ["Offset of field: rusage_info_v4::ri_serviced_system_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_serviced_system_time) - 224usize];
    ["Offset of field: rusage_info_v4::ri_logical_writes"]
        [::std::mem::offset_of!(rusage_info_v4, ri_logical_writes) - 232usize];
    ["Offset of field: rusage_info_v4::ri_lifetime_max_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v4, ri_lifetime_max_phys_footprint) - 240usize];
    ["Offset of field: rusage_info_v4::ri_instructions"]
        [::std::mem::offset_of!(rusage_info_v4, ri_instructions) - 248usize];
    ["Offset of field: rusage_info_v4::ri_cycles"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cycles) - 256usize];
    ["Offset of field: rusage_info_v4::ri_billed_energy"]
        [::std::mem::offset_of!(rusage_info_v4, ri_billed_energy) - 264usize];
    ["Offset of field: rusage_info_v4::ri_serviced_energy"]
        [::std::mem::offset_of!(rusage_info_v4, ri_serviced_energy) - 272usize];
    ["Offset of field: rusage_info_v4::ri_interval_max_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v4, ri_interval_max_phys_footprint) - 280usize];
    ["Offset of field: rusage_info_v4::ri_runnable_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_runnable_time) - 288usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v5 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
    pub ri_flags: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage_info_v5"][::std::mem::size_of::<rusage_info_v5>() - 304usize];
    ["Alignment of rusage_info_v5"][::std::mem::align_of::<rusage_info_v5>() - 8usize];
    ["Offset of field: rusage_info_v5::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v5, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v5::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v5::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v5::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v5, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v5::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v5, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v5::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v5, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v5::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v5, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v5::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v5, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v5::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v5, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v5::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v5, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v5::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v5, ri_proc_exit_abstime) - 88usize];
    ["Offset of field: rusage_info_v5::ri_child_user_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_child_user_time) - 96usize];
    ["Offset of field: rusage_info_v5::ri_child_system_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_child_system_time) - 104usize];
    ["Offset of field: rusage_info_v5::ri_child_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v5, ri_child_pkg_idle_wkups) - 112usize];
    ["Offset of field: rusage_info_v5::ri_child_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v5, ri_child_interrupt_wkups) - 120usize];
    ["Offset of field: rusage_info_v5::ri_child_pageins"]
        [::std::mem::offset_of!(rusage_info_v5, ri_child_pageins) - 128usize];
    ["Offset of field: rusage_info_v5::ri_child_elapsed_abstime"]
        [::std::mem::offset_of!(rusage_info_v5, ri_child_elapsed_abstime) - 136usize];
    ["Offset of field: rusage_info_v5::ri_diskio_bytesread"]
        [::std::mem::offset_of!(rusage_info_v5, ri_diskio_bytesread) - 144usize];
    ["Offset of field: rusage_info_v5::ri_diskio_byteswritten"]
        [::std::mem::offset_of!(rusage_info_v5, ri_diskio_byteswritten) - 152usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_default"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_default) - 160usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_maintenance"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_maintenance) - 168usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_background"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_background) - 176usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_utility"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_utility) - 184usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_legacy"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_legacy) - 192usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_user_initiated"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_user_initiated) - 200usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_user_interactive"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_user_interactive) - 208usize];
    ["Offset of field: rusage_info_v5::ri_billed_system_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_billed_system_time) - 216usize];
    ["Offset of field: rusage_info_v5::ri_serviced_system_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_serviced_system_time) - 224usize];
    ["Offset of field: rusage_info_v5::ri_logical_writes"]
        [::std::mem::offset_of!(rusage_info_v5, ri_logical_writes) - 232usize];
    ["Offset of field: rusage_info_v5::ri_lifetime_max_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v5, ri_lifetime_max_phys_footprint) - 240usize];
    ["Offset of field: rusage_info_v5::ri_instructions"]
        [::std::mem::offset_of!(rusage_info_v5, ri_instructions) - 248usize];
    ["Offset of field: rusage_info_v5::ri_cycles"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cycles) - 256usize];
    ["Offset of field: rusage_info_v5::ri_billed_energy"]
        [::std::mem::offset_of!(rusage_info_v5, ri_billed_energy) - 264usize];
    ["Offset of field: rusage_info_v5::ri_serviced_energy"]
        [::std::mem::offset_of!(rusage_info_v5, ri_serviced_energy) - 272usize];
    ["Offset of field: rusage_info_v5::ri_interval_max_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v5, ri_interval_max_phys_footprint) - 280usize];
    ["Offset of field: rusage_info_v5::ri_runnable_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_runnable_time) - 288usize];
    ["Offset of field: rusage_info_v5::ri_flags"]
        [::std::mem::offset_of!(rusage_info_v5, ri_flags) - 296usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v6 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
    pub ri_flags: u64,
    pub ri_user_ptime: u64,
    pub ri_system_ptime: u64,
    pub ri_pinstructions: u64,
    pub ri_pcycles: u64,
    pub ri_energy_nj: u64,
    pub ri_penergy_nj: u64,
    pub ri_secure_time_in_system: u64,
    pub ri_secure_ptime_in_system: u64,
    pub ri_neural_footprint: u64,
    pub ri_lifetime_max_neural_footprint: u64,
    pub ri_interval_max_neural_footprint: u64,
    pub ri_reserved: [u64; 9usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage_info_v6"][::std::mem::size_of::<rusage_info_v6>() - 464usize];
    ["Alignment of rusage_info_v6"][::std::mem::align_of::<rusage_info_v6>() - 8usize];
    ["Offset of field: rusage_info_v6::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v6, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v6::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v6::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v6::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v6, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v6::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v6, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v6::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v6, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v6::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v6, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v6::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v6, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v6::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v6, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v6::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v6, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v6::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v6, ri_proc_exit_abstime) - 88usize];
    ["Offset of field: rusage_info_v6::ri_child_user_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_child_user_time) - 96usize];
    ["Offset of field: rusage_info_v6::ri_child_system_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_child_system_time) - 104usize];
    ["Offset of field: rusage_info_v6::ri_child_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v6, ri_child_pkg_idle_wkups) - 112usize];
    ["Offset of field: rusage_info_v6::ri_child_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v6, ri_child_interrupt_wkups) - 120usize];
    ["Offset of field: rusage_info_v6::ri_child_pageins"]
        [::std::mem::offset_of!(rusage_info_v6, ri_child_pageins) - 128usize];
    ["Offset of field: rusage_info_v6::ri_child_elapsed_abstime"]
        [::std::mem::offset_of!(rusage_info_v6, ri_child_elapsed_abstime) - 136usize];
    ["Offset of field: rusage_info_v6::ri_diskio_bytesread"]
        [::std::mem::offset_of!(rusage_info_v6, ri_diskio_bytesread) - 144usize];
    ["Offset of field: rusage_info_v6::ri_diskio_byteswritten"]
        [::std::mem::offset_of!(rusage_info_v6, ri_diskio_byteswritten) - 152usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_default"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_default) - 160usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_maintenance"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_maintenance) - 168usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_background"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_background) - 176usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_utility"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_utility) - 184usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_legacy"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_legacy) - 192usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_user_initiated"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_user_initiated) - 200usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_user_interactive"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_user_interactive) - 208usize];
    ["Offset of field: rusage_info_v6::ri_billed_system_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_billed_system_time) - 216usize];
    ["Offset of field: rusage_info_v6::ri_serviced_system_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_serviced_system_time) - 224usize];
    ["Offset of field: rusage_info_v6::ri_logical_writes"]
        [::std::mem::offset_of!(rusage_info_v6, ri_logical_writes) - 232usize];
    ["Offset of field: rusage_info_v6::ri_lifetime_max_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v6, ri_lifetime_max_phys_footprint) - 240usize];
    ["Offset of field: rusage_info_v6::ri_instructions"]
        [::std::mem::offset_of!(rusage_info_v6, ri_instructions) - 248usize];
    ["Offset of field: rusage_info_v6::ri_cycles"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cycles) - 256usize];
    ["Offset of field: rusage_info_v6::ri_billed_energy"]
        [::std::mem::offset_of!(rusage_info_v6, ri_billed_energy) - 264usize];
    ["Offset of field: rusage_info_v6::ri_serviced_energy"]
        [::std::mem::offset_of!(rusage_info_v6, ri_serviced_energy) - 272usize];
    ["Offset of field: rusage_info_v6::ri_interval_max_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v6, ri_interval_max_phys_footprint) - 280usize];
    ["Offset of field: rusage_info_v6::ri_runnable_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_runnable_time) - 288usize];
    ["Offset of field: rusage_info_v6::ri_flags"]
        [::std::mem::offset_of!(rusage_info_v6, ri_flags) - 296usize];
    ["Offset of field: rusage_info_v6::ri_user_ptime"]
        [::std::mem::offset_of!(rusage_info_v6, ri_user_ptime) - 304usize];
    ["Offset of field: rusage_info_v6::ri_system_ptime"]
        [::std::mem::offset_of!(rusage_info_v6, ri_system_ptime) - 312usize];
    ["Offset of field: rusage_info_v6::ri_pinstructions"]
        [::std::mem::offset_of!(rusage_info_v6, ri_pinstructions) - 320usize];
    ["Offset of field: rusage_info_v6::ri_pcycles"]
        [::std::mem::offset_of!(rusage_info_v6, ri_pcycles) - 328usize];
    ["Offset of field: rusage_info_v6::ri_energy_nj"]
        [::std::mem::offset_of!(rusage_info_v6, ri_energy_nj) - 336usize];
    ["Offset of field: rusage_info_v6::ri_penergy_nj"]
        [::std::mem::offset_of!(rusage_info_v6, ri_penergy_nj) - 344usize];
    ["Offset of field: rusage_info_v6::ri_secure_time_in_system"]
        [::std::mem::offset_of!(rusage_info_v6, ri_secure_time_in_system) - 352usize];
    ["Offset of field: rusage_info_v6::ri_secure_ptime_in_system"]
        [::std::mem::offset_of!(rusage_info_v6, ri_secure_ptime_in_system) - 360usize];
    ["Offset of field: rusage_info_v6::ri_neural_footprint"]
        [::std::mem::offset_of!(rusage_info_v6, ri_neural_footprint) - 368usize];
    ["Offset of field: rusage_info_v6::ri_lifetime_max_neural_footprint"]
        [::std::mem::offset_of!(rusage_info_v6, ri_lifetime_max_neural_footprint) - 376usize];
    ["Offset of field: rusage_info_v6::ri_interval_max_neural_footprint"]
        [::std::mem::offset_of!(rusage_info_v6, ri_interval_max_neural_footprint) - 384usize];
    ["Offset of field: rusage_info_v6::ri_reserved"]
        [::std::mem::offset_of!(rusage_info_v6, ri_reserved) - 392usize];
};
pub type rusage_info_current = rusage_info_v6;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rlimit {
    pub rlim_cur: rlim_t,
    pub rlim_max: rlim_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rlimit"][::std::mem::size_of::<rlimit>() - 16usize];
    ["Alignment of rlimit"][::std::mem::align_of::<rlimit>() - 8usize];
    ["Offset of field: rlimit::rlim_cur"][::std::mem::offset_of!(rlimit, rlim_cur) - 0usize];
    ["Offset of field: rlimit::rlim_max"][::std::mem::offset_of!(rlimit, rlim_max) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_rlimit_control_wakeupmon {
    pub wm_flags: u32,
    pub wm_rate: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of proc_rlimit_control_wakeupmon"]
        [::std::mem::size_of::<proc_rlimit_control_wakeupmon>() - 8usize];
    ["Alignment of proc_rlimit_control_wakeupmon"]
        [::std::mem::align_of::<proc_rlimit_control_wakeupmon>() - 4usize];
    ["Offset of field: proc_rlimit_control_wakeupmon::wm_flags"]
        [::std::mem::offset_of!(proc_rlimit_control_wakeupmon, wm_flags) - 0usize];
    ["Offset of field: proc_rlimit_control_wakeupmon::wm_rate"]
        [::std::mem::offset_of!(proc_rlimit_control_wakeupmon, wm_rate) - 4usize];
};
unsafe extern "C" {
    pub fn getpriority(arg1: ::std::os::raw::c_int, arg2: id_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getiopolicy_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getrlimit(arg1: ::std::os::raw::c_int, arg2: *mut rlimit) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getrusage(arg1: ::std::os::raw::c_int, arg2: *mut rusage) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setpriority(
        arg1: ::std::os::raw::c_int,
        arg2: id_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setiopolicy_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setrlimit(arg1: ::std::os::raw::c_int, arg2: *const rlimit) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union wait {
    pub w_status: ::std::os::raw::c_int,
    pub w_T: wait__bindgen_ty_1,
    pub w_S: wait__bindgen_ty_2,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct wait__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of wait__bindgen_ty_1"][::std::mem::size_of::<wait__bindgen_ty_1>() - 4usize];
    ["Alignment of wait__bindgen_ty_1"][::std::mem::align_of::<wait__bindgen_ty_1>() - 4usize];
};
impl wait__bindgen_ty_1 {
    #[inline]
    pub fn w_Termsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set_w_Termsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn w_Termsig_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                7u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_w_Termsig_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                7u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn w_Coredump(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_w_Coredump(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn w_Coredump_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                7usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_w_Coredump_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                7usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn w_Retcode(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Retcode(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn w_Retcode_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_w_Retcode_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn w_Filler(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_w_Filler(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn w_Filler_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_w_Filler_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        w_Termsig: ::std::os::raw::c_uint,
        w_Coredump: ::std::os::raw::c_uint,
        w_Retcode: ::std::os::raw::c_uint,
        w_Filler: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let w_Termsig: u32 = unsafe { ::std::mem::transmute(w_Termsig) };
            w_Termsig as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let w_Coredump: u32 = unsafe { ::std::mem::transmute(w_Coredump) };
            w_Coredump as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let w_Retcode: u32 = unsafe { ::std::mem::transmute(w_Retcode) };
            w_Retcode as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let w_Filler: u32 = unsafe { ::std::mem::transmute(w_Filler) };
            w_Filler as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct wait__bindgen_ty_2 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of wait__bindgen_ty_2"][::std::mem::size_of::<wait__bindgen_ty_2>() - 4usize];
    ["Alignment of wait__bindgen_ty_2"][::std::mem::align_of::<wait__bindgen_ty_2>() - 4usize];
};
impl wait__bindgen_ty_2 {
    #[inline]
    pub fn w_Stopval(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Stopval(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn w_Stopval_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_w_Stopval_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn w_Stopsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Stopsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn w_Stopsig_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_w_Stopsig_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn w_Filler(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_w_Filler(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn w_Filler_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_w_Filler_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        w_Stopval: ::std::os::raw::c_uint,
        w_Stopsig: ::std::os::raw::c_uint,
        w_Filler: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let w_Stopval: u32 = unsafe { ::std::mem::transmute(w_Stopval) };
            w_Stopval as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let w_Stopsig: u32 = unsafe { ::std::mem::transmute(w_Stopsig) };
            w_Stopsig as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let w_Filler: u32 = unsafe { ::std::mem::transmute(w_Filler) };
            w_Filler as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of wait"][::std::mem::size_of::<wait>() - 4usize];
    ["Alignment of wait"][::std::mem::align_of::<wait>() - 4usize];
    ["Offset of field: wait::w_status"][::std::mem::offset_of!(wait, w_status) - 0usize];
    ["Offset of field: wait::w_T"][::std::mem::offset_of!(wait, w_T) - 0usize];
    ["Offset of field: wait::w_S"][::std::mem::offset_of!(wait, w_S) - 0usize];
};
unsafe extern "C" {
    pub fn wait(arg1: *mut ::std::os::raw::c_int) -> pid_t;
}
unsafe extern "C" {
    pub fn waitpid(
        arg1: pid_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> pid_t;
}
unsafe extern "C" {
    pub fn waitid(
        arg1: idtype_t,
        arg2: id_t,
        arg3: *mut siginfo_t,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wait3(
        arg1: *mut ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut rusage,
    ) -> pid_t;
}
unsafe extern "C" {
    pub fn wait4(
        arg1: pid_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut rusage,
    ) -> pid_t;
}
unsafe extern "C" {
    pub fn alloca(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
pub type ct_rune_t = __darwin_ct_rune_t;
pub type rune_t = __darwin_rune_t;
pub type wchar_t = __darwin_wchar_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of div_t"][::std::mem::size_of::<div_t>() - 8usize];
    ["Alignment of div_t"][::std::mem::align_of::<div_t>() - 4usize];
    ["Offset of field: div_t::quot"][::std::mem::offset_of!(div_t, quot) - 0usize];
    ["Offset of field: div_t::rem"][::std::mem::offset_of!(div_t, rem) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ldiv_t"][::std::mem::size_of::<ldiv_t>() - 16usize];
    ["Alignment of ldiv_t"][::std::mem::align_of::<ldiv_t>() - 8usize];
    ["Offset of field: ldiv_t::quot"][::std::mem::offset_of!(ldiv_t, quot) - 0usize];
    ["Offset of field: ldiv_t::rem"][::std::mem::offset_of!(ldiv_t, rem) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lldiv_t"][::std::mem::size_of::<lldiv_t>() - 16usize];
    ["Alignment of lldiv_t"][::std::mem::align_of::<lldiv_t>() - 8usize];
    ["Offset of field: lldiv_t::quot"][::std::mem::offset_of!(lldiv_t, quot) - 0usize];
    ["Offset of field: lldiv_t::rem"][::std::mem::offset_of!(lldiv_t, rem) - 8usize];
};
unsafe extern "C" {
    pub static mut __mb_cur_max: ::std::os::raw::c_int;
}
pub type malloc_type_id_t = ::std::os::raw::c_ulonglong;
unsafe extern "C" {
    pub fn malloc_type_malloc(
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc_type_calloc(
        count: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc_type_free(ptr: *mut ::std::os::raw::c_void, type_id: malloc_type_id_t);
}
unsafe extern "C" {
    pub fn malloc_type_realloc(
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc_type_valloc(
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc_type_aligned_alloc(
        alignment: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc_type_posix_memalign(
        memptr: *mut *mut ::std::os::raw::c_void,
        alignment: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _malloc_zone_t {
    _unused: [u8; 0],
}
pub type malloc_zone_t = _malloc_zone_t;
unsafe extern "C" {
    pub fn malloc_type_zone_malloc(
        zone: *mut malloc_zone_t,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc_type_zone_calloc(
        zone: *mut malloc_zone_t,
        count: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc_type_zone_free(
        zone: *mut malloc_zone_t,
        ptr: *mut ::std::os::raw::c_void,
        type_id: malloc_type_id_t,
    );
}
unsafe extern "C" {
    pub fn malloc_type_zone_realloc(
        zone: *mut malloc_zone_t,
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc_type_zone_valloc(
        zone: *mut malloc_zone_t,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc_type_zone_memalign(
        zone: *mut malloc_zone_t,
        alignment: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn calloc(
        __count: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn free(arg1: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn reallocf(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn valloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn aligned_alloc(
        __alignment: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn abort() -> !;
}
unsafe extern "C" {
    pub fn abs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn atexit(arg1: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn at_quick_exit(
        arg1: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn atof(arg1: *const ::std::os::raw::c_char) -> f64;
}
unsafe extern "C" {
    pub fn atoi(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn atol(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn atoll(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn div(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> div_t;
}
unsafe extern "C" {
    pub fn exit(arg1: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn getenv(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn labs(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn ldiv(arg1: ::std::os::raw::c_long, arg2: ::std::os::raw::c_long) -> ldiv_t;
}
unsafe extern "C" {
    pub fn llabs(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn lldiv(arg1: ::std::os::raw::c_longlong, arg2: ::std::os::raw::c_longlong) -> lldiv_t;
}
unsafe extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mbstowcs(arg1: *mut wchar_t, arg2: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
unsafe extern "C" {
    pub fn mbtowc(
        arg1: *mut wchar_t,
        arg2: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
unsafe extern "C" {
    pub fn quick_exit(arg1: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn srand(arg1: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn strtod(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
unsafe extern "C" {
    pub fn strtof(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
unsafe extern "C" {
    pub fn strtol(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn strtold(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
unsafe extern "C" {
    pub fn strtoll(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn strtoul(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn strtoull(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn system(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wcstombs(arg1: *mut ::std::os::raw::c_char, arg2: *const wchar_t, __n: usize) -> usize;
}
unsafe extern "C" {
    pub fn wctomb(arg1: *mut ::std::os::raw::c_char, arg2: wchar_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _Exit(arg1: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn a64l(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn drand48() -> f64;
}
unsafe extern "C" {
    pub fn ecvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn erand48(arg1: *mut ::std::os::raw::c_ushort) -> f64;
}
unsafe extern "C" {
    pub fn fcvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn gcvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn getsubopt(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const *mut ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn grantpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn initstate(
        arg1: ::std::os::raw::c_uint,
        arg2: *mut ::std::os::raw::c_char,
        __size: usize,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn jrand48(arg1: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn l64a(arg1: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn lcong48(arg1: *mut ::std::os::raw::c_ushort);
}
unsafe extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn mktemp(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn mkstemp(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn nrand48(arg1: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn posix_openpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ptsname(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ptsname_r(
        fildes: ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_char,
        buflen: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putenv(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn rand_r(arg1: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}_realpath$DARWIN_EXTSN"]
    pub fn realpath(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn seed48(arg1: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
unsafe extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __overwrite: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setkey(arg1: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn setstate(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn srand48(arg1: ::std::os::raw::c_long);
}
unsafe extern "C" {
    pub fn srandom(arg1: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn unlockpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn unsetenv(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn arc4random() -> u32;
}
unsafe extern "C" {
    pub fn arc4random_addrandom(
        arg1: *mut ::std::os::raw::c_uchar,
        __datlen: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn arc4random_buf(__buf: *mut ::std::os::raw::c_void, __nbytes: usize);
}
unsafe extern "C" {
    pub fn arc4random_stir();
}
unsafe extern "C" {
    pub fn arc4random_uniform(__upper_bound: u32) -> u32;
}
unsafe extern "C" {
    pub fn atexit_b(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn bsearch_b(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn cgetcap(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn cgetclose() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cgetent(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cgetfirst(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cgetmatch(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cgetnext(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cgetnum(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cgetset(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cgetstr(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cgetustr(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}_daemon$1050"]
    pub fn daemon(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn devname(arg1: dev_t, arg2: mode_t) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn devname_r(
        arg1: dev_t,
        arg2: mode_t,
        buf: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn getbsize(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn getloadavg(arg1: *mut f64, __nelem: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getprogname() -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn setprogname(arg1: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn heapsort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn heapsort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mergesort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mergesort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn psort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
unsafe extern "C" {
    pub fn psort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn psort_r(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        arg1: *mut ::std::os::raw::c_void,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
                arg3: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
unsafe extern "C" {
    pub fn qsort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn qsort_r(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        arg1: *mut ::std::os::raw::c_void,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
                arg3: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
unsafe extern "C" {
    pub fn radixsort(
        __base: *mut *const ::std::os::raw::c_uchar,
        __nel: ::std::os::raw::c_int,
        __table: *const ::std::os::raw::c_uchar,
        __endbyte: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn rpmatch(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sradixsort(
        __base: *mut *const ::std::os::raw::c_uchar,
        __nel: ::std::os::raw::c_int,
        __table: *const ::std::os::raw::c_uchar,
        __endbyte: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sranddev();
}
unsafe extern "C" {
    pub fn srandomdev();
}
unsafe extern "C" {
    pub fn strtonum(
        __numstr: *const ::std::os::raw::c_char,
        __minval: ::std::os::raw::c_longlong,
        __maxval: ::std::os::raw::c_longlong,
        __errstrp: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn strtoq(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn strtouq(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub static mut suboptarg: *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[doc = " Physical address and size of the peripherals block\nMay be overridden on RPi2"]
    pub static mut bcm2835_peripherals_base: off_t;
}
unsafe extern "C" {
    #[doc = " Size of the peripherals block to be mapped"]
    pub static mut bcm2835_peripherals_size: usize;
}
unsafe extern "C" {
    #[doc = " Virtual memory address of the mapped peripherals block"]
    pub static mut bcm2835_peripherals: *mut u32;
}
unsafe extern "C" {
    #[doc = " Base of the ST (System Timer) registers.\nAvailable after bcm2835_init has been called (as root)"]
    pub static mut bcm2835_st: *mut u32;
}
unsafe extern "C" {
    #[doc = " Base of the GPIO registers.\nAvailable after bcm2835_init has been called"]
    pub static mut bcm2835_gpio: *mut u32;
}
unsafe extern "C" {
    #[doc = " Base of the PWM registers.\nAvailable after bcm2835_init has been called (as root)"]
    pub static mut bcm2835_pwm: *mut u32;
}
unsafe extern "C" {
    #[doc = " Base of the CLK registers.\nAvailable after bcm2835_init has been called (as root)"]
    pub static mut bcm2835_clk: *mut u32;
}
unsafe extern "C" {
    #[doc = " Base of the PADS registers.\nAvailable after bcm2835_init has been called (as root)"]
    pub static mut bcm2835_pads: *mut u32;
}
unsafe extern "C" {
    #[doc = " Base of the SPI0 registers.\nAvailable after bcm2835_init has been called (as root)"]
    pub static mut bcm2835_spi0: *mut u32;
}
unsafe extern "C" {
    #[doc = " Base of the BSC0 registers.\nAvailable after bcm2835_init has been called (as root)"]
    pub static mut bcm2835_bsc0: *mut u32;
}
unsafe extern "C" {
    #[doc = " Base of the BSC1 registers.\nAvailable after bcm2835_init has been called (as root)"]
    pub static mut bcm2835_bsc1: *mut u32;
}
unsafe extern "C" {
    #[doc = " Base of the AUX registers.\nAvailable after bcm2835_init has been called (as root)"]
    pub static mut bcm2835_aux: *mut u32;
}
unsafe extern "C" {
    #[doc = " Base of the SPI1 registers.\nAvailable after bcm2835_init has been called (as root)"]
    pub static mut bcm2835_spi1: *mut u32;
}
unsafe extern "C" {
    #[doc = " Base of SMI registers.\nAvailable after bcm2835_init has been called (as root)"]
    pub static mut bcm2835_smi: *mut u32;
}
#[doc = "< Base of the ST (System Timer) registers."]
pub const bcm2835RegisterBase_BCM2835_REGBASE_ST: bcm2835RegisterBase = 1;
#[doc = "< Base of the GPIO registers."]
pub const bcm2835RegisterBase_BCM2835_REGBASE_GPIO: bcm2835RegisterBase = 2;
#[doc = "< Base of the PWM registers."]
pub const bcm2835RegisterBase_BCM2835_REGBASE_PWM: bcm2835RegisterBase = 3;
#[doc = "< Base of the CLK registers."]
pub const bcm2835RegisterBase_BCM2835_REGBASE_CLK: bcm2835RegisterBase = 4;
#[doc = "< Base of the PADS registers."]
pub const bcm2835RegisterBase_BCM2835_REGBASE_PADS: bcm2835RegisterBase = 5;
#[doc = "< Base of the SPI0 registers."]
pub const bcm2835RegisterBase_BCM2835_REGBASE_SPI0: bcm2835RegisterBase = 6;
#[doc = "< Base of the BSC0 registers."]
pub const bcm2835RegisterBase_BCM2835_REGBASE_BSC0: bcm2835RegisterBase = 7;
#[doc = "< Base of the BSC1 registers."]
pub const bcm2835RegisterBase_BCM2835_REGBASE_BSC1: bcm2835RegisterBase = 8;
#[doc = "< Base of the AUX registers."]
pub const bcm2835RegisterBase_BCM2835_REGBASE_AUX: bcm2835RegisterBase = 9;
#[doc = "< Base of the SPI1 registers."]
pub const bcm2835RegisterBase_BCM2835_REGBASE_SPI1: bcm2835RegisterBase = 10;
#[doc = "< Base of the SMI registers."]
pub const bcm2835RegisterBase_BCM2835_REGBASE_SMI: bcm2835RegisterBase = 11;
#[doc = " \\brief bcm2835RegisterBase\nRegister bases for bcm2835_regbase()"]
pub type bcm2835RegisterBase = ::std::os::raw::c_uint;
#[doc = "< Input 0b000"]
pub const bcm2835FunctionSelect_BCM2835_GPIO_FSEL_INPT: bcm2835FunctionSelect = 0;
#[doc = "< Output 0b001"]
pub const bcm2835FunctionSelect_BCM2835_GPIO_FSEL_OUTP: bcm2835FunctionSelect = 1;
#[doc = "< Alternate function 0 0b100"]
pub const bcm2835FunctionSelect_BCM2835_GPIO_FSEL_ALT0: bcm2835FunctionSelect = 4;
#[doc = "< Alternate function 1 0b101"]
pub const bcm2835FunctionSelect_BCM2835_GPIO_FSEL_ALT1: bcm2835FunctionSelect = 5;
#[doc = "< Alternate function 2 0b110,"]
pub const bcm2835FunctionSelect_BCM2835_GPIO_FSEL_ALT2: bcm2835FunctionSelect = 6;
#[doc = "< Alternate function 3 0b111"]
pub const bcm2835FunctionSelect_BCM2835_GPIO_FSEL_ALT3: bcm2835FunctionSelect = 7;
#[doc = "< Alternate function 4 0b011"]
pub const bcm2835FunctionSelect_BCM2835_GPIO_FSEL_ALT4: bcm2835FunctionSelect = 3;
#[doc = "< Alternate function 5 0b010"]
pub const bcm2835FunctionSelect_BCM2835_GPIO_FSEL_ALT5: bcm2835FunctionSelect = 2;
#[doc = "< Function select bits mask 0b111"]
pub const bcm2835FunctionSelect_BCM2835_GPIO_FSEL_MASK: bcm2835FunctionSelect = 7;
#[doc = "   \\brief bcm2835PortFunction\nPort function select modes for bcm2835_gpio_fsel()"]
pub type bcm2835FunctionSelect = ::std::os::raw::c_uint;
#[doc = "< Off ? disable pull-up/down 0b00"]
pub const bcm2835PUDControl_BCM2835_GPIO_PUD_OFF: bcm2835PUDControl = 0;
#[doc = "< Enable Pull Down control 0b01"]
pub const bcm2835PUDControl_BCM2835_GPIO_PUD_DOWN: bcm2835PUDControl = 1;
#[doc = "< Enable Pull Up control 0b10"]
pub const bcm2835PUDControl_BCM2835_GPIO_PUD_UP: bcm2835PUDControl = 2;
#[doc = " \\brief bcm2835PUDControl\nPullup/Pulldown defines for bcm2835_gpio_pud()"]
pub type bcm2835PUDControl = ::std::os::raw::c_uint;
#[doc = "< Pad group for GPIO pads 0 to 27"]
pub const bcm2835PadGroup_BCM2835_PAD_GROUP_GPIO_0_27: bcm2835PadGroup = 0;
#[doc = "< Pad group for GPIO pads 28 to 45"]
pub const bcm2835PadGroup_BCM2835_PAD_GROUP_GPIO_28_45: bcm2835PadGroup = 1;
#[doc = "< Pad group for GPIO pads 46 to 53"]
pub const bcm2835PadGroup_BCM2835_PAD_GROUP_GPIO_46_53: bcm2835PadGroup = 2;
#[doc = " \\brief bcm2835PadGroup\nPad group specification for bcm2835_gpio_pad()"]
pub type bcm2835PadGroup = ::std::os::raw::c_uint;
#[doc = "< Version 1, Pin P1-03"]
pub const RPiGPIOPin_RPI_GPIO_P1_03: RPiGPIOPin = 0;
#[doc = "< Version 1, Pin P1-05"]
pub const RPiGPIOPin_RPI_GPIO_P1_05: RPiGPIOPin = 1;
#[doc = "< Version 1, Pin P1-07"]
pub const RPiGPIOPin_RPI_GPIO_P1_07: RPiGPIOPin = 4;
#[doc = "< Version 1, Pin P1-08, defaults to alt function 0 UART0_TXD"]
pub const RPiGPIOPin_RPI_GPIO_P1_08: RPiGPIOPin = 14;
#[doc = "< Version 1, Pin P1-10, defaults to alt function 0 UART0_RXD"]
pub const RPiGPIOPin_RPI_GPIO_P1_10: RPiGPIOPin = 15;
#[doc = "< Version 1, Pin P1-11"]
pub const RPiGPIOPin_RPI_GPIO_P1_11: RPiGPIOPin = 17;
#[doc = "< Version 1, Pin P1-12, can be PWM channel 0 in ALT FUN 5"]
pub const RPiGPIOPin_RPI_GPIO_P1_12: RPiGPIOPin = 18;
#[doc = "< Version 1, Pin P1-13"]
pub const RPiGPIOPin_RPI_GPIO_P1_13: RPiGPIOPin = 21;
#[doc = "< Version 1, Pin P1-15"]
pub const RPiGPIOPin_RPI_GPIO_P1_15: RPiGPIOPin = 22;
#[doc = "< Version 1, Pin P1-16"]
pub const RPiGPIOPin_RPI_GPIO_P1_16: RPiGPIOPin = 23;
#[doc = "< Version 1, Pin P1-18"]
pub const RPiGPIOPin_RPI_GPIO_P1_18: RPiGPIOPin = 24;
#[doc = "< Version 1, Pin P1-19, MOSI when SPI0 in use"]
pub const RPiGPIOPin_RPI_GPIO_P1_19: RPiGPIOPin = 10;
#[doc = "< Version 1, Pin P1-21, MISO when SPI0 in use"]
pub const RPiGPIOPin_RPI_GPIO_P1_21: RPiGPIOPin = 9;
#[doc = "< Version 1, Pin P1-22"]
pub const RPiGPIOPin_RPI_GPIO_P1_22: RPiGPIOPin = 25;
#[doc = "< Version 1, Pin P1-23, CLK when SPI0 in use"]
pub const RPiGPIOPin_RPI_GPIO_P1_23: RPiGPIOPin = 11;
#[doc = "< Version 1, Pin P1-24, CE0 when SPI0 in use"]
pub const RPiGPIOPin_RPI_GPIO_P1_24: RPiGPIOPin = 8;
#[doc = "< Version 1, Pin P1-26, CE1 when SPI0 in use"]
pub const RPiGPIOPin_RPI_GPIO_P1_26: RPiGPIOPin = 7;
#[doc = "< Version 2, Pin P1-03"]
pub const RPiGPIOPin_RPI_V2_GPIO_P1_03: RPiGPIOPin = 2;
#[doc = "< Version 2, Pin P1-05"]
pub const RPiGPIOPin_RPI_V2_GPIO_P1_05: RPiGPIOPin = 3;
#[doc = "< Version 2, Pin P1-07"]
pub const RPiGPIOPin_RPI_V2_GPIO_P1_07: RPiGPIOPin = 4;
#[doc = "< Version 2, Pin P1-08, defaults to alt function 0 UART0_TXD"]
pub const RPiGPIOPin_RPI_V2_GPIO_P1_08: RPiGPIOPin = 14;
#[doc = "< Version 2, Pin P1-10, defaults to alt function 0 UART0_RXD"]
pub const RPiGPIOPin_RPI_V2_GPIO_P1_10: RPiGPIOPin = 15;
#[doc = "< Version 2, Pin P1-11"]
pub const RPiGPIOPin_RPI_V2_GPIO_P1_11: RPiGPIOPin = 17;
#[doc = "< Version 2, Pin P1-12, can be PWM channel 0 in ALT FUN 5"]
pub const RPiGPIOPin_RPI_V2_GPIO_P1_12: RPiGPIOPin = 18;
#[doc = "< Version 2, Pin P1-13"]
pub const RPiGPIOPin_RPI_V2_GPIO_P1_13: RPiGPIOPin = 27;
#[doc = "< Version 2, Pin P1-15"]
pub const RPiGPIOPin_RPI_V2_GPIO_P1_15: RPiGPIOPin = 22;
#[doc = "< Version 2, Pin P1-16"]
pub const RPiGPIOPin_RPI_V2_GPIO_P1_16: RPiGPIOPin = 23;
#[doc = "< Version 2, Pin P1-18"]
pub const RPiGPIOPin_RPI_V2_GPIO_P1_18: RPiGPIOPin = 24;
#[doc = "< Version 2, Pin P1-19, MOSI when SPI0 in use"]
pub const RPiGPIOPin_RPI_V2_GPIO_P1_19: RPiGPIOPin = 10;
#[doc = "< Version 2, Pin P1-21, MISO when SPI0 in use"]
pub const RPiGPIOPin_RPI_V2_GPIO_P1_21: RPiGPIOPin = 9;
#[doc = "< Version 2, Pin P1-22"]
pub const RPiGPIOPin_RPI_V2_GPIO_P1_22: RPiGPIOPin = 25;
#[doc = "< Version 2, Pin P1-23, CLK when SPI0 in use"]
pub const RPiGPIOPin_RPI_V2_GPIO_P1_23: RPiGPIOPin = 11;
#[doc = "< Version 2, Pin P1-24, CE0 when SPI0 in use"]
pub const RPiGPIOPin_RPI_V2_GPIO_P1_24: RPiGPIOPin = 8;
#[doc = "< Version 2, Pin P1-26, CE1 when SPI0 in use"]
pub const RPiGPIOPin_RPI_V2_GPIO_P1_26: RPiGPIOPin = 7;
#[doc = "< Version 2, Pin P1-29"]
pub const RPiGPIOPin_RPI_V2_GPIO_P1_29: RPiGPIOPin = 5;
#[doc = "< Version 2, Pin P1-31"]
pub const RPiGPIOPin_RPI_V2_GPIO_P1_31: RPiGPIOPin = 6;
#[doc = "< Version 2, Pin P1-32"]
pub const RPiGPIOPin_RPI_V2_GPIO_P1_32: RPiGPIOPin = 12;
#[doc = "< Version 2, Pin P1-33"]
pub const RPiGPIOPin_RPI_V2_GPIO_P1_33: RPiGPIOPin = 13;
#[doc = "< Version 2, Pin P1-35, can be PWM channel 1 in ALT FUN 5"]
pub const RPiGPIOPin_RPI_V2_GPIO_P1_35: RPiGPIOPin = 19;
#[doc = "< Version 2, Pin P1-36"]
pub const RPiGPIOPin_RPI_V2_GPIO_P1_36: RPiGPIOPin = 16;
#[doc = "< Version 2, Pin P1-37"]
pub const RPiGPIOPin_RPI_V2_GPIO_P1_37: RPiGPIOPin = 26;
#[doc = "< Version 2, Pin P1-38"]
pub const RPiGPIOPin_RPI_V2_GPIO_P1_38: RPiGPIOPin = 20;
#[doc = "< Version 2, Pin P1-40"]
pub const RPiGPIOPin_RPI_V2_GPIO_P1_40: RPiGPIOPin = 21;
#[doc = "< Version 2, Pin P5-03"]
pub const RPiGPIOPin_RPI_V2_GPIO_P5_03: RPiGPIOPin = 28;
#[doc = "< Version 2, Pin P5-04"]
pub const RPiGPIOPin_RPI_V2_GPIO_P5_04: RPiGPIOPin = 29;
#[doc = "< Version 2, Pin P5-05"]
pub const RPiGPIOPin_RPI_V2_GPIO_P5_05: RPiGPIOPin = 30;
#[doc = "< Version 2, Pin P5-06"]
pub const RPiGPIOPin_RPI_V2_GPIO_P5_06: RPiGPIOPin = 31;
#[doc = "< B+, Pin J8-03"]
pub const RPiGPIOPin_RPI_BPLUS_GPIO_J8_03: RPiGPIOPin = 2;
#[doc = "< B+, Pin J8-05"]
pub const RPiGPIOPin_RPI_BPLUS_GPIO_J8_05: RPiGPIOPin = 3;
#[doc = "< B+, Pin J8-07"]
pub const RPiGPIOPin_RPI_BPLUS_GPIO_J8_07: RPiGPIOPin = 4;
#[doc = "< B+, Pin J8-08, defaults to alt function 0 UART0_TXD"]
pub const RPiGPIOPin_RPI_BPLUS_GPIO_J8_08: RPiGPIOPin = 14;
#[doc = "< B+, Pin J8-10, defaults to alt function 0 UART0_RXD"]
pub const RPiGPIOPin_RPI_BPLUS_GPIO_J8_10: RPiGPIOPin = 15;
#[doc = "< B+, Pin J8-11"]
pub const RPiGPIOPin_RPI_BPLUS_GPIO_J8_11: RPiGPIOPin = 17;
#[doc = "< B+, Pin J8-12, can be PWM channel 0 in ALT FUN 5"]
pub const RPiGPIOPin_RPI_BPLUS_GPIO_J8_12: RPiGPIOPin = 18;
#[doc = "< B+, Pin J8-13"]
pub const RPiGPIOPin_RPI_BPLUS_GPIO_J8_13: RPiGPIOPin = 27;
#[doc = "< B+, Pin J8-15"]
pub const RPiGPIOPin_RPI_BPLUS_GPIO_J8_15: RPiGPIOPin = 22;
#[doc = "< B+, Pin J8-16"]
pub const RPiGPIOPin_RPI_BPLUS_GPIO_J8_16: RPiGPIOPin = 23;
#[doc = "< B+, Pin J8-18"]
pub const RPiGPIOPin_RPI_BPLUS_GPIO_J8_18: RPiGPIOPin = 24;
#[doc = "< B+, Pin J8-19, MOSI when SPI0 in use"]
pub const RPiGPIOPin_RPI_BPLUS_GPIO_J8_19: RPiGPIOPin = 10;
#[doc = "< B+, Pin J8-21, MISO when SPI0 in use"]
pub const RPiGPIOPin_RPI_BPLUS_GPIO_J8_21: RPiGPIOPin = 9;
#[doc = "< B+, Pin J8-22"]
pub const RPiGPIOPin_RPI_BPLUS_GPIO_J8_22: RPiGPIOPin = 25;
#[doc = "< B+, Pin J8-23, CLK when SPI0 in use"]
pub const RPiGPIOPin_RPI_BPLUS_GPIO_J8_23: RPiGPIOPin = 11;
#[doc = "< B+, Pin J8-24, CE0 when SPI0 in use"]
pub const RPiGPIOPin_RPI_BPLUS_GPIO_J8_24: RPiGPIOPin = 8;
#[doc = "< B+, Pin J8-26, CE1 when SPI0 in use"]
pub const RPiGPIOPin_RPI_BPLUS_GPIO_J8_26: RPiGPIOPin = 7;
#[doc = "< B+, Pin J8-29,"]
pub const RPiGPIOPin_RPI_BPLUS_GPIO_J8_29: RPiGPIOPin = 5;
#[doc = "< B+, Pin J8-31,"]
pub const RPiGPIOPin_RPI_BPLUS_GPIO_J8_31: RPiGPIOPin = 6;
#[doc = "< B+, Pin J8-32,"]
pub const RPiGPIOPin_RPI_BPLUS_GPIO_J8_32: RPiGPIOPin = 12;
#[doc = "< B+, Pin J8-33,"]
pub const RPiGPIOPin_RPI_BPLUS_GPIO_J8_33: RPiGPIOPin = 13;
#[doc = "< B+, Pin J8-35, can be PWM channel 1 in ALT FUN 5"]
pub const RPiGPIOPin_RPI_BPLUS_GPIO_J8_35: RPiGPIOPin = 19;
#[doc = "< B+, Pin J8-36,"]
pub const RPiGPIOPin_RPI_BPLUS_GPIO_J8_36: RPiGPIOPin = 16;
#[doc = "< B+, Pin J8-37,"]
pub const RPiGPIOPin_RPI_BPLUS_GPIO_J8_37: RPiGPIOPin = 26;
#[doc = "< B+, Pin J8-38,"]
pub const RPiGPIOPin_RPI_BPLUS_GPIO_J8_38: RPiGPIOPin = 20;
#[doc = "< B+, Pin J8-40,"]
pub const RPiGPIOPin_RPI_BPLUS_GPIO_J8_40: RPiGPIOPin = 21;
#[doc = " \\brief GPIO Pin Numbers\n\nHere we define Raspberry Pin GPIO pins on P1 in terms of the underlying BCM GPIO pin numbers.\nThese can be passed as a pin number to any function requiring a pin.\nNot all pins on the RPi 26 bin IDE plug are connected to GPIO pins\nand some can adopt an alternate function.\nRPi version 2 has some slightly different pinouts, and these are values RPI_V2_*.\nRPi B+ has yet differnet pinouts and these are defined in RPI_BPLUS_*.\nAt bootup, pins 8 and 10 are set to UART0_TXD, UART0_RXD (ie the alt0 function) respectively\nWhen SPI0 is in use (ie after bcm2835_spi_begin()), SPI0 pins are dedicated to SPI\nand cant be controlled independently.\nIf you are using the RPi Compute Module, just use the GPIO number: there is no need to use one of these\nsymbolic names"]
pub type RPiGPIOPin = ::std::os::raw::c_uint;
#[doc = "< LSB First"]
pub const bcm2835SPIBitOrder_BCM2835_SPI_BIT_ORDER_LSBFIRST: bcm2835SPIBitOrder = 0;
#[doc = "< MSB First"]
pub const bcm2835SPIBitOrder_BCM2835_SPI_BIT_ORDER_MSBFIRST: bcm2835SPIBitOrder = 1;
#[doc = " \\brief bcm2835SPIBitOrder SPI Bit order\nSpecifies the SPI data bit ordering for bcm2835_spi_setBitOrder()"]
pub type bcm2835SPIBitOrder = ::std::os::raw::c_uint;
#[doc = "< CPOL = 0, CPHA = 0"]
pub const bcm2835SPIMode_BCM2835_SPI_MODE0: bcm2835SPIMode = 0;
#[doc = "< CPOL = 0, CPHA = 1"]
pub const bcm2835SPIMode_BCM2835_SPI_MODE1: bcm2835SPIMode = 1;
#[doc = "< CPOL = 1, CPHA = 0"]
pub const bcm2835SPIMode_BCM2835_SPI_MODE2: bcm2835SPIMode = 2;
#[doc = "< CPOL = 1, CPHA = 1"]
pub const bcm2835SPIMode_BCM2835_SPI_MODE3: bcm2835SPIMode = 3;
#[doc = " \\brief SPI Data mode\nSpecify the SPI data mode to be passed to bcm2835_spi_setDataMode()"]
pub type bcm2835SPIMode = ::std::os::raw::c_uint;
#[doc = "< Chip Select 0"]
pub const bcm2835SPIChipSelect_BCM2835_SPI_CS0: bcm2835SPIChipSelect = 0;
#[doc = "< Chip Select 1"]
pub const bcm2835SPIChipSelect_BCM2835_SPI_CS1: bcm2835SPIChipSelect = 1;
#[doc = "< Chip Select 2 (ie pins CS1 and CS2 are asserted)"]
pub const bcm2835SPIChipSelect_BCM2835_SPI_CS2: bcm2835SPIChipSelect = 2;
#[doc = "< No CS, control it yourself"]
pub const bcm2835SPIChipSelect_BCM2835_SPI_CS_NONE: bcm2835SPIChipSelect = 3;
#[doc = " \\brief bcm2835SPIChipSelect\nSpecify the SPI chip select pin(s)"]
pub type bcm2835SPIChipSelect = ::std::os::raw::c_uint;
#[doc = "< 65536 = 3.814697260kHz on Rpi2, 6.1035156kHz on RPI3"]
pub const bcm2835SPIClockDivider_BCM2835_SPI_CLOCK_DIVIDER_65536: bcm2835SPIClockDivider = 0;
#[doc = "< 32768 = 7.629394531kHz on Rpi2, 12.20703125kHz on RPI3"]
pub const bcm2835SPIClockDivider_BCM2835_SPI_CLOCK_DIVIDER_32768: bcm2835SPIClockDivider = 32768;
#[doc = "< 16384 = 15.25878906kHz on Rpi2, 24.4140625kHz on RPI3"]
pub const bcm2835SPIClockDivider_BCM2835_SPI_CLOCK_DIVIDER_16384: bcm2835SPIClockDivider = 16384;
#[doc = "< 8192 = 30.51757813kHz on Rpi2, 48.828125kHz on RPI3"]
pub const bcm2835SPIClockDivider_BCM2835_SPI_CLOCK_DIVIDER_8192: bcm2835SPIClockDivider = 8192;
#[doc = "< 4096 = 61.03515625kHz on Rpi2, 97.65625kHz on RPI3"]
pub const bcm2835SPIClockDivider_BCM2835_SPI_CLOCK_DIVIDER_4096: bcm2835SPIClockDivider = 4096;
#[doc = "< 2048 = 122.0703125kHz on Rpi2, 195.3125kHz on RPI3"]
pub const bcm2835SPIClockDivider_BCM2835_SPI_CLOCK_DIVIDER_2048: bcm2835SPIClockDivider = 2048;
#[doc = "< 1024 = 244.140625kHz on Rpi2, 390.625kHz on RPI3"]
pub const bcm2835SPIClockDivider_BCM2835_SPI_CLOCK_DIVIDER_1024: bcm2835SPIClockDivider = 1024;
#[doc = "< 512 = 488.28125kHz on Rpi2, 781.25kHz on RPI3"]
pub const bcm2835SPIClockDivider_BCM2835_SPI_CLOCK_DIVIDER_512: bcm2835SPIClockDivider = 512;
#[doc = "< 256 = 976.5625kHz on Rpi2, 1.5625MHz on RPI3"]
pub const bcm2835SPIClockDivider_BCM2835_SPI_CLOCK_DIVIDER_256: bcm2835SPIClockDivider = 256;
#[doc = "< 128 = 1.953125MHz on Rpi2, 3.125MHz on RPI3"]
pub const bcm2835SPIClockDivider_BCM2835_SPI_CLOCK_DIVIDER_128: bcm2835SPIClockDivider = 128;
#[doc = "< 64 = 3.90625MHz on Rpi2, 6.250MHz on RPI3"]
pub const bcm2835SPIClockDivider_BCM2835_SPI_CLOCK_DIVIDER_64: bcm2835SPIClockDivider = 64;
#[doc = "< 32 = 7.8125MHz on Rpi2, 12.5MHz on RPI3"]
pub const bcm2835SPIClockDivider_BCM2835_SPI_CLOCK_DIVIDER_32: bcm2835SPIClockDivider = 32;
#[doc = "< 16 = 15.625MHz on Rpi2, 25MHz on RPI3"]
pub const bcm2835SPIClockDivider_BCM2835_SPI_CLOCK_DIVIDER_16: bcm2835SPIClockDivider = 16;
#[doc = "< 8 = 31.25MHz on Rpi2, 50MHz on RPI3"]
pub const bcm2835SPIClockDivider_BCM2835_SPI_CLOCK_DIVIDER_8: bcm2835SPIClockDivider = 8;
#[doc = "< 4 = 62.5MHz on Rpi2, 100MHz on RPI3. Dont expect this speed to work reliably."]
pub const bcm2835SPIClockDivider_BCM2835_SPI_CLOCK_DIVIDER_4: bcm2835SPIClockDivider = 4;
#[doc = "< 2 = 125MHz on Rpi2, 200MHz on RPI3, fastest you can get. Dont expect this speed to work reliably."]
pub const bcm2835SPIClockDivider_BCM2835_SPI_CLOCK_DIVIDER_2: bcm2835SPIClockDivider = 2;
#[doc = "< 1 = 3.814697260kHz on Rpi2, 6.1035156kHz on RPI3, same as 0/65536"]
pub const bcm2835SPIClockDivider_BCM2835_SPI_CLOCK_DIVIDER_1: bcm2835SPIClockDivider = 1;
#[doc = " \\brief bcm2835SPIClockDivider\nSpecifies the divider used to generate the SPI clock from the system clock.\nFigures below give the divider, clock period and clock frequency.\nClock divided is based on nominal core clock rate of 250MHz on RPi1 and RPi2, and 400MHz on RPi3.\nIt is reported that (contrary to the documentation) any even divider may used.\nThe frequencies shown for each divider have been confirmed by measurement on RPi1 and RPi2.\nThe system clock frequency on RPi3 is different, so the frequency you get from a given divider will be different.\nSee comments in 'SPI Pins' for information about reliable SPI speeds.\nNote: it is possible to change the core clock rate of the RPi 3 back to 250MHz, by putting\n\\code\ncore_freq=250\n\\endcode\nin the config.txt"]
pub type bcm2835SPIClockDivider = ::std::os::raw::c_uint;
#[doc = "< 2500 = 10us = 100 kHz"]
pub const bcm2835I2CClockDivider_BCM2835_I2C_CLOCK_DIVIDER_2500: bcm2835I2CClockDivider = 2500;
#[doc = "< 622 = 2.504us = 399.3610 kHz"]
pub const bcm2835I2CClockDivider_BCM2835_I2C_CLOCK_DIVIDER_626: bcm2835I2CClockDivider = 626;
#[doc = "< 150 = 60ns = 1.666 MHz (default at reset)"]
pub const bcm2835I2CClockDivider_BCM2835_I2C_CLOCK_DIVIDER_150: bcm2835I2CClockDivider = 150;
#[doc = "< 148 = 59ns = 1.689 MHz"]
pub const bcm2835I2CClockDivider_BCM2835_I2C_CLOCK_DIVIDER_148: bcm2835I2CClockDivider = 148;
#[doc = " \\brief bcm2835I2CClockDivider\nSpecifies the divider used to generate the I2C clock from the system clock.\nClock divided is based on nominal base clock rate of 250MHz"]
pub type bcm2835I2CClockDivider = ::std::os::raw::c_uint;
#[doc = "< Success"]
pub const bcm2835I2CReasonCodes_BCM2835_I2C_REASON_OK: bcm2835I2CReasonCodes = 0;
#[doc = "< Received a NACK"]
pub const bcm2835I2CReasonCodes_BCM2835_I2C_REASON_ERROR_NACK: bcm2835I2CReasonCodes = 1;
#[doc = "< Received Clock Stretch Timeout"]
pub const bcm2835I2CReasonCodes_BCM2835_I2C_REASON_ERROR_CLKT: bcm2835I2CReasonCodes = 2;
#[doc = "< Not all data is sent / received"]
pub const bcm2835I2CReasonCodes_BCM2835_I2C_REASON_ERROR_DATA: bcm2835I2CReasonCodes = 4;
#[doc = "< Time out occurred during sending"]
pub const bcm2835I2CReasonCodes_BCM2835_I2C_REASON_ERROR_TIMEOUT: bcm2835I2CReasonCodes = 8;
#[doc = " \\brief bcm2835I2CReasonCodes\nSpecifies the reason codes for the bcm2835_i2c_write and bcm2835_i2c_read functions."]
pub type bcm2835I2CReasonCodes = ::std::os::raw::c_uint;
#[doc = "< 2048 = 9.375kHz"]
pub const bcm2835PWMClockDivider_BCM2835_PWM_CLOCK_DIVIDER_2048: bcm2835PWMClockDivider = 2048;
#[doc = "< 1024 = 18.75kHz"]
pub const bcm2835PWMClockDivider_BCM2835_PWM_CLOCK_DIVIDER_1024: bcm2835PWMClockDivider = 1024;
#[doc = "< 512 = 37.5kHz"]
pub const bcm2835PWMClockDivider_BCM2835_PWM_CLOCK_DIVIDER_512: bcm2835PWMClockDivider = 512;
#[doc = "< 256 = 75kHz"]
pub const bcm2835PWMClockDivider_BCM2835_PWM_CLOCK_DIVIDER_256: bcm2835PWMClockDivider = 256;
#[doc = "< 128 = 150kHz"]
pub const bcm2835PWMClockDivider_BCM2835_PWM_CLOCK_DIVIDER_128: bcm2835PWMClockDivider = 128;
#[doc = "< 64 = 300kHz"]
pub const bcm2835PWMClockDivider_BCM2835_PWM_CLOCK_DIVIDER_64: bcm2835PWMClockDivider = 64;
#[doc = "< 32 = 600.0kHz"]
pub const bcm2835PWMClockDivider_BCM2835_PWM_CLOCK_DIVIDER_32: bcm2835PWMClockDivider = 32;
#[doc = "< 16 = 1.2MHz"]
pub const bcm2835PWMClockDivider_BCM2835_PWM_CLOCK_DIVIDER_16: bcm2835PWMClockDivider = 16;
#[doc = "< 8 = 2.4MHz"]
pub const bcm2835PWMClockDivider_BCM2835_PWM_CLOCK_DIVIDER_8: bcm2835PWMClockDivider = 8;
#[doc = "< 4 = 4.8MHz"]
pub const bcm2835PWMClockDivider_BCM2835_PWM_CLOCK_DIVIDER_4: bcm2835PWMClockDivider = 4;
#[doc = "< 2 = 9.6MHz, fastest you can get"]
pub const bcm2835PWMClockDivider_BCM2835_PWM_CLOCK_DIVIDER_2: bcm2835PWMClockDivider = 2;
#[doc = "< 1 = 4.6875kHz, same as divider 4096"]
pub const bcm2835PWMClockDivider_BCM2835_PWM_CLOCK_DIVIDER_1: bcm2835PWMClockDivider = 1;
#[doc = " \\brief bcm2835PWMClockDivider\nSpecifies the divider used to generate the PWM clock from the system clock.\nFigures below give the divider, clock period and clock frequency.\nClock divided is based on nominal PWM base clock rate of 19.2MHz\nThe frequencies shown for each divider have been confirmed by measurement"]
pub type bcm2835PWMClockDivider = ::std::os::raw::c_uint;
unsafe extern "C" {
    #[doc = " Initialise the library by opening /dev/mem (if you are root)\nor /dev/gpiomem (if you are not)\nand getting pointers to the\ninternal memory for BCM 2835 device registers. You must call this (successfully)\nbefore calling any other\nfunctions in this library (except bcm2835_set_debug).\nIf bcm2835_init() fails by returning 0,\ncalling any other function may result in crashes or other failures.\nIf bcm2835_init() succeeds but you are not running as root, then only gpio operations\nare permitted, and calling any other functions may result in crashes or other failures. .\nPrints messages to stderr in case of errors.\n\\return 1 if successful else 0"]
    pub fn bcm2835_init() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Close the library, deallocating any allocated memory and closing /dev/mem\n\\return 1 if successful else 0"]
    pub fn bcm2835_close() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Sets the debug level of the library.\nA value of 1 prevents mapping to /dev/mem, and makes the library print out\nwhat it would do, rather than accessing the GPIO registers.\nA value of 0, the default, causes normal operation.\nCall this before calling bcm2835_init();\n\\param[in] debug The new debug level. 1 means debug"]
    pub fn bcm2835_set_debug(debug: u8);
}
unsafe extern "C" {
    #[doc = " Returns the version number of the library, same as BCM2835_VERSION\n\\return the current library version number"]
    pub fn bcm2835_version() -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    #[doc = " Gets the base of a register\n\\param[in] regbase You can use one of the common values BCM2835_REGBASE_*\nin \\ref bcm2835RegisterBase\n\\return the register base\n\\sa Physical Addresses"]
    pub fn bcm2835_regbase(regbase: u8) -> *mut u32;
}
unsafe extern "C" {
    #[doc = " Reads 32 bit value from a peripheral address WITH a memory barrier before and after each read.\nThis is safe, but slow.  The MB before protects this read from any in-flight reads that didn't\nuse a MB.  The MB after protects subsequent reads from another peripheral.\n\n\\param[in] paddr Physical address to read from. See BCM2835_GPIO_BASE etc.\n\\return the value read from the 32 bit register\n\\sa Physical Addresses"]
    pub fn bcm2835_peri_read(paddr: *mut u32) -> u32;
}
unsafe extern "C" {
    #[doc = " Reads 32 bit value from a peripheral address WITHOUT the read barriers\nYou should only use this when:\no your code has previously called bcm2835_peri_read() for a register\nwithin the same peripheral, and no read or write to another peripheral has occurred since.\no your code has called bcm2835_memory_barrier() since the last access to ANOTHER peripheral.\n\n\\param[in] paddr Physical address to read from. See BCM2835_GPIO_BASE etc.\n\\return the value read from the 32 bit register\n\\sa Physical Addresses"]
    pub fn bcm2835_peri_read_nb(paddr: *mut u32) -> u32;
}
unsafe extern "C" {
    #[doc = " Writes 32 bit value from a peripheral address WITH a memory barrier before and after each write\nThis is safe, but slow.  The MB before ensures that any in-flight write to another peripheral\ncompletes before this write is issued.  The MB after ensures that subsequent reads and writes\nto another peripheral will see the effect of this write.\n\nThis is a tricky optimization; if you aren't sure, use the barrier version.\n\n\\param[in] paddr Physical address to read from. See BCM2835_GPIO_BASE etc.\n\\param[in] value The 32 bit value to write\n\\sa Physical Addresses"]
    pub fn bcm2835_peri_write(paddr: *mut u32, value: u32);
}
unsafe extern "C" {
    #[doc = " Writes 32 bit value from a peripheral address without the write barrier\nYou should only use this when:\no your code has previously called bcm2835_peri_write() for a register\nwithin the same peripheral, and no other peripheral access has occurred since.\no your code has called bcm2835_memory_barrier() since the last access to ANOTHER peripheral.\n\nThis is a tricky optimization; if you aren't sure, use the barrier version.\n\n\\param[in] paddr Physical address to read from. See BCM2835_GPIO_BASE etc.\n\\param[in] value The 32 bit value to write\n\\sa Physical Addresses"]
    pub fn bcm2835_peri_write_nb(paddr: *mut u32, value: u32);
}
unsafe extern "C" {
    #[doc = " Alters a number of bits in a 32 peripheral regsiter.\nIt reads the current valu and then alters the bits defines as 1 in mask,\naccording to the bit value in value.\nAll other bits that are 0 in the mask are unaffected.\nUse this to alter a subset of the bits in a register.\nMemory barriers are used.  Note that this is not atomic; an interrupt\nroutine can cause unexpected results.\n\\param[in] paddr Physical address to read from. See BCM2835_GPIO_BASE etc.\n\\param[in] value The 32 bit value to write, masked in by mask.\n\\param[in] mask Bitmask that defines the bits that will be altered in the register.\n\\sa Physical Addresses"]
    pub fn bcm2835_peri_set_bits(paddr: *mut u32, value: u32, mask: u32);
}
unsafe extern "C" {
    #[doc = " Sets the Function Select register for the given pin, which configures\nthe pin as Input, Output or one of the 6 alternate functions.\n\\param[in] pin GPIO number, or one of RPI_GPIO_P1_* from \\ref RPiGPIOPin.\n\\param[in] mode Mode to set the pin to, one of BCM2835_GPIO_FSEL_* from \\ref bcm2835FunctionSelect"]
    pub fn bcm2835_gpio_fsel(pin: u8, mode: u8);
}
unsafe extern "C" {
    #[doc = " Sets the specified pin output to\nHIGH.\n\\param[in] pin GPIO number, or one of RPI_GPIO_P1_* from \\ref RPiGPIOPin.\n\\sa bcm2835_gpio_write()"]
    pub fn bcm2835_gpio_set(pin: u8);
}
unsafe extern "C" {
    #[doc = " Sets the specified pin output to\nLOW.\n\\param[in] pin GPIO number, or one of RPI_GPIO_P1_* from \\ref RPiGPIOPin.\n\\sa bcm2835_gpio_write()"]
    pub fn bcm2835_gpio_clr(pin: u8);
}
unsafe extern "C" {
    #[doc = " Sets any of the first 32 GPIO output pins specified in the mask to\nHIGH.\n\\param[in] mask Mask of pins to affect. Use eg: (1 << RPI_GPIO_P1_03) | (1 << RPI_GPIO_P1_05)\n\\sa bcm2835_gpio_write_multi()"]
    pub fn bcm2835_gpio_set_multi(mask: u32);
}
unsafe extern "C" {
    #[doc = " Sets any of the first 32 GPIO output pins specified in the mask to\nLOW.\n\\param[in] mask Mask of pins to affect. Use eg: (1 << RPI_GPIO_P1_03) | (1 << RPI_GPIO_P1_05)\n\\sa bcm2835_gpio_write_multi()"]
    pub fn bcm2835_gpio_clr_multi(mask: u32);
}
unsafe extern "C" {
    #[doc = " Reads the current level on the specified\npin and returns either HIGH or LOW. Works whether or not the pin\nis an input or an output.\n\\param[in] pin GPIO number, or one of RPI_GPIO_P1_* from \\ref RPiGPIOPin.\n\\return the current level  either HIGH or LOW"]
    pub fn bcm2835_gpio_lev(pin: u8) -> u8;
}
unsafe extern "C" {
    #[doc = " Event Detect Status.\nTests whether the specified pin has detected a level or edge\nas requested by bcm2835_gpio_ren(), bcm2835_gpio_fen(), bcm2835_gpio_hen(),\nbcm2835_gpio_len(), bcm2835_gpio_aren(), bcm2835_gpio_afen().\nClear the flag for a given pin by calling bcm2835_gpio_set_eds(pin);\n\\param[in] pin GPIO number, or one of RPI_GPIO_P1_* from \\ref RPiGPIOPin.\n\\return HIGH if the event detect status for the given pin is true."]
    pub fn bcm2835_gpio_eds(pin: u8) -> u8;
}
unsafe extern "C" {
    #[doc = " Same as bcm2835_gpio_eds() but checks if any of the pins specified in\nthe mask have detected a level or edge.\n\\param[in] mask Mask of pins to check. Use eg: (1 << RPI_GPIO_P1_03) | (1 << RPI_GPIO_P1_05)\n\\return Mask of pins HIGH if the event detect status for the given pin is true."]
    pub fn bcm2835_gpio_eds_multi(mask: u32) -> u32;
}
unsafe extern "C" {
    #[doc = " Sets the Event Detect Status register for a given pin to 1,\nwhich has the effect of clearing the flag. Use this afer seeing\nan Event Detect Status on the pin.\n\\param[in] pin GPIO number, or one of RPI_GPIO_P1_* from \\ref RPiGPIOPin."]
    pub fn bcm2835_gpio_set_eds(pin: u8);
}
unsafe extern "C" {
    #[doc = " Same as bcm2835_gpio_set_eds() but clears the flag for any pin which\nis set in the mask.\n\\param[in] mask Mask of pins to clear. Use eg: (1 << RPI_GPIO_P1_03) | (1 << RPI_GPIO_P1_05)"]
    pub fn bcm2835_gpio_set_eds_multi(mask: u32);
}
unsafe extern "C" {
    #[doc = " Enable Rising Edge Detect Enable for the specified pin.\nWhen a rising edge is detected, sets the appropriate pin in Event Detect Status.\nThe GPRENn registers use\nsynchronous edge detection. This means the input signal is sampled using the\nsystem clock and then it is looking for a ?011? pattern on the sampled signal. This\nhas the effect of suppressing glitches.\n\\param[in] pin GPIO number, or one of RPI_GPIO_P1_* from \\ref RPiGPIOPin."]
    pub fn bcm2835_gpio_ren(pin: u8);
}
unsafe extern "C" {
    #[doc = " Disable Rising Edge Detect Enable for the specified pin.\n\\param[in] pin GPIO number, or one of RPI_GPIO_P1_* from \\ref RPiGPIOPin."]
    pub fn bcm2835_gpio_clr_ren(pin: u8);
}
unsafe extern "C" {
    #[doc = " Enable Falling Edge Detect Enable for the specified pin.\nWhen a falling edge is detected, sets the appropriate pin in Event Detect Status.\nThe GPRENn registers use\nsynchronous edge detection. This means the input signal is sampled using the\nsystem clock and then it is looking for a ?100? pattern on the sampled signal. This\nhas the effect of suppressing glitches.\n\\param[in] pin GPIO number, or one of RPI_GPIO_P1_* from \\ref RPiGPIOPin."]
    pub fn bcm2835_gpio_fen(pin: u8);
}
unsafe extern "C" {
    #[doc = " Disable Falling Edge Detect Enable for the specified pin.\n\\param[in] pin GPIO number, or one of RPI_GPIO_P1_* from \\ref RPiGPIOPin."]
    pub fn bcm2835_gpio_clr_fen(pin: u8);
}
unsafe extern "C" {
    #[doc = " Enable High Detect Enable for the specified pin.\nWhen a HIGH level is detected on the pin, sets the appropriate pin in Event Detect Status.\n\\param[in] pin GPIO number, or one of RPI_GPIO_P1_* from \\ref RPiGPIOPin."]
    pub fn bcm2835_gpio_hen(pin: u8);
}
unsafe extern "C" {
    #[doc = " Disable High Detect Enable for the specified pin.\n\\param[in] pin GPIO number, or one of RPI_GPIO_P1_* from \\ref RPiGPIOPin."]
    pub fn bcm2835_gpio_clr_hen(pin: u8);
}
unsafe extern "C" {
    #[doc = " Enable Low Detect Enable for the specified pin.\nWhen a LOW level is detected on the pin, sets the appropriate pin in Event Detect Status.\n\\param[in] pin GPIO number, or one of RPI_GPIO_P1_* from \\ref RPiGPIOPin."]
    pub fn bcm2835_gpio_len(pin: u8);
}
unsafe extern "C" {
    #[doc = " Disable Low Detect Enable for the specified pin.\n\\param[in] pin GPIO number, or one of RPI_GPIO_P1_* from \\ref RPiGPIOPin."]
    pub fn bcm2835_gpio_clr_len(pin: u8);
}
unsafe extern "C" {
    #[doc = " Enable Asynchronous Rising Edge Detect Enable for the specified pin.\nWhen a rising edge is detected, sets the appropriate pin in Event Detect Status.\nAsynchronous means the incoming signal is not sampled by the system clock. As such\nrising edges of very short duration can be detected.\n\\param[in] pin GPIO number, or one of RPI_GPIO_P1_* from \\ref RPiGPIOPin."]
    pub fn bcm2835_gpio_aren(pin: u8);
}
unsafe extern "C" {
    #[doc = " Disable Asynchronous Rising Edge Detect Enable for the specified pin.\n\\param[in] pin GPIO number, or one of RPI_GPIO_P1_* from \\ref RPiGPIOPin."]
    pub fn bcm2835_gpio_clr_aren(pin: u8);
}
unsafe extern "C" {
    #[doc = " Enable Asynchronous Falling Edge Detect Enable for the specified pin.\nWhen a falling edge is detected, sets the appropriate pin in Event Detect Status.\nAsynchronous means the incoming signal is not sampled by the system clock. As such\nfalling edges of very short duration can be detected.\n\\param[in] pin GPIO number, or one of RPI_GPIO_P1_* from \\ref RPiGPIOPin."]
    pub fn bcm2835_gpio_afen(pin: u8);
}
unsafe extern "C" {
    #[doc = " Disable Asynchronous Falling Edge Detect Enable for the specified pin.\n\\param[in] pin GPIO number, or one of RPI_GPIO_P1_* from \\ref RPiGPIOPin."]
    pub fn bcm2835_gpio_clr_afen(pin: u8);
}
unsafe extern "C" {
    #[doc = " Sets the Pull-up/down register for the given pin. This is\nused with bcm2835_gpio_pudclk() to set the  Pull-up/down resistor for the given pin.\nHowever, it is usually more convenient to use bcm2835_gpio_set_pud().\n\\param[in] pud The desired Pull-up/down mode. One of BCM2835_GPIO_PUD_* from bcm2835PUDControl\nOn the RPI 4, although this function and bcm2835_gpio_pudclk() are supported for backward\ncompatibility, new code should always use bcm2835_gpio_set_pud().\n\\sa bcm2835_gpio_set_pud()"]
    pub fn bcm2835_gpio_pud(pud: u8);
}
unsafe extern "C" {
    #[doc = " Clocks the Pull-up/down value set earlier by bcm2835_gpio_pud() into the pin.\n\\param[in] pin GPIO number, or one of RPI_GPIO_P1_* from \\ref RPiGPIOPin.\n\\param[in] on HIGH to clock the value from bcm2835_gpio_pud() into the pin.\nLOW to remove the clock.\n\nOn the RPI 4, although this function and bcm2835_gpio_pud() are supported for backward\ncompatibility, new code should always use bcm2835_gpio_set_pud().\n\n\\sa bcm2835_gpio_set_pud()"]
    pub fn bcm2835_gpio_pudclk(pin: u8, on: u8);
}
unsafe extern "C" {
    #[doc = " Reads and returns the Pad Control for the given GPIO group.\nCaution: requires root access.\n\\param[in] group The GPIO pad group number, one of BCM2835_PAD_GROUP_GPIO_*\n\\return Mask of bits from BCM2835_PAD_* from \\ref bcm2835PadGroup"]
    pub fn bcm2835_gpio_pad(group: u8) -> u32;
}
unsafe extern "C" {
    #[doc = " Sets the Pad Control for the given GPIO group.\nCaution: requires root access.\n\\param[in] group The GPIO pad group number, one of BCM2835_PAD_GROUP_GPIO_*\n\\param[in] control Mask of bits from BCM2835_PAD_* from \\ref bcm2835PadGroup. Note\nthat it is not necessary to include BCM2835_PAD_PASSWRD in the mask as this\nis automatically included."]
    pub fn bcm2835_gpio_set_pad(group: u8, control: u32);
}
unsafe extern "C" {
    #[doc = " Delays for the specified number of milliseconds.\nUses nanosleep(), and therefore does not use CPU until the time is up.\nHowever, you are at the mercy of nanosleep(). From the manual for nanosleep():\nIf the interval specified in req is not an exact multiple of the granularity\nunderlying  clock  (see  time(7)),  then the interval will be\nrounded up to the next multiple. Furthermore, after the sleep completes,\nthere may still be a delay before the CPU becomes free to once\nagain execute the calling thread.\n\\param[in] millis Delay in milliseconds"]
    pub fn bcm2835_delay(millis: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    #[doc = " Delays for the specified number of microseconds.\nUses a combination of nanosleep() and a busy wait loop on the BCM2835 system timers,\nHowever, you are at the mercy of nanosleep(). From the manual for nanosleep():\nIf the interval specified in req is not an exact multiple of the granularity\nunderlying  clock  (see  time(7)),  then the interval will be\nrounded up to the next multiple. Furthermore, after the sleep completes,\nthere may still be a delay before the CPU becomes free to once\nagain execute the calling thread.\nFor times less than about 450 microseconds, uses a busy wait on the System Timer.\nIt is reported that a delay of 0 microseconds on RaspberryPi will in fact\nresult in a delay of about 80 microseconds. Your mileage may vary.\n\\param[in] micros Delay in microseconds"]
    pub fn bcm2835_delayMicroseconds(micros: u64);
}
unsafe extern "C" {
    #[doc = " Sets the output state of the specified pin\n\\param[in] pin GPIO number, or one of RPI_GPIO_P1_* from \\ref RPiGPIOPin.\n\\param[in] on HIGH sets the output to HIGH and LOW to LOW."]
    pub fn bcm2835_gpio_write(pin: u8, on: u8);
}
unsafe extern "C" {
    #[doc = " Sets any of the first 32 GPIO output pins specified in the mask to the state given by on\n\\param[in] mask Mask of pins to affect. Use eg: (1 << RPI_GPIO_P1_03) | (1 << RPI_GPIO_P1_05)\n\\param[in] on HIGH sets the output to HIGH and LOW to LOW."]
    pub fn bcm2835_gpio_write_multi(mask: u32, on: u8);
}
unsafe extern "C" {
    #[doc = " Sets the first 32 GPIO output pins specified in the mask to the value given by value\n\\param[in] value values required for each bit masked in by mask, eg: (1 << RPI_GPIO_P1_03) | (1 << RPI_GPIO_P1_05)\n\\param[in] mask Mask of pins to affect. Use eg: (1 << RPI_GPIO_P1_03) | (1 << RPI_GPIO_P1_05)"]
    pub fn bcm2835_gpio_write_mask(value: u32, mask: u32);
}
unsafe extern "C" {
    #[doc = " Sets the Pull-up/down mode for the specified pin. This is more convenient than\nclocking the mode in with bcm2835_gpio_pud() and bcm2835_gpio_pudclk().\n\\param[in] pin GPIO number, or one of RPI_GPIO_P1_* from \\ref RPiGPIOPin.\n\\param[in] pud The desired Pull-up/down mode. One of BCM2835_GPIO_PUD_* from bcm2835PUDControl"]
    pub fn bcm2835_gpio_set_pud(pin: u8, pud: u8);
}
unsafe extern "C" {
    #[doc = " On the BCM2711 based RPI 4, gets the current Pull-up/down mode for the specified pin.\nReturns one of BCM2835_GPIO_PUD_* from bcm2835PUDControl.\nOn earlier RPI versions not based on the BCM2711, returns BCM2835_GPIO_PUD_ERROR\n\\param[in] pin GPIO number, or one of RPI_GPIO_P1_* from \\ref RPiGPIOPin."]
    pub fn bcm2835_gpio_get_pud(pin: u8) -> u8;
}
unsafe extern "C" {
    #[doc = " Start SPI operations.\nForces RPi SPI0 pins P1-19 (MOSI), P1-21 (MISO), P1-23 (CLK), P1-24 (CE0) and P1-26 (CE1)\nto alternate function ALT0, which enables those pins for SPI interface.\nYou should call bcm2835_spi_end() when all SPI funcitons are complete to return the pins to\ntheir default functions.\n\\sa  bcm2835_spi_end()\n\\return 1 if successful, 0 otherwise (perhaps because you are not running as root)"]
    pub fn bcm2835_spi_begin() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " End SPI operations.\nSPI0 pins P1-19 (MOSI), P1-21 (MISO), P1-23 (CLK), P1-24 (CE0) and P1-26 (CE1)\nare returned to their default INPUT behaviour."]
    pub fn bcm2835_spi_end();
}
unsafe extern "C" {
    #[doc = " Sets the SPI bit order\nSet the bit order to be used for transmit and receive. The bcm2835 SPI0 only supports BCM2835_SPI_BIT_ORDER_MSB,\nso if you select BCM2835_SPI_BIT_ORDER_LSB, the bytes will be reversed in software.\nThe library defaults to BCM2835_SPI_BIT_ORDER_MSB.\n\\param[in] order The desired bit order, one of BCM2835_SPI_BIT_ORDER_*,\nsee \\ref bcm2835SPIBitOrder"]
    pub fn bcm2835_spi_setBitOrder(order: u8);
}
unsafe extern "C" {
    #[doc = " Sets the SPI clock divider and therefore the\nSPI clock speed.\n\\param[in] divider The desired SPI clock divider, one of BCM2835_SPI_CLOCK_DIVIDER_*,\nsee \\ref bcm2835SPIClockDivider"]
    pub fn bcm2835_spi_setClockDivider(divider: u16);
}
unsafe extern "C" {
    #[doc = " Sets the SPI clock divider by converting the speed parameter to\nthe equivalent SPI clock divider. ( see \\sa bcm2835_spi_setClockDivider)\n\\param[in] speed_hz The desired SPI clock speed in Hz"]
    pub fn bcm2835_spi_set_speed_hz(speed_hz: u32);
}
unsafe extern "C" {
    #[doc = " Sets the SPI data mode\nSets the clock polariy and phase\n\\param[in] mode The desired data mode, one of BCM2835_SPI_MODE*,\nsee \\ref bcm2835SPIMode"]
    pub fn bcm2835_spi_setDataMode(mode: u8);
}
unsafe extern "C" {
    #[doc = " Sets the chip select pin(s)\nWhen an bcm2835_spi_transfer() is made, the selected pin(s) will be asserted during the\ntransfer.\n\\param[in] cs Specifies the CS pins(s) that are used to activate the desired slave.\nOne of BCM2835_SPI_CS*, see \\ref bcm2835SPIChipSelect"]
    pub fn bcm2835_spi_chipSelect(cs: u8);
}
unsafe extern "C" {
    #[doc = " Sets the chip select pin polarity for a given pin\nWhen an bcm2835_spi_transfer() occurs, the currently selected chip select pin(s)\nwill be asserted to the\nvalue given by active. When transfers are not happening, the chip select pin(s)\nreturn to the complement (inactive) value.\n\\param[in] cs The chip select pin to affect\n\\param[in] active Whether the chip select pin is to be active HIGH"]
    pub fn bcm2835_spi_setChipSelectPolarity(cs: u8, active: u8);
}
unsafe extern "C" {
    #[doc = " Transfers one byte to and from the currently selected SPI slave.\nAsserts the currently selected CS pins (as previously set by bcm2835_spi_chipSelect)\nduring the transfer.\nClocks the 8 bit value out on MOSI, and simultaneously clocks in data from MISO.\nReturns the read data byte from the slave.\nUses polled transfer as per section 10.6.1 of the BCM 2835 ARM Peripherls manual\n\\param[in] value The 8 bit data byte to write to MOSI\n\\return The 8 bit byte simultaneously read from  MISO\n\\sa bcm2835_spi_transfern()"]
    pub fn bcm2835_spi_transfer(value: u8) -> u8;
}
unsafe extern "C" {
    #[doc = " Transfers any number of bytes to and from the currently selected SPI slave.\nAsserts the currently selected CS pins (as previously set by bcm2835_spi_chipSelect)\nduring the transfer.\nClocks the len 8 bit bytes out on MOSI, and simultaneously clocks in data from MISO.\nThe data read read from the slave is placed into rbuf. rbuf must be at least len bytes long\nUses polled transfer as per section 10.6.1 of the BCM 2835 ARM Peripherls manual\n\\param[in] tbuf Buffer of bytes to send.\n\\param[out] rbuf Received bytes will by put in this buffer\n\\param[in] len Number of bytes in the tbuf buffer, and the number of bytes to send/received\n\\sa bcm2835_spi_transfer()"]
    pub fn bcm2835_spi_transfernb(
        tbuf: *mut ::std::os::raw::c_char,
        rbuf: *mut ::std::os::raw::c_char,
        len: u32,
    );
}
unsafe extern "C" {
    #[doc = " Transfers any number of bytes to and from the currently selected SPI slave\nusing bcm2835_spi_transfernb.\nThe returned data from the slave replaces the transmitted data in the buffer.\n\\param[in,out] buf Buffer of bytes to send. Received bytes will replace the contents\n\\param[in] len Number of bytes int eh buffer, and the number of bytes to send/received\n\\sa bcm2835_spi_transfer()"]
    pub fn bcm2835_spi_transfern(buf: *mut ::std::os::raw::c_char, len: u32);
}
unsafe extern "C" {
    #[doc = " Transfers any number of bytes to the currently selected SPI slave.\nAsserts the currently selected CS pins (as previously set by bcm2835_spi_chipSelect)\nduring the transfer.\n\\param[in] buf Buffer of bytes to send.\n\\param[in] len Number of bytes in the buf buffer, and the number of bytes to send"]
    pub fn bcm2835_spi_writenb(buf: *const ::std::os::raw::c_char, len: u32);
}
unsafe extern "C" {
    #[doc = " Transfers half-word to the currently selected SPI slave.\nAsserts the currently selected CS pins (as previously set by bcm2835_spi_chipSelect)\nduring the transfer.\nClocks the 8 bit value out on MOSI, and simultaneously clocks in data from MISO.\nUses polled transfer as per section 10.6.1 of the BCM 2835 ARM Peripherls manual\n\\param[in] data The 8 bit data byte to write to MOSI\n\\sa bcm2835_spi_writenb()"]
    pub fn bcm2835_spi_write(data: u16);
}
unsafe extern "C" {
    #[doc = " Start AUX SPI operations.\nForces RPi AUX SPI pins P1-38 (MOSI), P1-38 (MISO), P1-40 (CLK) and P1-36 (CE2)\nto alternate function ALT4, which enables those pins for SPI interface.\n\\return 1 if successful, 0 otherwise (perhaps because you are not running as root)"]
    pub fn bcm2835_aux_spi_begin() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " End AUX SPI operations.\nSPI1 pins P1-38 (MOSI), P1-38 (MISO), P1-40 (CLK) and P1-36 (CE2)\nare returned to their default INPUT behaviour."]
    pub fn bcm2835_aux_spi_end();
}
unsafe extern "C" {
    #[doc = " Sets the AUX SPI clock divider and therefore the AUX SPI clock speed.\n\\param[in] divider The desired AUX SPI clock divider."]
    pub fn bcm2835_aux_spi_setClockDivider(divider: u16);
}
unsafe extern "C" {
    #[doc = " Calculates the input for \\sa bcm2835_aux_spi_setClockDivider\n @param speed_hz A value between \\sa BCM2835_AUX_SPI_CLOCK_MIN and \\sa BCM2835_AUX_SPI_CLOCK_MAX\n @return Input for \\sa bcm2835_aux_spi_setClockDivider"]
    pub fn bcm2835_aux_spi_CalcClockDivider(speed_hz: u32) -> u16;
}
unsafe extern "C" {
    #[doc = " Transfers half-word to the AUX SPI slave.\nAsserts the currently selected CS pins during the transfer.\n\\param[in] data The 8 bit data byte to write to MOSI\n\\return The 16 bit byte simultaneously read from  MISO\n\\sa bcm2835_spi_transfern()"]
    pub fn bcm2835_aux_spi_write(data: u16);
}
unsafe extern "C" {
    #[doc = " Transfers any number of bytes to the AUX SPI slave.\nAsserts the CE2 pin during the transfer.\n\\param[in] buf Buffer of bytes to send.\n\\param[in] len Number of bytes in the tbuf buffer, and the number of bytes to send"]
    pub fn bcm2835_aux_spi_writenb(buf: *const ::std::os::raw::c_char, len: u32);
}
unsafe extern "C" {
    #[doc = " Transfers any number of bytes to and from the AUX SPI slave\nusing bcm2835_aux_spi_transfernb.\nThe returned data from the slave replaces the transmitted data in the buffer.\n\\param[in,out] buf Buffer of bytes to send. Received bytes will replace the contents\n\\param[in] len Number of bytes in the buffer, and the number of bytes to send/received\n\\sa bcm2835_aux_spi_transfer()"]
    pub fn bcm2835_aux_spi_transfern(buf: *mut ::std::os::raw::c_char, len: u32);
}
unsafe extern "C" {
    #[doc = " Transfers any number of bytes to and from the AUX SPI slave.\nAsserts the CE2 pin during the transfer.\nClocks the len 8 bit bytes out on MOSI, and simultaneously clocks in data from MISO.\nThe data read read from the slave is placed into rbuf. rbuf must be at least len bytes long\n\\param[in] tbuf Buffer of bytes to send.\n\\param[out] rbuf Received bytes will by put in this buffer\n\\param[in] len Number of bytes in the tbuf buffer, and the number of bytes to send/received"]
    pub fn bcm2835_aux_spi_transfernb(
        tbuf: *const ::std::os::raw::c_char,
        rbuf: *mut ::std::os::raw::c_char,
        len: u32,
    );
}
unsafe extern "C" {
    #[doc = " Transfers one byte to and from the AUX SPI slave.\nClocks the 8 bit value out on MOSI, and simultaneously clocks in data from MISO.\nReturns the read data byte from the slave.\n\\param[in] value The 8 bit data byte to write to MOSI\n\\return The 8 bit byte simultaneously read from MISO\n\\sa bcm2835_aux_spi_transfern()"]
    pub fn bcm2835_aux_spi_transfer(value: u8) -> u8;
}
unsafe extern "C" {
    #[doc = " Start I2C operations.\nForces RPi I2C pins P1-03 (SDA) and P1-05 (SCL)\nto alternate function ALT0, which enables those pins for I2C interface.\nYou should call bcm2835_i2c_end() when all I2C functions are complete to return the pins to\ntheir default functions\n\\return 1 if successful, 0 otherwise (perhaps because you are not running as root)\n\\sa  bcm2835_i2c_end()"]
    pub fn bcm2835_i2c_begin() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " End I2C operations.\nI2C pins P1-03 (SDA) and P1-05 (SCL)\nare returned to their default INPUT behaviour."]
    pub fn bcm2835_i2c_end();
}
unsafe extern "C" {
    #[doc = " Sets the I2C slave address.\n\\param[in] addr The I2C slave address."]
    pub fn bcm2835_i2c_setSlaveAddress(addr: u8);
}
unsafe extern "C" {
    #[doc = " Sets the I2C clock divider and therefore the I2C clock speed.\n\\param[in] divider The desired I2C clock divider, one of BCM2835_I2C_CLOCK_DIVIDER_*,\nsee \\ref bcm2835I2CClockDivider"]
    pub fn bcm2835_i2c_setClockDivider(divider: u16);
}
unsafe extern "C" {
    #[doc = " Sets the I2C clock divider by converting the baudrate parameter to\nthe equivalent I2C clock divider. ( see \\sa bcm2835_i2c_setClockDivider)\nFor the I2C standard 100khz you would set baudrate to 100000\nThe use of baudrate corresponds to its use in the I2C kernel device\ndriver. (Of course, bcm2835 has nothing to do with the kernel driver)"]
    pub fn bcm2835_i2c_set_baudrate(baudrate: u32);
}
unsafe extern "C" {
    #[doc = " Transfers any number of bytes to the currently selected I2C slave.\n(as previously set by \\sa bcm2835_i2c_setSlaveAddress)\n\\param[in] buf Buffer of bytes to send.\n\\param[in] len Number of bytes in the buf buffer, and the number of bytes to send.\n\\return reason see \\ref bcm2835I2CReasonCodes"]
    pub fn bcm2835_i2c_write(buf: *const ::std::os::raw::c_char, len: u32) -> u8;
}
unsafe extern "C" {
    #[doc = " Transfers any number of bytes from the currently selected I2C slave.\n(as previously set by \\sa bcm2835_i2c_setSlaveAddress)\n\\param[in] buf Buffer of bytes to receive.\n\\param[in] len Number of bytes in the buf buffer, and the number of bytes to received.\n\\return reason see \\ref bcm2835I2CReasonCodes"]
    pub fn bcm2835_i2c_read(buf: *mut ::std::os::raw::c_char, len: u32) -> u8;
}
unsafe extern "C" {
    #[doc = " Allows reading from I2C slaves that require a repeated start (without any prior stop)\nto read after the required slave register has been set. For example, the popular\nMPL3115A2 pressure and temperature sensor. Note that your device must support or\nrequire this mode. If your device does not require this mode then the standard\ncombined:\n\\sa bcm2835_i2c_write\n\\sa bcm2835_i2c_read\nare a better choice.\nWill read from the slave previously set by \\sa bcm2835_i2c_setSlaveAddress\n\\param[in] regaddr Buffer containing the slave register you wish to read from.\n\\param[in] buf Buffer of bytes to receive.\n\\param[in] len Number of bytes in the buf buffer, and the number of bytes to received.\n\\return reason see \\ref bcm2835I2CReasonCodes"]
    pub fn bcm2835_i2c_read_register_rs(
        regaddr: *mut ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        len: u32,
    ) -> u8;
}
unsafe extern "C" {
    #[doc = " Allows sending an arbitrary number of bytes to I2C slaves before issuing a repeated\nstart (with no prior stop) and reading a response.\nNecessary for devices that require such behavior, such as the MLX90620.\nWill write to and read from the slave previously set by \\sa bcm2835_i2c_setSlaveAddress\n\\param[in] cmds Buffer containing the bytes to send before the repeated start condition.\n\\param[in] cmds_len Number of bytes to send from cmds buffer\n\\param[in] buf Buffer of bytes to receive.\n\\param[in] buf_len Number of bytes to receive in the buf buffer.\n\\return reason see \\ref bcm2835I2CReasonCodes"]
    pub fn bcm2835_i2c_write_read_rs(
        cmds: *mut ::std::os::raw::c_char,
        cmds_len: u32,
        buf: *mut ::std::os::raw::c_char,
        buf_len: u32,
    ) -> u8;
}
unsafe extern "C" {
    #[doc = " \\defgroup smi SMI bus support\nAllows access to SMI bus\n@{\n/\n/*! Start SMI operations.\nForces RPi SMI pins P1-19 (MOSI), P1-21 (MISO), P1-23 (CLK), P1-24 (CE0) and P1-26 (CE1)\nto alternate function ALT1, which enables those pins for SMI interface.\nYou should call bcm2835_smi_end() when all SMI functions are complete to return the pins to\ntheir default functions.\nOnly address bits SA0 to SA3 are available as RPi uses GPIO0 (SA5) and GPIO1 (SA4) for I2C\nHAT identification EEPROM access\n\\sa  bcm2835_smi_end()\n\\return 1 if successful, 0 otherwise (perhaps because you are not running as root)"]
    pub fn bcm2835_smi_begin() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " End SMI operations.\nSMI pins P1-19 (MOSI), P1-21 (MISO), P1-23 (CLK), P1-24 (CE0) and P1-26 (CE1)\nare returned to their default INPUT behaviour."]
    pub fn bcm2835_smi_end();
}
unsafe extern "C" {
    #[doc = " Setup SMI bus cycle timing parameters\nThere are four SMI channels for read operation and four channels for write operation\nCycles are expressed as multiple of 8ns\nNote that Pace cycles are not used (no effect on hardware) but they are required for\nconfiguration. It is recommended to set this value to 1 (and not 0) to have the\nsmallest cycle in case the hardware would recognize it\n\\param[in] smichannel SMI configuration slot to setup (0 to 3)\n\\param[in] readchannel Set to 1 to configure the read channel (0 = configure write channel)\n\\param[in] setupcycles Time between address assertion on bus and OE/WR signal assertion\n\\param[in] strobecycles Duration of OE/WR signal assertion\n\\param[in] holdcycles Time after OE/WR deassertion before address is deasserted\n\\param[in] pacecycles Time before next SMI bus cycle"]
    pub fn bcm2835_smi_set_timing(
        smichannel: u32,
        readchannel: u32,
        setupcycles: u32,
        strobecycles: u32,
        holdcycles: u32,
        pacecycles: u32,
    );
}
unsafe extern "C" {
    #[doc = " Transfers one byte to SMI bus.\nUses polled transfer as described in BCM 2835 ARM Peripherals manual\n\\param[in] timingslot SMI configuration slot to use (0 to 3)\n\\param[in] data The data byte to write\n\\param[in] address The address to write to\n\\sa bcm2835_smi_writenb()"]
    pub fn bcm2835_smi_write(smichannel: u32, data: u8, address: u32);
}
unsafe extern "C" {
    #[doc = " Reads one byte from SMI bus.\nUses polled transfer as described in BCM 2835 ARM Peripherals manual\n\\param[in] smichannel SMI configuration slot to use (0 to 3)\n\\param[in] address The address to read from\n\\return value read from SMI bus\n\\sa bcm2835_smi_readnb()"]
    pub fn bcm2835_smi_read(smichannel: u32, address: u32) -> u32;
}
unsafe extern "C" {
    #[doc = " Read the System Timer Counter register.\n\\return the value read from the System Timer Counter Lower 32 bits register"]
    pub fn bcm2835_st_read() -> u64;
}
unsafe extern "C" {
    #[doc = " Delays for the specified number of microseconds with offset.\n\\param[in] offset_micros Offset in microseconds\n\\param[in] micros Delay in microseconds"]
    pub fn bcm2835_st_delay(offset_micros: u64, micros: u64);
}
unsafe extern "C" {
    #[doc = " Sets the PWM clock divisor,\nto control the basic PWM pulse widths.\n\\param[in] divisor Divides the basic 19.2MHz PWM clock. You can use one of the common\nvalues BCM2835_PWM_CLOCK_DIVIDER_* in \\ref bcm2835PWMClockDivider"]
    pub fn bcm2835_pwm_set_clock(divisor: u32);
}
unsafe extern "C" {
    #[doc = " Sets the mode of the given PWM channel,\nallowing you to control the PWM mode and enable/disable that channel\n\\param[in] channel The PWM channel. 0 or 1.\n\\param[in] markspace Set true if you want Mark-Space mode. 0 for Balanced mode.\n\\param[in] enabled Set true to enable this channel and produce PWM pulses."]
    pub fn bcm2835_pwm_set_mode(channel: u8, markspace: u8, enabled: u8);
}
unsafe extern "C" {
    #[doc = " Sets the maximum range of the PWM output.\nThe data value can vary between 0 and this range to control PWM output\n\\param[in] channel The PWM channel. 0 or 1.\n\\param[in] range The maximum value permitted for DATA."]
    pub fn bcm2835_pwm_set_range(channel: u8, range: u32);
}
unsafe extern "C" {
    #[doc = " Sets the PWM pulse ratio to emit to DATA/RANGE,\nwhere RANGE is set by bcm2835_pwm_set_range().\n\\param[in] channel The PWM channel. 0 or 1.\n\\param[in] data Controls the PWM output ratio as a fraction of the range.\nCan vary from 0 to RANGE."]
    pub fn bcm2835_pwm_set_data(channel: u8, data: u32);
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __va_list_tag"][::std::mem::size_of::<__va_list_tag>() - 24usize];
    ["Alignment of __va_list_tag"][::std::mem::align_of::<__va_list_tag>() - 8usize];
    ["Offset of field: __va_list_tag::gp_offset"]
        [::std::mem::offset_of!(__va_list_tag, gp_offset) - 0usize];
    ["Offset of field: __va_list_tag::fp_offset"]
        [::std::mem::offset_of!(__va_list_tag, fp_offset) - 4usize];
    ["Offset of field: __va_list_tag::overflow_arg_area"]
        [::std::mem::offset_of!(__va_list_tag, overflow_arg_area) - 8usize];
    ["Offset of field: __va_list_tag::reg_save_area"]
        [::std::mem::offset_of!(__va_list_tag, reg_save_area) - 16usize];
};
